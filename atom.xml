<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的程序世界</title>
  <subtitle>今年我23岁了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://febsky.me/"/>
  <updated>2016-07-11T08:47:19.000Z</updated>
  <id>http://febsky.me/</id>
  
  <author>
    <name>Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo添加站内搜索</title>
    <link href="http://febsky.me/2016/07/11/2016-07-11-Hexo%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    <id>http://febsky.me/2016/07/11/2016-07-11-Hexo添加站内搜索/</id>
    <published>2016-07-11T05:49:07.000Z</published>
    <updated>2016-07-11T08:47:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Google-和-百度提供的站内搜索&quot;&gt;&lt;a href=&quot;#Google-和-百度提供的站内搜索&quot; class=&quot;headerlink&quot; title=&quot;Google 和 百度提供的站内搜索&quot;&gt;&lt;/a&gt;Google 和 百度提供的站内搜索&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;可行性：&lt;/strong&gt;Google 呵呵，你懂。百度 据说github拒绝百度的爬虫，如果你的网站部署在github首页上，可能不能成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt; 在google的输入框中输入  &lt;code&gt;site:fesky.me&lt;/code&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Swiftype&quot;&gt;&lt;a href=&quot;#Swiftype&quot; class=&quot;headerlink&quot; title=&quot;Swiftype&quot;&gt;&lt;/a&gt;Swiftype&lt;/h1&gt;&lt;p&gt;这个据说是国外的一个很屌的做站内搜索的服务商，据说B轮融资。融了很多刀、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官方网址：&lt;/strong&gt; &lt;a href=&quot;https://swiftype.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiftype&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可行性 ：&lt;/strong&gt; 据说官方给了30天的免费试用，试用期结束就降到普通版，我感觉我就是要搜个关键字也就几百篇文章完全没问题，可是我的过了试用期却不能用了，不知道为啥 时间为2016年7月。而且官网让我给他发邮局联系，你懂我的英语水平根本搞不明白他说了些啥。&lt;/p&gt;
&lt;h1 id=&quot;Algolia&quot;&gt;&lt;a href=&quot;#Algolia&quot; class=&quot;headerlink&quot; title=&quot;Algolia&quot;&gt;&lt;/a&gt;Algolia&lt;/h1&gt;&lt;p&gt;从 Algolia 管理界面和文档上来看不会比 Swiftype 差，可留作备选。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官方网址&lt;/strong&gt; &lt;a href=&quot;https://www.algolia.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Algolia&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;序列化站点内容作为数据源，然后自己写查询方法。&quot;&gt;&lt;a href=&quot;#序列化站点内容作为数据源，然后自己写查询方法。&quot; class=&quot;headerlink&quot; title=&quot;序列化站点内容作为数据源，然后自己写查询方法。&quot;&gt;&lt;/a&gt;序列化站点内容作为数据源，然后自己写查询方法。&lt;/h1&gt;&lt;p&gt;好像有个Hexo的插件 &lt;a href=&quot;https://github.com/PaicHyperionDev/hexo-generator-search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-generator-search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者写的文档：&lt;/strong&gt; &lt;a href=&quot;http://hahack.com/codes/local-search-engine-for-hexo/#stq=&amp;amp;stp=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;目前我用的这种方式，哈哈，我给这自己写了个通用版的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先安装这个插件,主要为了生成search.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install --save hexo-generator-search&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置hexo根目录的&lt;code&gt;_confing.yml&lt;/code&gt;文件，在文件最后添加,具体参数代表含义看文档。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;search:&amp;#10;  path: search.xml&amp;#10;  field: post&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;source&lt;/code&gt;文件夹下面创建一个html文件我的如下,我主要为了偷懒不去修改theme中的模板了。也可以按照作者的方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;!DOCTYPE html&amp;#62;&amp;#10;&amp;#60;html lang=&amp;#34;en&amp;#34;&amp;#62;&amp;#10;&amp;#60;head&amp;#62;&amp;#10;    &amp;#60;meta charset=&amp;#34;UTF-8&amp;#34;&amp;#62;&amp;#10;    &amp;#60;title&amp;#62;&amp;#25628;&amp;#32034;&amp;#39029;&amp;#38754;&amp;#60;/title&amp;#62;&amp;#10;    &amp;#60;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;http://code.jquery.com/jquery-latest.js&amp;#34;&amp;#62;&amp;#60;/script&amp;#62;&amp;#10;&amp;#10;    &amp;#60;script type=&amp;#34;text/javascript&amp;#34;&amp;#62;&amp;#10;&amp;#10;        var searchFunc = function (path, search_id, content_id) &amp;#123;&amp;#10;            &amp;#39;use strict&amp;#39;;&amp;#10;            $.ajax(&amp;#123;&amp;#10;                url: path,&amp;#10;                dataType: &amp;#34;xml&amp;#34;,&amp;#10;                success: function (xmlResponse) &amp;#123;&amp;#10;                    // get the contents from search data&amp;#10;                    var datas = $(&amp;#34;entry&amp;#34;, xmlResponse).map(function () &amp;#123;&amp;#10;                        return &amp;#123;&amp;#10;                            title: $(&amp;#34;title&amp;#34;, this).text(),&amp;#10;                            content: $(&amp;#34;content&amp;#34;, this).text(),&amp;#10;                            url: $(&amp;#34;url&amp;#34;, this).text()&amp;#10;                        &amp;#125;;&amp;#10;                    &amp;#125;).get();&amp;#10;                    var $input = document.getElementById(search_id);&amp;#10;                    var $resultContent = document.getElementById(content_id);&amp;#10;                    $input.addEventListener(&amp;#39;input&amp;#39;, function () &amp;#123;&amp;#10;                        var str = &amp;#39;&amp;#60;ul class=\&amp;#34;search-result-list\&amp;#34;&amp;#62;&amp;#39;;&amp;#10;                        var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);&amp;#10;                        $resultContent.innerHTML = &amp;#34;&amp;#34;;&amp;#10;                        if (this.value.trim().length &amp;#60;= 0) &amp;#123;&amp;#10;                            return;&amp;#10;                        &amp;#125;&amp;#10;                        // perform local searching&amp;#10;                        datas.forEach(function (data) &amp;#123;&amp;#10;                            var isMatch = true;&amp;#10;                            var content_index = [];&amp;#10;                            var data_title = data.title.trim().toLowerCase();&amp;#10;                            var data_content = data.content.trim().replace(/&amp;#60;[^&amp;#62;]+&amp;#62;/g, &amp;#34;&amp;#34;).toLowerCase();&amp;#10;                            var data_url = data.url;&amp;#10;                            var index_title = -1;&amp;#10;                            var index_content = -1;&amp;#10;                            var first_occur = -1;&amp;#10;                            // only match artiles with not empty titles and contents&amp;#10;                            if (data_title != &amp;#39;&amp;#39; &amp;#38;&amp;#38; data_content != &amp;#39;&amp;#39;) &amp;#123;&amp;#10;                                keywords.forEach(function (keyword, i) &amp;#123;&amp;#10;                                    index_title = data_title.indexOf(keyword);&amp;#10;                                    index_content = data_content.indexOf(keyword);&amp;#10;                                    if (index_title &amp;#60; 0 &amp;#38;&amp;#38; index_content &amp;#60; 0) &amp;#123;&amp;#10;                                        isMatch = false;&amp;#10;                                    &amp;#125; else &amp;#123;&amp;#10;                                        if (index_content &amp;#60; 0) &amp;#123;&amp;#10;                                            index_content = 0;&amp;#10;                                        &amp;#125;&amp;#10;                                        if (i == 0) &amp;#123;&amp;#10;                                            first_occur = index_content;&amp;#10;                                        &amp;#125;&amp;#10;                                    &amp;#125;&amp;#10;                                &amp;#125;);&amp;#10;                            &amp;#125;&amp;#10;                            // show search results&amp;#10;                            if (isMatch) &amp;#123;&amp;#10;                                str += &amp;#34;&amp;#60;li&amp;#62;&amp;#60;a href=&amp;#39;&amp;#34; + data_url + &amp;#34;&amp;#39; class=&amp;#39;search-result-title&amp;#39;&amp;#62;&amp;#34; + data_title + &amp;#34;&amp;#60;/a&amp;#62;&amp;#34;;&amp;#10;                                var content = data.content.trim().replace(/&amp;#60;[^&amp;#62;]+&amp;#62;/g, &amp;#34;&amp;#34;);&amp;#10;                                if (first_occur &amp;#62;= 0) &amp;#123;&amp;#10;                                    // cut out 100 characters&amp;#10;                                    var start = first_occur - 20;&amp;#10;                                    var end = first_occur + 80;&amp;#10;                                    if (start &amp;#60; 0) &amp;#123;&amp;#10;                                        start = 0;&amp;#10;                                    &amp;#125;&amp;#10;                                    if (start == 0) &amp;#123;&amp;#10;                                        end = 100;&amp;#10;                                    &amp;#125;&amp;#10;                                    if (end &amp;#62; content.length) &amp;#123;&amp;#10;                                        end = content.length;&amp;#10;                                    &amp;#125;&amp;#10;                                    var match_content = content.substr(start, end);&amp;#10;                                    // highlight all keywords&amp;#10;                                    keywords.forEach(function (keyword) &amp;#123;&amp;#10;                                        var regS = new RegExp(keyword, &amp;#34;gi&amp;#34;);&amp;#10;                                        match_content = match_content.replace(regS, &amp;#34;&amp;#60;em class=\&amp;#34;search-keyword\&amp;#34;&amp;#62;&amp;#34; + keyword + &amp;#34;&amp;#60;/em&amp;#62;&amp;#34;);&amp;#10;                                    &amp;#125;);&amp;#10;&amp;#10;                                    str += &amp;#34;&amp;#60;p class=\&amp;#34;search-result\&amp;#34;&amp;#62;&amp;#34; + match_content + &amp;#34;...&amp;#60;/p&amp;#62;&amp;#34;&amp;#10;                                &amp;#125;&amp;#10;                                str += &amp;#34;&amp;#60;/li&amp;#62;&amp;#34;;&amp;#10;                            &amp;#125;&amp;#10;                        &amp;#125;);&amp;#10;                        str += &amp;#34;&amp;#60;/ul&amp;#62;&amp;#34;;&amp;#10;                        $resultContent.innerHTML = str;&amp;#10;                    &amp;#125;);&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;);&amp;#10;        &amp;#125;&amp;#10;    &amp;#60;/script&amp;#62;&amp;#10;&amp;#10;&amp;#10;    &amp;#60;script type=&amp;#34;text/javascript&amp;#34;&amp;#62;&amp;#10;    &amp;#9;//&amp;#27880;&amp;#24847;&amp;#36825;&amp;#20010;&amp;#22320;&amp;#26041;&amp;#35201;&amp;#25913;&amp;#25104;&amp;#33258;&amp;#24049;&amp;#30340;&amp;#21338;&amp;#23458;&amp;#22320;&amp;#22336;&amp;#10;        searchFunc(&amp;#34;http://febsky.me/search.xml&amp;#34;, &amp;#39;local-search-input&amp;#39;, &amp;#39;local-search-result&amp;#39;);&amp;#10;    &amp;#60;/script&amp;#62;&amp;#10;&amp;#60;/head&amp;#62;&amp;#10;&amp;#60;body&amp;#62;&amp;#10;&amp;#60;div id=&amp;#34;site_search&amp;#34;&amp;#62;&amp;#10;    &amp;#60;input type=&amp;#34;text&amp;#34; id=&amp;#34;local-search-input&amp;#34; name=&amp;#34;q&amp;#34; results=&amp;#34;0&amp;#34; placeholder=&amp;#34;search my blog...&amp;#34;&amp;#10;           class=&amp;#34;form-control&amp;#34;/&amp;#62;&amp;#10;&amp;#10;    &amp;#60;div id=&amp;#34;local-search-result&amp;#34;&amp;#62;&amp;#60;/div&amp;#62;&amp;#10;&amp;#60;/div&amp;#62;&amp;#10;&amp;#60;/body&amp;#62;&amp;#10;&amp;#60;/html&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后一步很重要，因为我们用了偷懒的方式，所以必须弥补&lt;/p&gt;
&lt;p&gt;在根目录的&lt;code&gt;_config.yml&lt;/code&gt; 中修改 skip_render 配置，意思是说不让模板来渲染，我们自己为这个html指定css样式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;skip_render:&amp;#10;    - search.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样运行 &lt;code&gt;hexo d -g&lt;/code&gt; 之后，就可以用我们自己的域名加&lt;code&gt;/search.html&lt;/code&gt;的方式打开搜索界面了。例如我的是&lt;code&gt;http://febsky.me/search.html&lt;/code&gt; 很丑是吧，自己写css吧，还好我以前做web。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 至此就完成了本地检索引擎的实现，最后的工作就是修改样式，让检索页面更美观。在 searchFunc 函数中，作者已经为几个关键的页面元素设定了 css 名：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ul.search-result-list - 搜索结果列表的样式名；&lt;br&gt;a.search-result-title - 搜索结果文章标题的样式名；&lt;br&gt;p.search-result - 搜索结果每篇文章的预览段落的样式名；&lt;br&gt;em.search-keyword - 搜索结果每篇文章的预览段落中匹配关键词的样式名。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Google-和-百度提供的站内搜索&quot;&gt;&lt;a href=&quot;#Google-和-百度提供的站内搜索&quot; class=&quot;headerlink&quot; title=&quot;Google 和 百度提供的站内搜索&quot;&gt;&lt;/a&gt;Google 和 百度提供的站内搜索&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;可行性：&lt;/strong&gt;Google 呵呵，你懂。百度 据说github拒绝百度的爬虫，如果你的网站部署在github首页上，可能不能成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt; 在google的输入框中输入  &lt;code&gt;site:fesky.me&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://febsky.me/categories/Hexo/"/>
    
      <category term="搜索" scheme="http://febsky.me/categories/Hexo/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="Hexo" scheme="http://febsky.me/tags/Hexo/"/>
    
      <category term="站内搜索" scheme="http://febsky.me/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Android开发我用到的Chrome插件</title>
    <link href="http://febsky.me/2016/07/05/2016-07-05-Android%E5%BC%80%E5%8F%91%E6%88%91%E7%94%A8%E5%88%B0%E7%9A%84Chrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://febsky.me/2016/07/05/2016-07-05-Android开发我用到的Chrome插件/</id>
    <published>2016-07-05T05:35:51.000Z</published>
    <updated>2016-07-06T03:24:21.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Chrome调试WebView&quot;&gt;&lt;a href=&quot;#Chrome调试WebView&quot; class=&quot;headerlink&quot; title=&quot;Chrome调试WebView&quot;&gt;&lt;/a&gt;Chrome调试WebView&lt;/h1&gt;&lt;p&gt;&lt;code&gt;前提一定要开启手机USB调试模式&lt;/code&gt;如果千万不要丢了U&lt;/p&gt;
&lt;p&gt;在电脑上打开Chrome浏览器的菜单– 更多工具 – 检查设备（Chromemenu &amp;gt; More tools &amp;gt; Inspect Devices），或者直接在浏览器地址栏输入chrome://inspect 或者about:inspect&lt;/p&gt;
&lt;p&gt;然后自己瞎鼓捣就行了。&lt;/p&gt;
&lt;h1 id=&quot;Chrome（电脑端）操作Android真机（解放双手）&quot;&gt;&lt;a href=&quot;#Chrome（电脑端）操作Android真机（解放双手）&quot; class=&quot;headerlink&quot; title=&quot;Chrome（电脑端）操作Android真机（解放双手）&quot;&gt;&lt;/a&gt;Chrome（电脑端）操作Android真机（解放双手）&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Chrome有个叫做 &lt;code&gt;Vysor&lt;/code&gt; 的插件，可以直接在Chrome应用市场搜索。&lt;br&gt;可惜的是这个的免费版，画面太不清晰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其实还有一个不是Chrome插件的东西，是Google开发的亲儿子，（简称ASM）是一款监视手机或者模拟器屏幕的工具，主要和上面相比分辨率高   &lt;a href=&quot;https://code.google.com/archive/p/android-screen-monitor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-screen-monitor&lt;/a&gt;  这个托管在GoogleCode上面，要科学上网！ 这个和上面的相比仅仅有监视的功能不能操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置方式：解压后将 &lt;code&gt;asm.jar&lt;/code&gt;拷贝到本机 &lt;code&gt;android-sdk\platform-tools&lt;/code&gt;目录下。然后命令行运行 &lt;code&gt;java -jar asm.jar&lt;/code&gt; 如果不copy到 platform-tools目录下，可能要配置Android sdk的环境变量。切记。&lt;/p&gt;
&lt;h1 id=&quot;Facebook出了一个叫做Stetho东西&quot;&gt;&lt;a href=&quot;#Facebook出了一个叫做Stetho东西&quot; class=&quot;headerlink&quot; title=&quot;Facebook出了一个叫做Stetho东西&quot;&gt;&lt;/a&gt;Facebook出了一个叫做&lt;a href=&quot;http://facebook.github.io/stetho/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stetho&lt;/a&gt;东西&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 他能在Chrome控制台中查看app的网络请求，数据抓包，和app的数据库文件等等。但是要在app中引入库，具体的操作看官网吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chrome调试WebView&quot;&gt;&lt;a href=&quot;#Chrome调试WebView&quot; class=&quot;headerlink&quot; title=&quot;Chrome调试WebView&quot;&gt;&lt;/a&gt;Chrome调试WebView&lt;/h1&gt;&lt;p&gt;&lt;code&gt;前提一定要开启手机USB
    
    </summary>
    
      <category term="Android" scheme="http://febsky.me/categories/Android/"/>
    
      <category term="Chrome插件" scheme="http://febsky.me/categories/Android/Chrome%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Chrome插件" scheme="http://febsky.me/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向工程用到的工具</title>
    <link href="http://febsky.me/2016/07/05/2016-07-05-Android%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://febsky.me/2016/07/05/2016-07-05-Android逆向工程用到的工具/</id>
    <published>2016-07-05T05:12:00.000Z</published>
    <updated>2016-07-07T06:54:27.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;第一套组合&quot;&gt;&lt;a href=&quot;#第一套组合&quot; class=&quot;headerlink&quot; title=&quot;第一套组合&quot;&gt;&lt;/a&gt;第一套组合&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/iBotPeaches/Apktool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apktool&lt;/a&gt; + &lt;a href=&quot;https://github.com/pxb1988/dex2jar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dex2jar&lt;/a&gt; + &lt;a href=&quot;https://github.com/java-decompiler/jd-gui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jd-gui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可惜的是apktool好像后来不再支持调试Smali文件，jd-gui 作者从 2015 年开始就停止了维护.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是AndroidStudio有个调试Smali的插件  &lt;a href=&quot;SmaliIdea：https://github.com/JesusFreke/smali/wiki/smalidea&quot;&gt;地址 https://github.com/JesusFreke/smali/wiki/smalidea&lt;/a&gt;&lt;br&gt;据说jadx 不错，可以取代 jd-gui &lt;a href=&quot;https://github.com/skylot/jadx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址 https://github.com/skylot/jadx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Google-出的几个逆向分析工具&quot;&gt;&lt;a href=&quot;#Google-出的几个逆向分析工具&quot; class=&quot;headerlink&quot; title=&quot;Google 出的几个逆向分析工具&quot;&gt;&lt;/a&gt;Google 出的几个逆向分析工具&lt;/h1&gt;&lt;h2 id=&quot;1-enjarify&quot;&gt;&lt;a href=&quot;#1-enjarify&quot; class=&quot;headerlink&quot; title=&quot;1. enjarify  &quot;&gt;&lt;/a&gt;1. enjarify  &lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/enjarify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/enjarify&lt;/a&gt;&lt;br&gt;功能：可直接将 apk 文件还原成为 jar 文件，也可以和 dex2jar 一样，直接操作某个dex&lt;/p&gt;
&lt;p&gt;这是 Google 出品的一个逆向分析工具，从反编译成 jar 包的流程来说，要比 dex2jar 方便得多。下载完工具到本地并配置好 Python 环境后，需要修改 enjarify 目录下的 enjarify.bat 文件，将 python3 改为 python&lt;/p&gt;
&lt;h2 id=&quot;2-Procyon&quot;&gt;&lt;a href=&quot;#2-Procyon&quot; class=&quot;headerlink&quot; title=&quot;2. Procyon&quot;&gt;&lt;/a&gt;2. Procyon&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/mstrobel/procyon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bitbucket.org/mstrobel/procyon&lt;/a&gt;&lt;br&gt;功能：将反编译得到 jar 包还原成 java 文件，同时能够更强的还原代码的逻辑结构 &lt;/p&gt;
&lt;h2 id=&quot;3-ClassyShark&quot;&gt;&lt;a href=&quot;#3-ClassyShark&quot; class=&quot;headerlink&quot; title=&quot;3. ClassyShark&quot;&gt;&lt;/a&gt;3. ClassyShark&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/android-classyshark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/android-classyshark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;功能：可直接浏览 Apk，支持对.dex, .aar, .so，.apk, .jar, .class等文件的操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java -jar ClassyShark.jar -open XXX.apk&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一套组合&quot;&gt;&lt;a href=&quot;#第一套组合&quot; class=&quot;headerlink&quot; title=&quot;第一套组合&quot;&gt;&lt;/a&gt;第一套组合&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/iBotPeaches/Apktool&quot; target=&quot;_
    
    </summary>
    
      <category term="Android" scheme="http://febsky.me/categories/Android/"/>
    
      <category term="反编译" scheme="http://febsky.me/categories/Android/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="逆向工程" scheme="http://febsky.me/categories/Android/%E5%8F%8D%E7%BC%96%E8%AF%91/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="反编译" scheme="http://febsky.me/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="逆向工程" scheme="http://febsky.me/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python使用虚拟环境</title>
    <link href="http://febsky.me/2016/06/17/2016-06-17-Python%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://febsky.me/2016/06/17/2016-06-17-Python使用虚拟环境/</id>
    <published>2016-06-17T09:46:24.000Z</published>
    <updated>2016-07-07T06:12:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Python的虚拟环境可以使一个Python程序拥有独立的库library和解释器interpreter，而不用与其他Python程序共享统一个library和interpreter。虚拟环境的好处是避免了不同Python程序间的互相影响（共同使用global library 和 interpreter），例如程序A需要某个库的1.0版本，而程序B需要同样这个库的2.0版本，如果程序B执行则A就不能执行了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装virtualenv：&lt;br&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建虚拟环境&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv venv&lt;/code&gt;&lt;br&gt; venv是新创建的虚拟环境的名称。 同时会创建一个与虚拟环境名称相同的文件夹venv, 里面存储了一个独立的Python执行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入虚拟环境&lt;/p&gt;
&lt;p&gt; &lt;code&gt;source venv/bin/activate&lt;/code&gt;&lt;br&gt; 进入虚拟环境后，命令行的提示符会加入虚拟环境的名称，例如：(venv)user@machine:~$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;退出虚拟环境&lt;br&gt; &lt;code&gt;deactivate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除虚拟环境&lt;br&gt; &lt;code&gt;rm -r venv&lt;/code&gt;&lt;br&gt; 直接删除虚拟环境所在的文件夹venv就删除了我们创建的venv虚拟环境。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Python的虚拟环境可以使一个Python程序拥有独立的库library和解释器interpreter，而不用与其他Python程序共享统一个library和interpreter。虚拟环境的好处是避免了不同Python程序间的互相影响（共同使用global librar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python常用的库</title>
    <link href="http://febsky.me/2016/06/17/2016-06-17-Python%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/"/>
    <id>http://febsky.me/2016/06/17/2016-06-17-Python常用的库/</id>
    <published>2016-06-16T17:55:08.000Z</published>
    <updated>2016-06-17T16:09:13.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;网络请求库 requests &lt;a href=&quot;http://cn.python-requests.org/zh_CN/latest/user/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一份中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML解析  pyquery 或者 beautifulsoup&lt;/li&gt;
&lt;li&gt;orm库 sqlalchemy &lt;a href=&quot;http://gashero.yeax.com/?p=6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一份中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;种子解析libtorrent&lt;/li&gt;
&lt;li&gt;web Flask,flask-httpauth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【参考】&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/vovlie/p/4182814.html?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用Flask设计带认证的Restfull&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;网络请求库 requests &lt;a href=&quot;http://cn.python-requests.org/zh_CN/latest/user/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一份中文文档&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="Python" scheme="http://febsky.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://febsky.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python日期时间的处理</title>
    <link href="http://febsky.me/2016/06/14/2016-06-14-Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://febsky.me/2016/06/14/2016-06-14-Python日期时间的处理/</id>
    <published>2016-06-14T14:04:19.000Z</published>
    <updated>2016-06-14T14:30:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;首先导入时间日期模块&quot;&gt;&lt;a href=&quot;#首先导入时间日期模块&quot; class=&quot;headerlink&quot; title=&quot;首先导入时间日期模块&quot;&gt;&lt;/a&gt;首先导入时间日期模块&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import datetime&amp;#10;import time&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;string转datetime&quot;&gt;&lt;a href=&quot;#string转datetime&quot; class=&quot;headerlink&quot; title=&quot;string转datetime&quot;&gt;&lt;/a&gt;string转datetime&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str = &amp;#39;2012-11-19&amp;#39;&amp;#10;&amp;#10;date_time = datetime.datetime.strptime(str,&amp;#39;%Y-%m-%d&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;datetime转string&quot;&gt;&lt;a href=&quot;#datetime转string&quot; class=&quot;headerlink&quot; title=&quot;datetime转string&quot;&gt;&lt;/a&gt;datetime转string&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;date_time = datetime.datetime(2012,11,19,0,0)&amp;#10;&amp;#10;date_time.strftime(&amp;#39;%Y-%m-%d&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;datetime-获取date&quot;&gt;&lt;a href=&quot;#datetime-获取date&quot; class=&quot;headerlink&quot; title=&quot;datetime 获取date&quot;&gt;&lt;/a&gt;datetime 获取date&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;date_time.date()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;datetime转时间戳&quot;&gt;&lt;a href=&quot;#datetime转时间戳&quot; class=&quot;headerlink&quot; title=&quot;datetime转时间戳&quot;&gt;&lt;/a&gt;datetime转时间戳&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;time_time = time.mktime(date_time.timetuple())&amp;#10;print time_time&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;时间戳转string&quot;&gt;&lt;a href=&quot;#时间戳转string&quot; class=&quot;headerlink&quot; title=&quot;时间戳转string&quot;&gt;&lt;/a&gt;时间戳转string&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;time.strftime(&amp;#39;%Y-%m-%d&amp;#39;,time.localtime(time_time))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;time（时间戳）与datetime之间的互相转换&quot;&gt;&lt;a href=&quot;#time（时间戳）与datetime之间的互相转换&quot; class=&quot;headerlink&quot; title=&quot;time（时间戳）与datetime之间的互相转换&quot;&gt;&lt;/a&gt;time（时间戳）与datetime之间的互相转换&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&amp;#27880;&amp;#37322; time.time() &amp;#36820;&amp;#22238;&amp;#30340;&amp;#26159;&amp;#27627;&amp;#31186;&amp;#20540;&amp;#10;datetime.datetime.fromtimestamp(time.time())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;date转datetime&quot;&gt;&lt;a href=&quot;#date转datetime&quot; class=&quot;headerlink&quot; title=&quot;date转datetime&quot;&gt;&lt;/a&gt;date转datetime&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;date = datetime.date.today()&amp;#10;&amp;#10;print date    ##datetime.date(2012,11,19)&amp;#10;&amp;#10;datetime.datetime.strptime(str(date),&amp;#39;%Y-%m-%d&amp;#39;) #&amp;#23558;date&amp;#36716;&amp;#25442;&amp;#20026;str&amp;#65292;&amp;#22312;&amp;#30001;str&amp;#36716;&amp;#25442;&amp;#20026;datetime&amp;#10;&amp;#10;datetime.datetime(2012,11,19,0,0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;##time模块&lt;/p&gt;
&lt;p&gt;time模块提供各种操作时间的函数，一般有两种表示时间的方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种是时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的&lt;/li&gt;
&lt;li&gt;第二种以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同&lt;/li&gt;
&lt;li&gt;gmtime()与mktime（）可以将两种时间表示方法自由转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【参考文献】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://iam42.iteye.com/blog/1922875&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;time 和 datetime之间的关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先导入时间日期模块&quot;&gt;&lt;a href=&quot;#首先导入时间日期模块&quot; class=&quot;headerlink&quot; title=&quot;首先导入时间日期模块&quot;&gt;&lt;/a&gt;首先导入时间日期模块&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import datetime&amp;#10;import time&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;string转datetime&quot;&gt;&lt;a href=&quot;#string转datetime&quot; class=&quot;headerlink&quot; title=&quot;string转datetime&quot;&gt;&lt;/a&gt;string转datetime&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str = &amp;#39;2012-11-19&amp;#39;&amp;#10;&amp;#10;date_time = datetime.datetime.strptime(str,&amp;#39;%Y-%m-%d&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://febsky.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://febsky.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中图文并排插件</title>
    <link href="http://febsky.me/2016/06/13/2016-06-13-Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%96%87%E5%B9%B6%E6%8E%92%E6%8F%92%E4%BB%B6/"/>
    <id>http://febsky.me/2016/06/13/2016-06-13-Android开发中的图文并排插件/</id>
    <published>2016-06-13T09:33:37.000Z</published>
    <updated>2016-06-13T02:19:11.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sufficientlysecure/html-textview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html-textview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zzhoujay/RichText&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RichText&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sufficientlysecure/html-textview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html-textview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ht
    
    </summary>
    
      <category term="Android" scheme="http://febsky.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题目录介绍</title>
    <link href="http://febsky.me/2016/06/03/2016-06-03-Hexo%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://febsky.me/2016/06/03/2016-06-03-Hexo主题目录介绍/</id>
    <published>2016-06-03T04:37:28.000Z</published>
    <updated>2016-06-12T02:29:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;分析主题目录&quot;&gt;&lt;a href=&quot;#分析主题目录&quot; class=&quot;headerlink&quot; title=&quot;分析主题目录&quot;&gt;&lt;/a&gt;分析主题目录&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;存放所有主题的文件目录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;themes&amp;#10;    |--my_theme&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;某个特定主题目录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;my_theme&amp;#10;    |-- _config.yml&amp;#10;    |-- languages/&amp;#10;    |-- layout/&amp;#10;    &amp;#9;|-- _partial/&amp;#10;&amp;#9;&amp;#9;|-- _widget/&amp;#10;&amp;#9;&amp;#9;|-- archive.ejs *&amp;#10;&amp;#9;&amp;#9;|-- category.ejs *&amp;#10;&amp;#9;&amp;#9;|-- index.ejs *&amp;#10;&amp;#9;&amp;#9;|-- layout.ejs *&amp;#10;&amp;#9;&amp;#9;|-- page.ejs *&amp;#10;&amp;#9;&amp;#9;|-- post.ejs *&amp;#10;&amp;#9;&amp;#9;|-- tag.ejs *&amp;#10;    |-- LICENSE&amp;#10;    |-- README.md&amp;#10;    |-- source/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;layout/&lt;/code&gt;&lt;br&gt;以上打&lt;code&gt;*&lt;/code&gt;的文件表示，每个主题至少需要这些文件。所有的主题都是用layout.ejs作为默认的布局文件，你也可以自定义布局文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_widget/&lt;/code&gt;： 小工具目录，在my_theme主题中对右边栏的控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_partial/&lt;/code&gt;： 组件目录，给博客添加统计、评论等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source/&lt;/code&gt;&lt;br&gt;主题资源目录，主题用到的CSS、Javascript等文件需要放在这个目录中，会被编译到hexo的public目录中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;menu:        #&amp;#31449;&amp;#28857;&amp;#23548;&amp;#33322;&amp;#26639; &amp;#65288;&amp;#26631;&amp;#31614;: &amp;#36335;&amp;#24452;&amp;#65289;&amp;#10;  &amp;#39318;&amp;#39029;: /&amp;#10;  &amp;#24402;&amp;#26723;: /archives&amp;#10;  &amp;#20851;&amp;#20110;: /about&amp;#10;&amp;#10;widgets:        #&amp;#23567;&amp;#24037;&amp;#20855; &amp;#21363;&amp;#31449;&amp;#28857;&amp;#30340;&amp;#21491;&amp;#36793;&amp;#19968;&amp;#26639; &amp;#39029;&amp;#38754;&amp;#20250;&amp;#25353;&amp;#36825;&amp;#37324;&amp;#30340;&amp;#39034;&amp;#24207;&amp;#25490;&amp;#21015;&amp;#10;- recent_posts&amp;#10;- category&amp;#10;- weibo_show&amp;#10;- blogroll&amp;#10;&amp;#10;excerpt_link: &amp;#38405;&amp;#35835;&amp;#20840;&amp;#25991;   #&amp;#40664;&amp;#35748;&amp;#26159;Read more &amp;#21487;&amp;#20197;&amp;#25913;&amp;#25104;&amp;#20013;&amp;#25991;&amp;#10;&amp;#10;twitter:    #&amp;#22681;&amp;#20869;&amp;#24456;&amp;#23569;&amp;#29992;&amp;#27492;&amp;#40479;&amp;#65292;so&amp;#21487;&amp;#20197;&amp;#21024;&amp;#25481;&amp;#10;&amp;#10;addthis:    #&amp;#36825;&amp;#20010;&amp;#20063;&amp;#21487;&amp;#20197;&amp;#21024;&amp;#25481;&amp;#10;  enable: true&amp;#10;&amp;#10;fancybox: true&amp;#10;&amp;#10;baidu_analytics: true    #&amp;#30334;&amp;#24230;&amp;#32479;&amp;#35745;&amp;#65292;&amp;#22825;&amp;#26397;&amp;#36824;&amp;#26159;&amp;#36825;&amp;#20010;&amp;#22909;&amp;#20351;&amp;#65292;&amp;#27809;&amp;#21150;&amp;#27861;&amp;#28404;&amp;#10;&amp;#10;google_analytics:        #&amp;#40664;&amp;#35748;&amp;#32479;&amp;#35745;&amp;#65292;&amp;#22810;&amp;#20040;&amp;#24076;&amp;#26395;&amp;#29992;&amp;#36825;&amp;#20010;&amp;#32479;&amp;#35745;&amp;#65292;&amp;#21487;&amp;#24796;&amp;#10;&amp;#10;rss: /atom.xml        #RSS&amp;#10;&amp;#10;comment_provider:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index 首页&lt;/li&gt;
&lt;li&gt;post 文章&lt;/li&gt;
&lt;li&gt;page 分页&lt;/li&gt;
&lt;li&gt;archive 归档&lt;/li&gt;
&lt;li&gt;category 分类归档&lt;/li&gt;
&lt;li&gt;tag 标签归档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分析主题目录&quot;&gt;&lt;a href=&quot;#分析主题目录&quot; class=&quot;headerlink&quot; title=&quot;分析主题目录&quot;&gt;&lt;/a&gt;分析主题目录&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;存放所有主题的文件目录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="Hexo" scheme="http://febsky.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://febsky.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac下的某些命令</title>
    <link href="http://febsky.me/2016/05/29/2016-05-29-Mac%E4%B8%8B%E7%9A%84%E6%9F%90%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <id>http://febsky.me/2016/05/29/2016-05-29-Mac下的某些命令/</id>
    <published>2016-05-29T07:51:03.000Z</published>
    <updated>2016-06-02T15:11:43.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;open .&lt;/code&gt; 单开finder为当前目录&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;open .&lt;/code&gt; 单开finder为当前目录&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://febsky.me/categories/Mac/"/>
    
      <category term="命令行" scheme="http://febsky.me/categories/Mac/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="Mac" scheme="http://febsky.me/tags/Mac/"/>
    
      <category term="命令行" scheme="http://febsky.me/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发中的小技巧</title>
    <link href="http://febsky.me/2016/05/28/2016-05-16-Android%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://febsky.me/2016/05/28/2016-05-16-Android中的小技巧/</id>
    <published>2016-05-28T08:39:22.000Z</published>
    <updated>2016-07-06T05:36:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ListView小技巧&quot;&gt;&lt;a href=&quot;#ListView小技巧&quot; class=&quot;headerlink&quot; title=&quot;ListView小技巧&quot;&gt;&lt;/a&gt;ListView小技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以设置空白站位View &lt;code&gt;listView.setEmptyView(view);&lt;/code&gt;非常有用&lt;/li&gt;
&lt;li&gt;缓慢滚动到某个位置&lt;code&gt;listView.smoothScrollToPosition();&lt;/code&gt;当然还有其他的滚动方法&lt;/li&gt;
&lt;li&gt;在使用&lt;code&gt;adapter.notifyDataSetChanged()&lt;/code&gt;方法的时候，必须保证传进adapter的数据List是同一个对象，否则无法实现效果（我就犯过这个错）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;滚动和位置&quot;&gt;&lt;a href=&quot;#滚动和位置&quot; class=&quot;headerlink&quot; title=&quot;滚动和位置&quot;&gt;&lt;/a&gt;滚动和位置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollTo&lt;/code&gt;方法其实滚动的是内容，比如说TextView中滚动的是文字。比如：&lt;code&gt;textView.scrollTo(0, 10);&lt;/code&gt;意思是让TextView中的内容，的（0，10）坐标去和，TextView左上角对齐。&lt;/li&gt;
&lt;li&gt;滑动多少算是滑动了&lt;code&gt;ViewConfiguration.get(this).getScaledTouchSlop();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所谓的滑动，是相对于参考系的运动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getX&lt;/code&gt;,&lt;code&gt;getY&lt;/code&gt; 获取的是相对于父view的相对位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getRawX&lt;/code&gt;,&lt;code&gt;getRawY&lt;/code&gt;获取的是点击位置距离屏幕左边和上边的距离&lt;/li&gt;
&lt;li&gt;Scroller类可以实现平滑的移动效果&lt;/li&gt;
&lt;li&gt;实现拖拽效果&lt;code&gt;DrawerLayout&lt;/code&gt;,&lt;code&gt;SlidingPaneLayout&lt;/code&gt;,&lt;code&gt;ViewDragHelper&lt;/code&gt;,尤其是最后一个。非常diao~  &lt;ul&gt;
&lt;li&gt;SlidingPaneLayout 效果是中间的内容块向右移动，以显示出左边的内容。只支持左侧显示  &lt;/li&gt;
&lt;li&gt;DrawerLayout 支持左滑右滑 效果是左右侧的内容盖住中间的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;扩大View的触摸和点击响应范围&quot;&gt;&lt;a href=&quot;#扩大View的触摸和点击响应范围&quot; class=&quot;headerlink&quot; title=&quot;扩大View的触摸和点击响应范围&quot;&gt;&lt;/a&gt;扩大View的触摸和点击响应范围&lt;/h1&gt;&lt;p&gt;&lt;code&gt;setTouchDelegate()&lt;/code&gt;方法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ListView小技巧&quot;&gt;&lt;a href=&quot;#ListView小技巧&quot; class=&quot;headerlink&quot; title=&quot;ListView小技巧&quot;&gt;&lt;/a&gt;ListView小技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以设置空白站位View &lt;code&gt;listView.setEmptyView(view);&lt;/code&gt;非常有用&lt;/li&gt;
&lt;li&gt;缓慢滚动到某个位置&lt;code&gt;listView.smoothScrollToPosition();&lt;/code&gt;当然还有其他的滚动方法&lt;/li&gt;
&lt;li&gt;在使用&lt;code&gt;adapter.notifyDataSetChanged()&lt;/code&gt;方法的时候，必须保证传进adapter的数据List是同一个对象，否则无法实现效果（我就犯过这个错）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android SQLite存储自定义对象</title>
    <link href="http://febsky.me/2016/05/23/2016-05-23-AndroidSQLite%E5%AD%98%E5%82%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/"/>
    <id>http://febsky.me/2016/05/23/2016-05-23-AndroidSQLite存储自定义对象/</id>
    <published>2016-05-23T08:39:22.000Z</published>
    <updated>2016-06-02T15:20:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-SQLite存储自定义对象&quot;&gt;&lt;a href=&quot;#Android-SQLite存储自定义对象&quot; class=&quot;headerlink&quot; title=&quot;Android SQLite存储自定义对象&quot;&gt;&lt;/a&gt;Android SQLite存储自定义对象&lt;/h1&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;1. 首先给出JavaBean&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Student implements Serializable &amp;#123;&amp;#10;&amp;#10;&amp;#9;/**&amp;#10;&amp;#9; * &amp;#10;&amp;#9; */&amp;#10;&amp;#9;private static final long serialVersionUID = 1L;&amp;#10;&amp;#9;String name;&amp;#10;&amp;#9;int age;&amp;#10;&amp;#10;&amp;#9;public Student(String name, int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super();&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public String getName() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setName(String name) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public int getAge() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setAge(int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2. 然后给出Dbhelper&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/***&amp;#10; * &amp;#21333;&amp;#20363;&amp;#27169;&amp;#24335;&amp;#23454;&amp;#29616;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#36830;&amp;#25509;&amp;#10; * @author bobo&amp;#10; *&amp;#10; */&amp;#10;public class Dbhelper extends SQLiteOpenHelper &amp;#123;&amp;#10;&amp;#10;&amp;#9;private static Dbhelper dbhelper = null;&amp;#10;&amp;#10;&amp;#9;public static Dbhelper getInstens(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;if (dbhelper == null) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;dbhelper = new Dbhelper(context);&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return dbhelper;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;private Dbhelper(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super(context, &amp;#34;datebase.db&amp;#34;, null, 1);&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated constructor stub&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onCreate(SQLiteDatabase db) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#9;&amp;#9;&amp;#10;&amp;#9;&amp;#9; //&amp;#36825;&amp;#24352;&amp;#34920;&amp;#37319;&amp;#29992;&amp;#20108;&amp;#36827;&amp;#21046;&amp;#25991;&amp;#20214;&amp;#23384;&amp;#20648;&amp;#23545;&amp;#35937;&amp;#27880;&amp;#24847;&amp;#31532;&amp;#20108;&amp;#20010;&amp;#23383;&amp;#27573;&amp;#25105;&amp;#20204;&amp;#23558;&amp;#23545;&amp;#35937;&amp;#23384;&amp;#21462;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#38754;&amp;#10;&amp;#9;&amp;#9;String sql_class_table=&amp;#34;create table if not exists classtable(_id integer primary key autoincrement,classtabledata text)&amp;#34;;&amp;#10;&amp;#9;&amp;#9;db.execSQL(sql_class_table);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onUpgrade(SQLiteDatabase db, int oldversion, int newversion) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3. 最后是一个数据库操作类Dao 或者 叫service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后是一个数据库操作类，最主要的方法在这个类里面，通过二进制流把对象转换为对象流然后取出二进制存取进数据库，最后取的时候也一样。首先取出二进制对象，然后通过流还原对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&amp;#10; * &amp;#25968;&amp;#25454;&amp;#24211;&amp;#25805;&amp;#20316;&amp;#10; * @author bobo&amp;#10; *&amp;#10; */&amp;#10;public class StudentServcie &amp;#123;&amp;#10;&amp;#9;Context context;&amp;#10;&amp;#10;&amp;#9;public StudentServcie(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated constructor stub&amp;#10;&amp;#9;&amp;#9;this.context = context;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;/**&amp;#10;&amp;#9; * &amp;#20445;&amp;#23384;&amp;#10;&amp;#9; * @param student&amp;#10;&amp;#9; */&amp;#10;&amp;#9;public void saveObject(Student student) &amp;#123;&amp;#10;&amp;#9;&amp;#9;ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();&amp;#10;&amp;#9;&amp;#9;try &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;ObjectOutputStream objectOutputStream = new ObjectOutputStream(arrayOutputStream);&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.writeObject(student);&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.flush();&amp;#10;&amp;#9;&amp;#9;&amp;#9;byte data[] = arrayOutputStream.toByteArray();&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;arrayOutputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&amp;#10;&amp;#9;&amp;#9;&amp;#9;SQLiteDatabase database = dbhelper.getWritableDatabase();&amp;#10;&amp;#9;&amp;#9;&amp;#9;database.execSQL(&amp;#34;insert into classtable (classtabledata) values(?)&amp;#34;, new Object[] &amp;#123; data &amp;#125;);&amp;#10;&amp;#9;&amp;#9;&amp;#9;database.close();&amp;#10;&amp;#9;&amp;#9;&amp;#125; catch (Exception e) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;// TODO Auto-generated catch block&amp;#10;&amp;#9;&amp;#9;&amp;#9;e.printStackTrace();&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public Student getObject() &amp;#123;&amp;#10;&amp;#9;&amp;#9;Student student = null;&amp;#10;&amp;#9;&amp;#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&amp;#10;&amp;#9;&amp;#9;SQLiteDatabase database = dbhelper.getReadableDatabase();&amp;#10;&amp;#9;&amp;#9;Cursor cursor = database.rawQuery(&amp;#34;select * from classtable&amp;#34;, null);&amp;#10;&amp;#9;&amp;#9;if (cursor != null) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;while (cursor.moveToNext()) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;byte data[] = cursor.getBlob(cursor.getColumnIndex(&amp;#34;classtabledata&amp;#34;));&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;ByteArrayInputStream arrayInputStream = new ByteArrayInputStream(data);&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;try &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;ObjectInputStream inputStream = new ObjectInputStream(arrayInputStream);&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;student = (Student) inputStream.readObject();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;inputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;arrayInputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;break;//&amp;#36825;&amp;#37324;&amp;#20026;&amp;#20102;&amp;#27979;&amp;#35797;&amp;#23601;&amp;#21462;&amp;#19968;&amp;#20010;&amp;#25968;&amp;#25454;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#125; catch (Exception e) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;// TODO Auto-generated catch block&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;e.printStackTrace();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return student;&amp;#10;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4. 最后是测试代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MainActivity extends Activity &amp;#123;&amp;#10;&amp;#9;StudentServcie servcie;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super.onCreate(savedInstanceState);&amp;#10;&amp;#9;&amp;#9;setContentView(R.layout.activity_main);&amp;#10;&amp;#9;&amp;#9;servcie = new StudentServcie(this);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#9;public void onclick(View view) &amp;#123;&amp;#10;&amp;#9;&amp;#9;switch (view.getId()) &amp;#123;&amp;#10;&amp;#9;&amp;#9;case R.id.save:&amp;#10;&amp;#9;&amp;#9;&amp;#9;servcie.saveObject(new Student(&amp;#34;&amp;#26446;&amp;#38647;&amp;#34;, 20));&amp;#10;&amp;#9;&amp;#9;&amp;#9;Toast.makeText(this, &amp;#34;&amp;#23384;&amp;#21462;&amp;#23436;&amp;#25104;&amp;#34;, 0).show();&amp;#10;&amp;#9;&amp;#9;&amp;#9;break;&amp;#10;&amp;#9;&amp;#9;case R.id.load:&amp;#10;&amp;#9;&amp;#9;&amp;#9;Student student =&amp;#9;servcie.getObject();&amp;#10;&amp;#9;&amp;#9;&amp;#9;if(student!=null)&amp;#10;&amp;#9;&amp;#9;&amp;#9;Toast.makeText(this, student.getName()+student.getAge(), 0).show();&amp;#10;&amp;#9;&amp;#9;&amp;#9;break;&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样我们也可以对list，或者map对象进行保存，方法跟上面的一样，但是map或者list里面的对象必须序列化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【参考文献】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是转载 &lt;a href=&quot;http://blog.csdn.net/codebob/article/details/37091003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址点这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-SQLite存储自定义对象&quot;&gt;&lt;a href=&quot;#Android-SQLite存储自定义对象&quot; class=&quot;headerlink&quot; title=&quot;Android SQLite存储自定义对象&quot;&gt;&lt;/a&gt;Android SQLite存储自定义对象&lt;/h1&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我认为不错的几个Hexo主题</title>
    <link href="http://febsky.me/2016/05/15/2016-05-15-%E6%88%91%E8%AE%A4%E4%B8%BA%E4%B8%8D%E9%94%99%E7%9A%84%E5%87%A0%E4%B8%AAHexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://febsky.me/2016/05/15/2016-05-15-我认为不错的几个Hexo主题/</id>
    <published>2016-05-15T04:37:28.000Z</published>
    <updated>2016-06-12T01:31:20.000Z</updated>
    
    <content type="html">&lt;p&gt;我认为几个不错的主题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kaijun/hexo-theme-huxblog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-huxblog&lt;/a&gt;   &lt;a href=&quot;http://huangxuan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址 Hux Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-even&lt;/a&gt;    &lt;a href=&quot;http://www.ahonn.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-icarus&lt;/a&gt;   &lt;a href=&quot;http://blog.zhangruipeng.me/hexo-theme-icarus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alex-fun/hexo-theme-jane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-jane&lt;/a&gt;   &lt;a href=&quot;http://hejx.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape-plus&lt;/a&gt; &lt;a href=&quot;http://honglu.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;  &lt;a href=&quot;http://arvinxiang.com/landscape-plus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;And&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-apollo&lt;/a&gt; &lt;a href=&quot;http://pinggod.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://haojen.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-Anisina&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;主题的制作&quot;&gt;&lt;a href=&quot;#主题的制作&quot; class=&quot;headerlink&quot; title=&quot;主题的制作&quot;&gt;&lt;/a&gt;主题的制作&lt;/h1&gt;&lt;p&gt;有两篇很不错的文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.maintao.com/2014/hexo-theme-from-scratch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从零开始定制hexo主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://w3cboy.com/post/2014/05/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%81%9A%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%BB%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一起来做博客——主题和部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://syxiaqj.github.io/2014/02/19/introduce-hexo-theme/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;introduce-hexo-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我认为几个不错的主题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kaijun/hexo-theme-huxblog/&quot;&gt;hexo-theme-huxblog&lt;/a&gt;   &lt;a href=&quot;http://huangxuan.me/&quot;&gt;演示地址 Hux Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot;&gt;hexo-theme-even&lt;/a&gt;    &lt;a href=&quot;http://www.ahonn.me/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;hexo-theme-icarus&lt;/a&gt;   &lt;a href=&quot;http://blog.zhangruipeng.me/hexo-theme-icarus/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alex-fun/hexo-theme-jane&quot;&gt;hexo-theme-jane&lt;/a&gt;   &lt;a href=&quot;http://hejx.me/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot;&gt;landscape-plus&lt;/a&gt; &lt;a href=&quot;http://honglu.me/&quot;&gt;演示地址&lt;/a&gt;  &lt;a href=&quot;http://arvinxiang.com/landscape-plus/&quot;&gt;And&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot;&gt;hexo-theme-apollo&lt;/a&gt; &lt;a href=&quot;http://pinggod.com/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://haojen.github.io/&quot;&gt;hexo-theme-Anisina&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://febsky.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://febsky.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android 中实现倒计时</title>
    <link href="http://febsky.me/2016/05/10/2016-05-10-Android%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://febsky.me/2016/05/10/2016-05-10-Android中实现倒计时的方式/</id>
    <published>2016-05-10T04:14:42.000Z</published>
    <updated>2016-06-02T15:13:55.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-中实现倒计时控件的方法有哪些&quot;&gt;&lt;a href=&quot;#Android-中实现倒计时控件的方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;Android 中实现倒计时控件的方法有哪些&quot;&gt;&lt;/a&gt;Android 中实现倒计时控件的方法有哪些&lt;/h1&gt;&lt;p&gt;今天在工作中用到了倒计时功能，也就是在一个TextView上显示倒计时。突然想到当时面试的时候有家公司的面试官问我在Android中实现倒计时功能我会用哪些方法。哈哈当时竟然不知道Android sdk本身就有实现了。丢人~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第一种CountDownTimer&quot;&gt;&lt;a href=&quot;#第一种CountDownTimer&quot; class=&quot;headerlink&quot; title=&quot;第一种CountDownTimer&quot;&gt;&lt;/a&gt;第一种CountDownTimer&lt;/h2&gt;&lt;p&gt;位于&lt;code&gt;android.os.CountDownTimer&lt;/code&gt;这个类很好用。可以直接查看官方文档，文档中就有实例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountDownTimer(&lt;span class=&quot;number&quot;&gt;30000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; millisUntilFinished)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textView.setText(&lt;span class=&quot;string&quot;&gt;&quot;seconds remaining: &quot;&lt;/span&gt; + millisUntilFinished / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textView.setText(&lt;span class=&quot;string&quot;&gt;&quot;done!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二种-Timer与TimerTask-runOnUiThread-runnable-方法&quot;&gt;&lt;a href=&quot;#第二种-Timer与TimerTask-runOnUiThread-runnable-方法&quot; class=&quot;headerlink&quot; title=&quot;第二种 Timer与TimerTask + runOnUiThread(runnable)方法&quot;&gt;&lt;/a&gt;第二种 Timer与TimerTask + runOnUiThread(runnable)方法&lt;/h2&gt;&lt;h2 id=&quot;第三种Handler与Message（不用TimerTask）&quot;&gt;&lt;a href=&quot;#第三种Handler与Message（不用TimerTask）&quot; class=&quot;headerlink&quot; title=&quot;第三种Handler与Message（不用TimerTask）&quot;&gt;&lt;/a&gt;第三种Handler与Message（不用TimerTask）&lt;/h2&gt;&lt;h2 id=&quot;第四种Handler与Runnable（最简单型）&quot;&gt;&lt;a href=&quot;#第四种Handler与Runnable（最简单型）&quot; class=&quot;headerlink&quot; title=&quot;第四种Handler与Runnable（最简单型）&quot;&gt;&lt;/a&gt;第四种Handler与Runnable（最简单型）&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; recLen = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TextView txtView;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.timertask);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        txtView = (TextView)findViewById(R.id.txttime);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handler.postDelayed(runnable, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Handler handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Runnable runnable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            recLen++;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            txtView.setText(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + recLen);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            handler.postDelayed(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-中实现倒计时控件的方法有哪些&quot;&gt;&lt;a href=&quot;#Android-中实现倒计时控件的方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;Android 中实现倒计时控件的方法有哪些&quot;&gt;&lt;/a&gt;Android 中实现倒计时控件的方法有哪些&lt;/h1&gt;&lt;p&gt;今天在工作中用到了倒计时功能，也就是在一个TextView上显示倒计时。突然想到当时面试的时候有家公司的面试官问我在Android中实现倒计时功能我会用哪些方法。哈哈当时竟然不知道Android sdk本身就有实现了。丢人~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android SQLite操作</title>
    <link href="http://febsky.me/2016/05/10/2016-05-10-Android%E6%93%8D%E4%BD%9CSQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://febsky.me/2016/05/10/2016-05-10-Android操作SQLite数据库的方法/</id>
    <published>2016-05-10T04:14:42.000Z</published>
    <updated>2016-05-13T15:57:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、-SQLiteOpenHelper辅助类&quot;&gt;&lt;a href=&quot;#一、-SQLiteOpenHelper辅助类&quot; class=&quot;headerlink&quot; title=&quot;一、 SQLiteOpenHelper辅助类&quot;&gt;&lt;/a&gt;一、 SQLiteOpenHelper辅助类&lt;/h1&gt;&lt;p&gt;SQLiteOpenHelper类是一个辅助类，用于创建或打开数据库。&lt;br&gt;该类的使用方法一般是自定义一个子类，继承自SQLiteOpenHelper，并覆写其中最关键的两个方法：onCreate(SQLiteDatabase db)和onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)。当新建一个数据库时会调用前者，一般在里面做一些创建表或视图的操作。数据库版本升级时则会调用后者。&lt;/p&gt;
&lt;p&gt;定义好子类后（假如叫SqlHelper），只要调用SqlHelper对象的getReadableDatabase()方法或getWritableDatabase()方法即可返回一个SQLiteDatabase对象。如果是第一次调用，则会创建数据库。随后可使用SQLiteDatabase对象的方法进行数据操作，如：execSQL(), insert(), update(), query(), rawQuery(), delete()等。&lt;/p&gt;
&lt;p&gt;PS：通过该方法创建的数据库存放的目录是固定的，其路径为/data/data/packageName/databases/。&lt;/p&gt;
&lt;h1 id=&quot;二、Context类的openOrCreateDatabase-方法&quot;&gt;&lt;a href=&quot;#二、Context类的openOrCreateDatabase-方法&quot; class=&quot;headerlink&quot; title=&quot;二、Context类的openOrCreateDatabase()方法&quot;&gt;&lt;/a&gt;二、Context类的openOrCreateDatabase()方法&lt;/h1&gt;&lt;p&gt;openOrCreateDatabase(String dbName, int mode, CursorFactory factory);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dbName：数据库名称。&lt;/li&gt;
&lt;li&gt;mode：数据库操作模式。默认值为MODE_PRIVATE（即0）。可选值：MODE_WORLD_READABLE, MODE_WORLD_WRITABLE, MODE_ENABLE_WRITE_AHEAD_LOGGING&lt;/li&gt;
&lt;li&gt;factory：附加的一个工厂类，当SQLiteDatabase实例的query函数被调用时，会使用该工厂类返回一个Cursor。可为null。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static final String DATABASE_NAME = &amp;#8220;myDatabase.db&amp;#8221;;&amp;#10;private static final String DATABASE_TABLE = &amp;#8220;mainTable&amp;#8221;;&amp;#10;private static final String DATABASE_CREATE =&amp;#10;&amp;#8220;create table &amp;#8220; + DATABASE_TABLE +&amp;#10;&amp;#8220; ( _id integer primary key autoincrement,&amp;#8221; +&amp;#10;&amp;#8220;column_one text not null);&amp;#8221;;&amp;#10; &amp;#10;SQLiteDatabase myDatabase;&amp;#10; &amp;#10;private void createDatabase() &amp;#123;&amp;#10;myDatabase = openOrCreateDatabase(DATABASE_NAME, Context.MODE_PRIVATE, null);&amp;#10;myDatabase.execSQL(DATABASE_CREATE);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：该方法得到的数据库文件，其存储路径与上一方法相同。&lt;/p&gt;
&lt;h1 id=&quot;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases&quot;&gt;&lt;a href=&quot;#三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases&quot; class=&quot;headerlink&quot; title=&quot;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()&quot;&gt;&lt;/a&gt;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()&lt;/h1&gt;&lt;p&gt;SQLiteDatabase类有几个静态方法可直接打开或创建数据库。&lt;br&gt;//等同于openDatabase(path, factory, SQLiteDatabase.CREATE_IF_NECESSARY)  &lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(String path, CursorFactory factory)&lt;br&gt;//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY)&lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(File file, CursorFactory factory)&lt;br&gt;//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY, errorHandler)&lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(String path, CursorFactory factory, DatabaseErrorHandler errorHandler)&lt;/p&gt;
&lt;p&gt;PS：该方法打开或创建的数据库文件可与上述两个方法的路径不同。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    private static final String DATABASE_NAME = &amp;#34;xiangjie.db&amp;#34;;&amp;#10;    private static final String DATABASE_TABLE = &amp;#34;test&amp;#34;;&amp;#10;    private static final String DATABASE_CREATE =&amp;#10;    &amp;#34;create table &amp;#34; + DATABASE_TABLE +&amp;#10;            &amp;#34; ( _id integer primary key autoincrement,&amp;#34; +&amp;#10;            &amp;#34;column_one text not null)&amp;#34;;&amp;#10;    @Override&amp;#10;    protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;        super.onCreate(savedInstanceState);&amp;#10;        setContentView(R.layout.activity_green_dao);&amp;#10;        &amp;#10;       SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(&amp;#34;/sdcard/&amp;#34;+DATABASE_NAME, null);&amp;#10;        &amp;#10;        //db.execSQL(&amp;#34;create table test ( _id integer primary key autoincrement,column_one text not null)&amp;#34;);&amp;#10;//        db.execSQL(&amp;#34;insert into test (column_one) values(?)&amp;#34;,new Object[]&amp;#123;&amp;#34;1111&amp;#34;&amp;#125;);&amp;#10;&amp;#10;        Cursor cursor = db.rawQuery(&amp;#34;select * from test;&amp;#34;,null);&amp;#10;        while (cursor.moveToNext()) &amp;#123;&amp;#10;            String id = cursor.getString(0);//&amp;#33719;&amp;#21462;&amp;#31532;&amp;#19968;&amp;#21015;&amp;#30340;&amp;#20540;&amp;#10;            Log.d(&amp;#34;Q_M:&amp;#34;,id);&amp;#10;        &amp;#125;&amp;#10;        cursor.close();&amp;#10;        db.close();&amp;#10;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;最后记住，不管用何种方式打开了数据库，获得的SQLite对象不再使用时，都要调用close()来关闭打开的数据库，否则抛出IllegalStateException异常。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-SQLiteOpenHelper辅助类&quot;&gt;&lt;a href=&quot;#一、-SQLiteOpenHelper辅助类&quot; class=&quot;headerlink&quot; title=&quot;一、 SQLiteOpenHelper辅助类&quot;&gt;&lt;/a&gt;一、 SQLiteOpenHelper辅
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="数据库" scheme="http://febsky.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>nodejs的学习</title>
    <link href="http://febsky.me/2016/05/07/2016-05-07-nodejs%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://febsky.me/2016/05/07/2016-05-07-nodejs的学习/</id>
    <published>2016-05-07T12:18:31.000Z</published>
    <updated>2016-05-29T14:27:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;检查Python 是否安装&lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查ruby是否安装&lt;code&gt;ruby -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;首先安装&lt;code&gt;homebrew&lt;/code&gt;,然后命令行&lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查node是否安装成功 &lt;code&gt;node -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后命令行&lt;code&gt;node&lt;/code&gt;可以打开nodejs的交互器，和Python类似，很好玩&lt;/li&gt;
&lt;li&gt;打开控制台输入 which node ，得到的输出结果就是node安装路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;什么不说直接上代码，Mac命令行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim server.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入下面代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req,res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res.end(&lt;span class=&quot;string&quot;&gt;&#39;Hello World\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Server running at http://127.0.0.1:1337/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;$ node server.js&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;模块与包管理工具&quot;&gt;&lt;a href=&quot;#模块与包管理工具&quot; class=&quot;headerlink&quot; title=&quot;模块与包管理工具&quot;&gt;&lt;/a&gt;模块与包管理工具&lt;/h1&gt;&lt;p&gt;Commonjs 规范,理解模块含义理解模块&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;requite&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模块大致分为三种：核心模块、文件模块、第三方模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块创建流程：&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建模块&lt;code&gt;teacher.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导出模块 &lt;code&gt;export.add = function{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加载模块 `var teacher = requite(‘./teacher.js’)&lt;/li&gt;
&lt;li&gt;使用模块 &lt;code&gt;teacher.add(&amp;#39;Scott&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基本API&quot;&gt;&lt;a href=&quot;#基本API&quot; class=&quot;headerlink&quot; title=&quot;基本API&quot;&gt;&lt;/a&gt;基本API&lt;/h1&gt;&lt;p&gt;查看一个model的所拥有的函数&lt;code&gt;$ node&lt;/code&gt;开启nodejs交互器&lt;br&gt;然后输入模块名，比如想看url模块,直接在交互器输入&lt;code&gt;url&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#62; url&amp;#10;&amp;#123; parse: [Function: urlParse],&amp;#10;  resolve: [Function: urlResolve],&amp;#10;  resolveObject: [Function: urlResolveObject],&amp;#10;  format: [Function: urlFormat],&amp;#10;  Url: [Function: Url] &amp;#125;&amp;#10;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;了解http-模块&quot;&gt;&lt;a href=&quot;#了解http-模块&quot; class=&quot;headerlink&quot; title=&quot;了解http 模块&quot;&gt;&lt;/a&gt;了解http 模块&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;什么是回调？&lt;/li&gt;
&lt;li&gt;什么是同步/异步？&lt;/li&gt;
&lt;li&gt;什么是I/O？&lt;/li&gt;
&lt;li&gt;什么的单线程/多线程？&lt;/li&gt;
&lt;li&gt;什么是阻塞/非阻塞？&lt;/li&gt;
&lt;li&gt;什么是事件？&lt;/li&gt;
&lt;li&gt;什么是事件驱动？&lt;/li&gt;
&lt;li&gt;什么是基于事件驱动的回调？&lt;/li&gt;
&lt;li&gt;什么是事件循环？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理解nodejs中的 this （上下文）,一般指向当前函数的拥有者。&lt;br&gt;但是&lt;code&gt;call&lt;/code&gt;方法可以改变this上下文&lt;/p&gt;
&lt;h2 id=&quot;Node的突出特点&quot;&gt;&lt;a href=&quot;#Node的突出特点&quot; class=&quot;headerlink&quot; title=&quot;Node的突出特点&quot;&gt;&lt;/a&gt;Node的突出特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WEB服务器&lt;br&gt;NodeJS与一般的后台编译性语言有什么不同?        &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NodeJS本身包含一个http服务器，不像asp.net程序需要一个IIS，或者java的程序需要一个apche&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeJS是异步IO，事件驱动的;一般的程序调用都是执行一个命令之后，线程阻塞，一直等到命令成功之后，才会去执行下面的事情，但是NodeJS不一样，所有的IO，网络通信，磁盘操作都是由事件来控制的，Nodejs进程在同一时刻只会处理一个事件，完成后立即进入事件轮询并检查处理后面的事件。如图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;【参考文献】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个学习网站&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-express-framework.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这儿&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.nodeclass.com/articles/99682&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orm2参考使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sequelizejs.com/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sequelize github上start最多的orm&lt;/a&gt; &lt;a href=&quot;http://my.oschina.net/zj0303/blog/305384&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个使用教程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;检查Python 是否安装&lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查r
    
    </summary>
    
      <category term="nodejs" scheme="http://febsky.me/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://febsky.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Android 打包过程</title>
    <link href="http://febsky.me/2016/05/06/2016-05-06-Android%E6%89%93%E5%8C%85%E8%BF%87%E7%A8%8B/"/>
    <id>http://febsky.me/2016/05/06/2016-05-06-Android打包过程/</id>
    <published>2016-05-06T04:14:42.000Z</published>
    <updated>2016-05-13T15:55:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-打包过程&quot;&gt;&lt;a href=&quot;#Android-打包过程&quot; class=&quot;headerlink&quot; title=&quot;Android 打包过程&quot;&gt;&lt;/a&gt;Android 打包过程&lt;/h1&gt;&lt;p&gt;第一步：打包资源文件，生成R.java文件&lt;br&gt;【输入】Resource文件（就是工程中res中的文件）、Assets文件（相当于另外一种资源，这种资源Android系统并不像对res中的文件那样优化它）、AndroidManifest.xml文件（包名就是从这里读取的，因为生成R.java文件需要包名）、Android基础类库（Android.jar文件）&lt;br&gt;【输出】打包好的资源（一般在Android工程的bin目录可以看到一个叫resources.ap_的文件就是它了）、R.java文件（在gen目录中，大家应该很熟悉了）&lt;br&gt;【工具】aapt工具，它的路径在${ANDROID_SDK_HOME}/platform-tools/aapt（如果你使用的是Windows系统，按惯例路径应该这样写：%ANDROID_SDK_HOME%\platform-tools\aapt.exe，下同）。&lt;/p&gt;
&lt;p&gt;第二步：处理AIDL文件，生成对应的.java文件（当然，有很多工程没有用到AIDL，那这个过程就可以省了）&lt;br&gt;【输入】源码文件、aidl文件、framework.aidl文件&lt;br&gt;【输出】对应的.java文件&lt;br&gt;【工具】aidl工具&lt;/p&gt;
&lt;p&gt;第三步：编译Java文件，生成对应的.class文件&lt;br&gt;【输入】源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件）&lt;br&gt;【输出】.class文件&lt;br&gt;【工具】javac工具&lt;/p&gt;
&lt;p&gt;第四步：把.class文件转化成Davik VM支持的.dex文件&lt;br&gt;【输入】 .class文件（包括Aidl生成.class文件，R生成的.class文件，源文件生成的.class文件），库文件（.jar文件）&lt;br&gt;【输出】.dex文件&lt;br&gt;【工具】javac工具&lt;/p&gt;
&lt;p&gt;第五步：打包生成未签名的.apk文件&lt;br&gt;【输入】打包后的资源文件、打包后类文件（.dex文件）、libs文件（包括.so文件，当然很多工程都没有这样的文件，如果你不使用C/C++开发的话）&lt;br&gt;【输出】未签名的.apk文件&lt;br&gt;【工具】apkbuilder工具&lt;/p&gt;
&lt;p&gt;第六步：对未签名.apk文件进行签名&lt;br&gt;【输入】未签名的.apk文件&lt;br&gt;【输出】签名的.apk文件&lt;br&gt;【工具】jarsigner&lt;/p&gt;
&lt;p&gt;第七步：对签名后的.apk文件进行对齐处理（不进行对齐处理是不能发布到Google Market的）&lt;br&gt;【输入】签名后的.apk文件&lt;br&gt;【输出】对齐后的.apk文件&lt;br&gt;【工具】zipalign工具&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-打包过程&quot;&gt;&lt;a href=&quot;#Android-打包过程&quot; class=&quot;headerlink&quot; title=&quot;Android 打包过程&quot;&gt;&lt;/a&gt;Android 打包过程&lt;/h1&gt;&lt;p&gt;第一步：打包资源文件，生成R.java文件&lt;br&gt;【输入】R
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="编译" scheme="http://febsky.me/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android FragmentPagerAdapter和FragmentStatePagerAdapter</title>
    <link href="http://febsky.me/2016/05/06/2016-05-12-FragmentStatePagerAdapter%E5%92%8CFragmentPagerAdapter/"/>
    <id>http://febsky.me/2016/05/06/2016-05-12-FragmentStatePagerAdapter和FragmentPagerAdapter/</id>
    <published>2016-05-06T04:14:42.000Z</published>
    <updated>2016-05-13T15:56:42.000Z</updated>
    
    <content type="html">&lt;p&gt;在公司查看别人的代码的时候发现个东西，在展示试题的是时候，他用的是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;而如果是我的话，我就直接用&lt;code&gt;viewpager&lt;/code&gt;+&lt;code&gt;PagerAdapter&lt;/code&gt;,但是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;是个什么鬼，我听过&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;可是没用过&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;啊，只怪自己学艺不精，既然人家用了就有用的道理。&lt;/p&gt;
&lt;h1 id=&quot;文档说明&quot;&gt;&lt;a href=&quot;#文档说明&quot; class=&quot;headerlink&quot; title=&quot;文档说明&quot;&gt;&lt;/a&gt;文档说明&lt;/h1&gt;&lt;p&gt;跟踪源码来看一下FragmentPagerAdapter和FragmentStatePagerAdapter的API说明。我们先来看看FragmentPagerAdapter的API（直接翻译吧）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FragmentPagerAdapter继承自PagerAdapter ，主要用来展示多个Fragment页面，并且每一个Fragment都会被保存在fragment manager中。 FragmentPagerAdapter最适用于那种少量且相对静态的页面，例如几个tab页。每一个用户访问过的fragment都会被保存在内存中，尽管他的视图层级可能会在不可见时被销毁。这可能导致大量的内存因为fragment实例能够拥有任意数量的状态。对于较多的页面集合，更推荐使用FragmentStatePagerAdapter。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentPagerAdapter的派生类只需要实现getItem(int)和getCount()即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FragmentStatePagerAdapter继承自PagerAdapter，主要使用Fragment来管理每个页面。这个类同样用来保存和恢复fragment页面的状态。 FragmentStatePagerAdapter更多用于大量页面，例如视图列表。当某个页面对用户不再可见时，他们的整个fragment就会被销毁，仅保留fragment状态。相比于FragmentPagerAdapter，这样做的好处是在访问各个页面时能节约大量的内存开销，但代价是在页面切换时会增加非常多的开销。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentStatePagerAdapter的派生类只需要实现getItem(int)和getCount()即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#直接上结论，然后是分析代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FragmentStatePagerAdapter&lt;br&gt;顾名思义，我们的这个FragmentStatePagerAdapter，在我们切换不同的Fragment的时候，我们会把前面的Fragment销毁，所谓的销毁就是走完Fragment的生命周期，调用&lt;code&gt;onDestroyView&lt;/code&gt;,&lt;code&gt;onDestroy&lt;/code&gt;,直到&lt;code&gt;onDetach&lt;/code&gt;为止,而我们系统在销毁前，会把我们的我们Fragment的Bundle在我们的onSaveInstanceState(Bundle)保存下来。等用户切换回来的时候，我们的Fragment就会根据我们的instance state恢复出来。并且当切换回来的时候会调用这个Fragment的整个生命周期从&lt;code&gt;onAttach&lt;/code&gt;方法开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FragmentPagerAdapter&lt;br&gt;使用这种Adapter，我们的Fragment在切换的时候，只会把我们的Fragment的view销毁，也就是说一个Fragment的生命周期只会调用到&lt;code&gt;onDestroyView&lt;/code&gt;,变不会再往下执行，下一次再滑动viewpager回到上一个&lt;code&gt;Fragment&lt;/code&gt;的时候,会从这个Fragment的&lt;code&gt;onCreateView&lt;/code&gt;开始执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;代码验证&quot;&gt;&lt;a href=&quot;#代码验证&quot; class=&quot;headerlink&quot; title=&quot;代码验证&quot;&gt;&lt;/a&gt;代码验证&lt;/h1&gt;&lt;h2 id=&quot;Fragment代码&quot;&gt;&lt;a href=&quot;#Fragment代码&quot; class=&quot;headerlink&quot; title=&quot;Fragment代码&quot;&gt;&lt;/a&gt;Fragment代码&lt;/h2&gt;&lt;p&gt;为了代码简洁Fragment的布局文件就不再给出，就是一个&lt;code&gt;RelativeLayout&lt;/code&gt;包含一个&lt;code&gt;TextView&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.fesky.test.fragment;&amp;#10;&amp;#10;import android.content.Context;&amp;#10;import android.os.Bundle;&amp;#10;import android.support.annotation.Nullable;&amp;#10;import android.support.v4.app.Fragment;&amp;#10;import android.util.Log;&amp;#10;import android.view.LayoutInflater;&amp;#10;import android.view.View;&amp;#10;import android.view.ViewGroup;&amp;#10;import android.widget.TextView;&amp;#10;&amp;#10;import me.fesky.test.R;&amp;#10;&amp;#10;/**&amp;#10; * Created by Administrator on 2016/5/12.&amp;#10; */&amp;#10;public class MyFragment extends Fragment &amp;#123;&amp;#10;&amp;#10;    int index;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onAttach(Context context) &amp;#123;&amp;#10;        super.onAttach(context);&amp;#10;        Bundle bundle = getArguments();&amp;#10;        index = bundle.getInt(&amp;#34;index&amp;#34;);&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onAttach&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Nullable&amp;#10;    @Override&amp;#10;    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &amp;#123;&amp;#10;        View view = inflater.inflate(R.layout.fragment, container, false);&amp;#10;        TextView textView = (TextView) view.findViewById(R.id.text_view);&amp;#10;&amp;#10;        textView.setText(textView.getText()+&amp;#34;&amp;#34;+index);&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onCreateView&amp;#34; + index);&amp;#10;        return view;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDestroyView() &amp;#123;&amp;#10;        super.onDestroyView();&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDestroyView&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDestroy() &amp;#123;&amp;#10;        super.onDestroy();&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDestroy&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDetach() &amp;#123;&amp;#10;        super.onDetach();&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDetach&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Activity以及adapter代码&quot;&gt;&lt;a href=&quot;#Activity以及adapter代码&quot; class=&quot;headerlink&quot; title=&quot;Activity以及adapter代码&quot;&gt;&lt;/a&gt;Activity以及adapter代码&lt;/h2&gt;&lt;p&gt;为了代码简洁&lt;code&gt;Activity&lt;/code&gt;的布局文件就不再给出，就是一个&lt;code&gt;RelativeLayout&lt;/code&gt;包含一个&lt;code&gt;android.support.v4.view.ViewPager&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.fesky.test;&amp;#10;&amp;#10;import android.support.v4.app.Fragment;&amp;#10;import android.support.v4.app.FragmentManager;&amp;#10;import android.support.v4.app.FragmentPagerAdapter;&amp;#10;import android.support.v4.app.FragmentStatePagerAdapter;&amp;#10;import android.support.v4.view.PagerAdapter;&amp;#10;import android.support.v4.view.ViewPager;&amp;#10;import android.support.v7.app.AppCompatActivity;&amp;#10;import android.os.Bundle;&amp;#10;&amp;#10;import java.util.ArrayList;&amp;#10;import java.util.List;&amp;#10;&amp;#10;import me.fesky.test.fragment.MyFragment;&amp;#10;&amp;#10;public class TestFragmentActivity extends AppCompatActivity &amp;#123;&amp;#10;&amp;#10;    ViewPager viewPager;&amp;#10;&amp;#10;    List&amp;#60;Fragment&amp;#62; fragments;&amp;#10;&amp;#10;    @Override&amp;#10;    protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;        super.onCreate(savedInstanceState);&amp;#10;        setContentView(R.layout.activity_test_fragment);&amp;#10;&amp;#10;        fragments = new ArrayList&amp;#60;&amp;#62;();&amp;#10;&amp;#10;        /**&amp;#10;         * &amp;#21019;&amp;#24314;&amp;#22235;&amp;#20010;Fragment&amp;#10;         */&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;&amp;#10;        /**&amp;#10;         *&amp;#29992;&amp;#36825;&amp;#31181;&amp;#26041;&amp;#24335;&amp;#21521;Fragment&amp;#20256;&amp;#36882;&amp;#21442;&amp;#25968;&amp;#10;         */&amp;#10;        Bundle bundle1 = new Bundle();&amp;#10;        bundle1.putInt(&amp;#34;index&amp;#34;,1);&amp;#10;        fragments.get(0).setArguments(bundle1);&amp;#10;&amp;#10;        Bundle bundle2 = new Bundle();&amp;#10;        bundle2.putInt(&amp;#34;index&amp;#34;,2);&amp;#10;        fragments.get(1).setArguments(bundle2);&amp;#10;&amp;#10;        Bundle bundle3 = new Bundle();&amp;#10;        bundle3.putInt(&amp;#34;index&amp;#34;,3);&amp;#10;        fragments.get(2).setArguments(bundle3);&amp;#10;&amp;#10;        Bundle bundle4 = new Bundle();&amp;#10;        bundle4.putInt(&amp;#34;index&amp;#34;,4);&amp;#10;        fragments.get(3).setArguments(bundle4);&amp;#10;&amp;#10;        viewPager = (ViewPager) findViewById(R.id.view_pager);&amp;#10;        PagerAdapter pagerAdapter = new MyFragmentPagerAdapter(getSupportFragmentManager());&amp;#10;&amp;#10;        viewPager.setAdapter(pagerAdapter);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;&amp;#10;    /**&amp;#10;     * &amp;#23581;&amp;#35797;&amp;#20999;&amp;#25442;&amp;#32487;&amp;#25215;&amp;#30340;FragmentPagerAdapter&amp;#21644;FragmentStatePagerAdapter&amp;#10;     * &amp;#35266;&amp;#23519;&amp;#25171;&amp;#21360;&amp;#32467;&amp;#26524;&amp;#26377;&amp;#20160;&amp;#20040;&amp;#19981;&amp;#21516;&amp;#10;     */&amp;#10;    public  class MyFragmentPagerAdapter extends FragmentPagerAdapter &amp;#123;&amp;#10;&amp;#10;        public MyFragmentPagerAdapter(FragmentManager fm) &amp;#123;&amp;#10;            super(fm);&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        @Override&amp;#10;        public Fragment getItem(int position) &amp;#123;&amp;#10;            return fragments.get(position);&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        @Override&amp;#10;        public int getCount() &amp;#123;&amp;#10;            return fragments.size();&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;font colot=&quot;red&quot;&gt; 注意上面所说的销毁都是建立在ViewPager缓存逻辑之上的并不是划过去就会销毁的。不了解的可以看下ViewPager的销毁机制&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;运行上面的测试代码，可以看到，当adapter是&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;打印结果如下：&lt;/p&gt;
&lt;p&gt;ViewPager向后滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:24:53.370 11366-11366/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:25:36.260 11366-11366/me.fesky.test I/Q_M:: onAttach3&lt;br&gt;05-12 16:25:36.270 11366-11366/me.fesky.test I/Q_M:: onCreateView3&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onDestroyView1&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onAttach4&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onCreateView4&lt;br&gt;05-12 16:25:44.760 11366-11366/me.fesky.test I/Q_M:: onDestroyView2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ViewPager向前滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:26:17.220 11366-11366/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onDestroyView4&lt;br&gt;05-12 16:26:27.450 11366-11366/me.fesky.test I/Q_M:: onDestroyView3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当adapter是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;打印结果如下：&lt;/p&gt;
&lt;p&gt;ViewPager向后(也就是向下一页滑动)滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:53:36.940 3043-3043/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onAttach3&lt;br&gt;05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onCreateView3&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroyView1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroy1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDetach1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onAttach4&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onCreateView4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ViewPager向前滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:55:31.350 3043-3043/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:55:31.360 3043-3043/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroyView4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroy4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDetach4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroyView3&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroy3&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDetach3&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在公司查看别人的代码的时候发现个东西，在展示试题的是时候，他用的是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;而如果是我的话，我就直接用&lt;code&gt;viewpager&lt;/code&gt;+&lt;code&gt;PagerAdapter&lt;/code&gt;,但是&lt;c
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>泛型（Generics）</title>
    <link href="http://febsky.me/2016/05/04/2016-05-04-Java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://febsky.me/2016/05/04/2016-05-04-Java泛型/</id>
    <published>2016-05-04T04:14:42.000Z</published>
    <updated>2016-05-13T15:55:39.000Z</updated>
    
    <content type="html">&lt;p&gt;泛型是提供给Javac编译器使用的。可以限定集合中输入的类型，让编译器挡住原始程序的非法输入，编译器编译带类型说明的集合时会去掉“类型”信息，使程序运行效率不受影响，对于参数化的泛型类型。&lt;/p&gt;
&lt;h1 id=&quot;泛型中用到的术语&quot;&gt;&lt;a href=&quot;#泛型中用到的术语&quot; class=&quot;headerlink&quot; title=&quot;泛型中用到的术语&quot;&gt;&lt;/a&gt;泛型中用到的术语&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ArrayList&amp;lt;E&amp;gt;&lt;/code&gt;类定义和&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;类引用中涉及如下术语：整个称为ArrayList&lt;e&gt;泛型类型，ArrayList&lt;e&gt;中的E称为&lt;strong&gt;&lt;code&gt;类型变量&lt;/code&gt;&lt;/strong&gt;或&lt;code&gt;类型参数&lt;/code&gt;，整个ArrayList&lt;integer&gt;称为&lt;code&gt;参数化的类型&lt;/code&gt;，ArrayList&lt;integer&gt;中的Integer称为&lt;code&gt;类型参数的实例&lt;/code&gt;或实际类型参数，ArrayList称为原始类型。&lt;/integer&gt;&lt;/integer&gt;&lt;/e&gt;&lt;/e&gt;&lt;/p&gt;
&lt;h1 id=&quot;类型擦除&quot;&gt;&lt;a href=&quot;#类型擦除&quot; class=&quot;headerlink&quot; title=&quot;类型擦除&quot;&gt;&lt;/a&gt;类型擦除&lt;/h1&gt;&lt;p&gt;　　由于Java泛型的实现机制，使用了泛型的代码在运行期间相关的泛型参数的类型会被擦除，我们无法在运行期间获知泛型参数的具体类型（所有的泛型类型在运行时都是Object类型）。&lt;/p&gt;
&lt;p&gt;　　正确理解泛型概念的首要前提是理解类型擦除（type erasure）。 Java中的泛型基本上都是在编译器这个层次来实现的。属于编译器执行类型检查和类型诊断，然后生成普通的非泛型的字节码，也就是在生成的Java字节代码中是不包含泛型中的类型信息的，使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这种实现技术称为类型擦除。如在代码中定义的List&lt;object&gt;和List&lt;string&gt;等类型，在编译之后都会变成List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法避免在运行时刻出现类型转换异常的情况。&lt;/string&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;很多泛型的奇怪特性都与这个类型擦除的存在有关，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型类并没有自己独有的Class类对象。比如并不存在List&lt;string&gt;.class或是List&lt;integer&gt;.class，而只有List.class；&lt;/integer&gt;&lt;/string&gt;&lt;/li&gt;
&lt;li&gt;静态变量是被泛型类的所有实例所共享的。对于声明为MyClass&lt;t&gt;的类，访问其中的静态变量的方法仍然是 MyClass.myStaticVar。不管是通过new MyClass&lt;string&gt;还是new MyClass&lt;integer&gt;创建的对象，都是共享一个静态变量。&lt;/integer&gt;&lt;/string&gt;&lt;/t&gt;&lt;/li&gt;
&lt;li&gt;泛型的类型参数不能用在Java异常处理的catch语句中。因为异常处理是由JVM在运行时刻来进行的。由于类型信息被擦除，JVM是无法区分两个异常类型MyException&lt;string&gt;和MyException&lt;integer&gt;的。对于JVM来说，它们都是MyException类型的。也就无法执行与异常对应的catch语句。&lt;/integer&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;通配符与上下界&quot;&gt;&lt;a href=&quot;#通配符与上下界&quot; class=&quot;headerlink&quot; title=&quot;通配符与上下界&quot;&gt;&lt;/a&gt;通配符与上下界&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;泛型参数可以使用通配符，通配符所表示的类型是未知的。&lt;/li&gt;
&lt;li&gt;List&amp;lt;?&amp;gt;所声明的就是所有类型都是可以的。&lt;/li&gt;
&lt;li&gt;但是List&amp;lt;?&amp;gt;并不等同于List&lt;object&gt;。&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;List&amp;lt;? extends Number&amp;gt;说明List中可能包含的元素类型是Number及其子类。&lt;/li&gt;
&lt;li&gt;而List&amp;lt;? super Number&amp;gt;则说明List中包含的是Number及其父类。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Object&amp;gt; list)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Object obj : list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//这个操作在当前方法的上下文是合法的。 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;String&amp;gt; strs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inspect(strs); &lt;span class=&quot;comment&quot;&gt;//编译错误 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;重新学习泛型的原因&quot;&gt;&lt;a href=&quot;#重新学习泛型的原因&quot; class=&quot;headerlink&quot; title=&quot;重新学习泛型的原因&quot;&gt;&lt;/a&gt;重新学习泛型的原因&lt;/h1&gt;&lt;p&gt;在使用Gson的时候，看源码遇到了瓶颈。在Gson中我们需要将使用了泛型的Java代码序列化或者反序列化的时候，我们确实需要获知泛型参数的类型，这个时候问题就变得比较棘手。&lt;/p&gt;
&lt;p&gt;而在Gson中用来TypeToken这个帮助类来获取泛型的具体类型。这个类的核心关键思想是&lt;code&gt;Class&lt;/code&gt;对象中&lt;code&gt;getGenericSuperclass()&lt;/code&gt;这个方法的使用。这个方法是干嘛的，从字面意思看是获取含有泛型的父类类型。什么玩意？哦，意思是说，如果某个类的父类含有泛型，那么它可以获取父类的字节码对象，也就是Class对象，但是呢这个方法和&lt;code&gt;getSuperclass（）&lt;/code&gt;的区别是，他还能获取到父类中的泛型参数的字节码对象。而Gson中TypeToken的用法就是利用了这个设计思想，看我们每次用TypeToken都是这么用的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Type type = new TypeToken&amp;#60;List&amp;#60;String&amp;#62;&amp;#62;()&amp;#123;&amp;#125;.getType();&amp;#10;List&amp;#60;String&amp;#62; list = gson.fromJson(jsonStr, type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中的&lt;code&gt;new TypeToken&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){}&lt;/code&gt;就是创建了一个TypeToke的匿名子类对象。所以从这个对象中可以拿到父类（TypeToken）中的泛型参数（&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;）的具体类型。&lt;/p&gt;
&lt;p&gt;当然我们可以模仿写一个试试：&lt;/p&gt;
&lt;p&gt;首先建立一个获取类型的帮助类，类似TypeToken&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; me.febsky;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by Administrator on 2016/5/4.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;T&amp;gt; type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type = (Class&amp;lt;T&amp;gt;) getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后看我们的测试类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.febsky;&amp;#10;&amp;#10;import java.lang.reflect.ParameterizedType;&amp;#10;import java.lang.reflect.Type;&amp;#10;&amp;#10;public class Main &amp;#123;&amp;#10;    public static void main(String[] args) &amp;#123;&amp;#10;        Foo&amp;#60;String&amp;#62; foo = new Foo&amp;#60;String&amp;#62;()&amp;#123;&amp;#125;;&amp;#10;        Type mySuperClass = foo.getClass().getGenericSuperclass();&amp;#10;        Type type = ((ParameterizedType)mySuperClass).getActualTypeArguments()[0];&amp;#10;        System.out.println(type);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从测试类中我成功拿到泛型类中的泛型参数的具体类型。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;泛型是提供给Javac编译器使用的。可以限定集合中输入的类型，让编译器挡住原始程序的非法输入，编译器编译带类型说明的集合时会去掉“类型”信息，使程序运行效率不受影响，对于参数化的泛型类型。&lt;/p&gt;
&lt;h1 id=&quot;泛型中用到的术语&quot;&gt;&lt;a href=&quot;#泛型中用到的术语&quot; 
    
    </summary>
    
    
      <category term="Gson" scheme="http://febsky.me/tags/Gson/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="泛型" scheme="http://febsky.me/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 简介和使用</title>
    <link href="http://febsky.me/2016/04/26/2016-04-26-Gradle%E7%9A%84%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://febsky.me/2016/04/26/2016-04-26-Gradle的简介和使用/</id>
    <published>2016-04-26T04:14:42.000Z</published>
    <updated>2016-05-13T15:56:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Gradle是个什么东西，从哪里入手学习，都知道在Android Studio中用到了Gradle配置，那么他和Android 以及AndroidStudio的关系是啥？他和Java的关系又是啥，他脱离AndroidStudio是否能够运行？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看了官方的英文文档后发现社区竟然有热心的开发者翻译了一份中文的oh shit ~ &lt;a href=&quot;https://github.com/DONGChuan/GradleUserGuide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接地址&lt;/a&gt;  &lt;a href=&quot;https://docs.gradle.org/current/release-notes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网文档&lt;/a&gt;最近两年Gradle更新相当频繁，注意更新版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Gradle 是一个基于JVM的构建工具。使用Groovy这种脚步语言，主要提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个像 Ant 一样的灵活的构建工具&lt;/li&gt;
&lt;li&gt;一种可切换的, 像 maven 一样的基于合约构建的框架&lt;/li&gt;
&lt;li&gt;支持强大的多工程构建&lt;/li&gt;
&lt;li&gt;支持强大的依赖管理(基于 ApacheIvy )&lt;/li&gt;
&lt;li&gt;支持已有的 maven 和 ivy 仓库&lt;/li&gt;
&lt;li&gt;支持传递性依赖管理, 而不需要远程仓库或者 pom.xml 或者 ivy 配置文件&lt;/li&gt;
&lt;li&gt;优先支持 Ant 式的任务和构建&lt;/li&gt;
&lt;li&gt;基于 groovy 的构建脚本&lt;/li&gt;
&lt;li&gt;有丰富的领域模型来描述你的构建&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;为啥使用Groovy这种脚步语言&quot;&gt;&lt;a href=&quot;#为啥使用Groovy这种脚步语言&quot; class=&quot;headerlink&quot; title=&quot;为啥使用Groovy这种脚步语言&quot;&gt;&lt;/a&gt;为啥使用Groovy这种脚步语言&lt;/h1&gt;&lt;p&gt;我们认为在脚本构建时，内部基于 XML 的 DSL（基于一个动态语言）优势是巨大的. 有许多动态语言在那里, 我们为什么选择 Groovy? 答案在于 Gradle 的运行环境. 虽然 Gradle 是以一个多用途的构建工具为核心，它的重点是Java项目. 在这样的项目中, 显然团队每个成员都了解 Java. 我们认为构建应尽可能对所有团队成员都是透明的, 所以选择了 Groovy.&lt;/p&gt;
&lt;p&gt;你可能会说，为什么不直接使用 Java 作为构建脚本的语言. 我们认为这是一个有效性的问题. 对于你的团队, 它要有最高的透明度和最低的学习曲线, 也就是说容易掌握. 但由于 Java 的限制, 这样的构建语言不会那么完美和强大. 如 Python，Groovy 或 Ruby 语言都可以有更高的效率. 我们选择了 Groovy 是因为它给 Java 开发人员提供了迄今为止最大的透明度. 其基本的符号和类型与 Java 是一样的，其封装结构和许多其他的地方也是如此.&lt;/p&gt;
&lt;p&gt;对于那些同样分享 Python 或 Ruby 知识的 Java 团队将会很乐意学习它. Gradle 的设计非常适合在 JRuby 和 Jython 中创建另一个构建脚本引擎. 它只是目前开发的优先级里. 我们十分支持任何人来做贡献, 创建额外的构建脚本引擎.&lt;/p&gt;
&lt;h1 id=&quot;安装使用&quot;&gt;&lt;a href=&quot;#安装使用&quot; class=&quot;headerlink&quot; title=&quot;安装使用&quot;&gt;&lt;/a&gt;安装使用&lt;/h1&gt;&lt;p&gt;在编程方面要想快速了解一个东西，就是用一下，也就是写个Hello world!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 需要运行在一个 Java 环境里&lt;ul&gt;
&lt;li&gt;安装一个 Java JDK 或者 JRE. 而且 Java 版本必须至少是 6 以上.&lt;/li&gt;
&lt;li&gt;Gradle 自带 Groovy 库, 所以没必要安装 Groovy. 任何已经安装的 Groovy 会被 Gradle 忽略.&lt;/li&gt;
&lt;li&gt;去Gradle官网下载一个Gradle的版本&lt;a href=&quot;http://www.gradle.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;，选择个比较新的解压就行。（网速可能比较慢,必要时可以选择科学上网）&lt;/li&gt;
&lt;li&gt;解压后设置环境变量（windows和Linux和Mac的不太一样），就是把解压后的bin目录设置到环境变量中。（和jdk的一样）&lt;/li&gt;
&lt;li&gt;然后在命令行中运行&lt;code&gt;gradle -v&lt;/code&gt;来检测你的Gradle是否安装成功。&lt;/li&gt;
&lt;li&gt;设置JVM选项（略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;headerlink&quot; title=&quot;专业术语&quot;&gt;&lt;/a&gt;专业术语&lt;/h1&gt;&lt;p&gt;安也安了，命令行也配置好了，那么就开始在命令行下用唄~其实用过git的同学（首先你得习惯用git的命令行模式而不是图形化界面）可以类比下git的使用方式。&lt;/p&gt;
&lt;p&gt;首先要理解Gradle中的几个专业术语。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;projects ( 项目 )&lt;/strong&gt;：每一个构建都是由一个或多个 projects 构成的. 一个 project 到底代表什么依赖于你想用 Gradle 做什么. 举个例子, 一个 project 可以代表一个 JAR 或者一个网页应用. 它也可能代表一个发布的 ZIP 压缩包, 这个 ZIP 可能是由许多其他项目的 JARs 构成的. 但是一个 project 不一定非要代表被构建的某个东西. 它可以代表一件**要做的事, 比如部署你的应用.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tasks ( 任务 )&lt;/strong&gt;：每一个 project 是由一个或多个 tasks 构成的. 一个 task 代表一些更加细化的构建. 可能是编译一些 classes, 创建一个 JAR, 生成 javadoc, 或者生成某个目录的压缩文件.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实以上的官方解释可以忽略，毛线都读不明白~~~&lt;/p&gt;
&lt;h1 id=&quot;Project对象和build-gradle&quot;&gt;&lt;a href=&quot;#Project对象和build-gradle&quot; class=&quot;headerlink&quot; title=&quot;Project对象和build.gradle&quot;&gt;&lt;/a&gt;Project对象和build.gradle&lt;/h1&gt;&lt;p&gt;为了不深究Gradle的实现原理（就是去读源代码），又要让大家觉得有据可依。我通过引用官方文档的一些描述来帮助大家理解Project对象。&lt;/p&gt;
&lt;p&gt;For each project in the build, Gradle creates an object of type Project and associates this Project object with the build script. (Chapter 13. Writing Build Scripts)&lt;br&gt;构建中的每一个project，Gradle都会创建一个Project对象，并将这个对象与构建脚本相关联。&lt;/p&gt;
&lt;p&gt;There is a one-to-one relationship between a Project and a “build.gradle” file. (Interface Project API)&lt;br&gt;Project对象与build.gradle是一对一的关系。&lt;/p&gt;
&lt;p&gt;First, Gradle scripts are configuration scripts. As the script executes, it configures an object of a particular type. For example, as a build script executes, it configures an object of type Project. This object is called the delegate object of the script. (Gradle Build Language Reference)&lt;br&gt;Gradle的脚本是配置脚本，当脚本执行时，它是在配置某一个特殊类型的对象。比如一个构建脚本的执行，它就是在配置一个Project类型的对象。这个对象叫做脚本的代理对象。&lt;/p&gt;
&lt;p&gt;读完这三句话，应该可以清楚的明白build.gradle的本质，简单的说，build.gradle是对一个Project对象的配置。&lt;/p&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;gradle 命令会在当前目录中查找一个叫 build.gradle 的文件. 我们称这个 build.gradle 文件为一个&lt;strong&gt;构建脚本 (build script)&lt;/strong&gt;, 但是严格来说它是一个构建配置脚本 (build configuration script). 这个脚本定义了一个 &lt;code&gt;project&lt;/code&gt; 和它的 &lt;code&gt;tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;你可以通过 gradle 命令运行一个 Gradle 构建.&lt;/p&gt;
&lt;p&gt;让我们来先看一个例子, 创建一个名为build.gradle的构建脚本.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task hello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;&#39;Hello world!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在命令行里, 进入脚本所在的文件夹然后输入 &lt;code&gt;gradle -q hello&lt;/code&gt; 来执行构建脚本.命令里加入 -q. 代表 quite 模式. 它不会生成 Gradle 的日志信息 (log messages).&lt;/p&gt;
&lt;p&gt;这里发生了什么? 这个构建脚本定义了一个独立的 task, 叫做 hello, 并且加入了一个 action. 当你运行 gradle hello, Gradle 执行叫做 hello 的 task, 也就是执行了你所提供的 action. 这个 action 是一个包含了一些 Groovy 代码的闭包(closure 这个概念不清楚的同学好好谷歌下).&lt;/p&gt;
&lt;p&gt;Gradle 不仅仅是想XML一样的配置文件，他是个脚本，是可以写代码的，更多操作请查看官方文档。&lt;/p&gt;
&lt;h1 id=&quot;Java插件&quot;&gt;&lt;a href=&quot;#Java插件&quot; class=&quot;headerlink&quot; title=&quot;Java插件&quot;&gt;&lt;/a&gt;Java插件&lt;/h1&gt;&lt;p&gt; Gradle 是一种多用途的构建工具. 它可以在你的构建脚本里构建任何你想要实现的东西. 但前提是你必须先在构建脚本里加入代码, 不然它什么都不会执行.&lt;/p&gt;
&lt;p&gt;大都数 Java 项目是非常相像的: 你需要编译你的 Java 源文件, 运行一些单元测试, 同时创建一个包含你类文件的 JAR. 如果你可以不需要为每一个项目重复编写这些, 我想你会非常乐意的.&lt;/p&gt;
&lt;p&gt;幸运的是, 你现在不再需要做这些重复劳动了. Gradle 通过使用插件解决了这个问题. 插件是 Gradle 的扩展, 它会通过某种方式配置你的项目, 典型的有加入一些预配置任务. Gradle 自带了许多插件, 你也可以很简单地编写自己的插件并和其他开发者分享它. Java 插件就是一个这样的插件. 这个插件在你的项目里加入了许多任务， 这些任务会编译和单元测试你的源文件, 并且把它们都集成一个 JAR 文件里.&lt;/p&gt;
&lt;p&gt;Java 插件是基于合约的（&lt;strong&gt;约定优于配置&lt;/strong&gt;）. 这意味着插件已经给项目的许多方面定义了默认的参数, 比如 Java 源文件的位置. 如果你在项目里遵从这些合约, 你通常不需要在你的构建脚本里加入太多东西. 如果你不想要或者是你不能遵循合约, Gradle 也允许你自己定制你的项目. 事实上, 因为对 Java 项目的支持是通过插件实现的, 如果你不想要的话, 你一点也不需要使用这个插件来构建你的项目.&lt;/p&gt;
&lt;h1 id=&quot;gradle-和-groovy的关系&quot;&gt;&lt;a href=&quot;#gradle-和-groovy的关系&quot; class=&quot;headerlink&quot; title=&quot;gradle 和 groovy的关系&quot;&gt;&lt;/a&gt;gradle 和 groovy的关系&lt;/h1&gt;&lt;p&gt;那么好好的groovy怎么就变成gradle那样了呢？&lt;br&gt;原因就是，Gradle大量地使用了Groovy闭包的delegate（委托）机制。简单来说，delegate机制可以使我们将一个闭包中的执行代码的作用对象设置成任意其他对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle深入与实战（六）Gradle的背后是什么？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle是个什么东西，从哪里入手学习，都知道在Android Studio中用到了Gradle配置，那么他和Android 以及AndroidStudio的关系是啥？他和Java的关系又是啥，他脱离AndroidStudio是否能够运行？&lt;/p&gt;
&lt;blockquote
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Gradle" scheme="http://febsky.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>获取表和字段的元数据的方法</title>
    <link href="http://febsky.me/2016/04/24/2014-12-23-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://febsky.me/2016/04/24/2014-12-23-获取表和字段的元数据的方法/</id>
    <published>2016-04-24T10:36:24.000Z</published>
    <updated>2016-05-15T13:25:50.000Z</updated>
    
    <content type="html">&lt;h2&gt;外键关系查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. CONSTRAINT_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. TABLE_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kcu. COLUMN_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. TABLE_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; foreign_table_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. COLUMN_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; foreign_column_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc.is_deferrable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc.initially_deferred&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema.table_constraints &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.key_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; kcu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.constraint_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ccu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	constraint_type = &lt;span class=&quot;string&quot;&gt;&#39;FOREIGN KEY&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; tc. TABLE_NAME = &lt;span class=&quot;string&quot;&gt;&#39;dimention_goods&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://itroadmap.sinaapp.com/2014/12/23/postgres-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;&lt;del&gt;不知道如何防止被流氓网站爬取&lt;/del&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;字段详细信息查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.table_schema,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. TABLE_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.ordinal_position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. COLUMN_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.data_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.character_maximum_length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.numeric_precision,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.numeric_scale,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.is_nullable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.column_default,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	des.description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema. &lt;span class=&quot;keyword&quot;&gt;COLUMNS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; pg_description des &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. TABLE_NAME :: regclass = des.objoid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.ordinal_position = des.objsubid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table_schema = &lt;span class=&quot;string&quot;&gt;&#39;XXXX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; TABLE_NAME = &lt;span class=&quot;string&quot;&gt;&#39;XXXX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ordinal_position;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;获取所有的表名&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tablename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pg_tables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tablename &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pg%&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; tablename &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sql_%&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;##mysql中对入插入的触发器&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELIMITER $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*[DEFINER = &amp;#123; user | CURRENT_USER &amp;#125;]*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`clinkworld_metadata`&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;`add_tid_fields_relation`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`clinkworld_metadata`&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;`fields_relation`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BEGIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; t_id &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; @f1_tid_var &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fields_info &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f1_id;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; t_id &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; @f2_tid_var &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fields_info &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f2_id;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f1_tid=@f1_tid_var;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f2_tid=@f2_tid_var;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELIMITER ;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;主键列信息获取&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. CONSTRAINT_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. TABLE_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; primary_table_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. COLUMN_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; primary_column_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema.table_constraints &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.key_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; kcu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.constraint_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ccu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	constraint_type = &lt;span class=&quot;string&quot;&gt;&#39;PRIMARY KEY&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2&gt;外键关系查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
    
    </summary>
    
      <category term="postgres" scheme="http://febsky.me/categories/postgres/"/>
    
    
      <category term="postgres" scheme="http://febsky.me/tags/postgres/"/>
    
  </entry>
  
</feed>

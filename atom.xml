<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的程序世界</title>
  <subtitle>今年我23岁了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://febsky.me/"/>
  <updated>2016-06-02T15:11:43.000Z</updated>
  <id>http://febsky.me/</id>
  
  <author>
    <name>Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac下的某些命令</title>
    <link href="http://febsky.me/2016/05/29/2016-05-29-Mac%E4%B8%8B%E7%9A%84%E6%9F%90%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <id>http://febsky.me/2016/05/29/2016-05-29-Mac下的某些命令/</id>
    <published>2016-05-29T07:51:03.000Z</published>
    <updated>2016-06-02T15:11:43.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;open .&lt;/code&gt; 单开finder为当前目录&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;open .&lt;/code&gt; 单开finder为当前目录&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://febsky.me/categories/Mac/"/>
    
      <category term="命令行" scheme="http://febsky.me/categories/Mac/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="Mac" scheme="http://febsky.me/tags/Mac/"/>
    
      <category term="命令行" scheme="http://febsky.me/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发中的小技巧</title>
    <link href="http://febsky.me/2016/05/28/2016-05-16-Android%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://febsky.me/2016/05/28/2016-05-16-Android中的小技巧/</id>
    <published>2016-05-28T08:39:22.000Z</published>
    <updated>2016-06-02T15:12:23.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ListView小技巧&quot;&gt;&lt;a href=&quot;#ListView小技巧&quot; class=&quot;headerlink&quot; title=&quot;ListView小技巧&quot;&gt;&lt;/a&gt;ListView小技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以设置空白站位View &lt;code&gt;listView.setEmptyView(view);&lt;/code&gt;非常有用&lt;/li&gt;
&lt;li&gt;缓慢滚动到某个位置&lt;code&gt;listView.smoothScrollToPosition();&lt;/code&gt;当然还有其他的滚动方法&lt;/li&gt;
&lt;li&gt;在使用&lt;code&gt;adapter.notifyDataSetChanged()&lt;/code&gt;方法的时候，必须保证传进adapter的数据List是同一个对象，否则无法实现效果（我就犯过这个错）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;滚动和位置&quot;&gt;&lt;a href=&quot;#滚动和位置&quot; class=&quot;headerlink&quot; title=&quot;滚动和位置&quot;&gt;&lt;/a&gt;滚动和位置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollTo&lt;/code&gt;方法其实滚动的是内容，比如说TextView中滚动的是文字。比如：&lt;code&gt;textView.scrollTo(0, 10);&lt;/code&gt;意思是让TextView中的内容，的（0，10）坐标去和，TextView左上角对齐。&lt;/li&gt;
&lt;li&gt;滑动多少算是滑动了&lt;code&gt;ViewConfiguration.get(this).getScaledTouchSlop();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所谓的滑动，是相对于参考系的运动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getX&lt;/code&gt;,&lt;code&gt;getY&lt;/code&gt; 获取的是相对于父view的相对位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getRawX&lt;/code&gt;,&lt;code&gt;getRawY&lt;/code&gt;获取的是点击位置距离屏幕左边和上边的距离&lt;/li&gt;
&lt;li&gt;Scroller类可以实现平滑的移动效果&lt;/li&gt;
&lt;li&gt;实现拖拽效果&lt;code&gt;DrawerLayout&lt;/code&gt;,&lt;code&gt;SlidingPaneLayout&lt;/code&gt;,&lt;code&gt;ViewDragHelper&lt;/code&gt;,尤其是最后一个。非常diao~  &lt;ul&gt;
&lt;li&gt;SlidingPaneLayout 效果是中间的内容块向右移动，以显示出左边的内容。只支持左侧显示  &lt;/li&gt;
&lt;li&gt;DrawerLayout 支持左滑右滑 效果是左右侧的内容盖住中间的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ListView小技巧&quot;&gt;&lt;a href=&quot;#ListView小技巧&quot; class=&quot;headerlink&quot; title=&quot;ListView小技巧&quot;&gt;&lt;/a&gt;ListView小技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以设置空白站位View &lt;code&gt;listView.setEmptyView(view);&lt;/code&gt;非常有用&lt;/li&gt;
&lt;li&gt;缓慢滚动到某个位置&lt;code&gt;listView.smoothScrollToPosition();&lt;/code&gt;当然还有其他的滚动方法&lt;/li&gt;
&lt;li&gt;在使用&lt;code&gt;adapter.notifyDataSetChanged()&lt;/code&gt;方法的时候，必须保证传进adapter的数据List是同一个对象，否则无法实现效果（我就犯过这个错）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android SQLite存储自定义对象</title>
    <link href="http://febsky.me/2016/05/23/2016-05-23-AndroidSQLite%E5%AD%98%E5%82%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/"/>
    <id>http://febsky.me/2016/05/23/2016-05-23-AndroidSQLite存储自定义对象/</id>
    <published>2016-05-23T08:39:22.000Z</published>
    <updated>2016-06-02T15:11:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-SQLite存储自定义对象&quot;&gt;&lt;a href=&quot;#Android-SQLite存储自定义对象&quot; class=&quot;headerlink&quot; title=&quot;Android SQLite存储自定义对象&quot;&gt;&lt;/a&gt;Android SQLite存储自定义对象&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1. 首先给出JavaBean&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Student implements Serializable &amp;#123;&amp;#10;&amp;#10;&amp;#9;/**&amp;#10;&amp;#9; * &amp;#10;&amp;#9; */&amp;#10;&amp;#9;private static final long serialVersionUID = 1L;&amp;#10;&amp;#9;String name;&amp;#10;&amp;#9;int age;&amp;#10;&amp;#10;&amp;#9;public Student(String name, int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super();&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public String getName() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setName(String name) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public int getAge() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setAge(int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2. 然后给出Dbhelper&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/***&amp;#10; * &amp;#21333;&amp;#20363;&amp;#27169;&amp;#24335;&amp;#23454;&amp;#29616;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#36830;&amp;#25509;&amp;#10; * @author bobo&amp;#10; *&amp;#10; */&amp;#10;public class Dbhelper extends SQLiteOpenHelper &amp;#123;&amp;#10;&amp;#10;&amp;#9;private static Dbhelper dbhelper = null;&amp;#10;&amp;#10;&amp;#9;public static Dbhelper getInstens(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;if (dbhelper == null) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;dbhelper = new Dbhelper(context);&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return dbhelper;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;private Dbhelper(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super(context, &amp;#34;datebase.db&amp;#34;, null, 1);&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated constructor stub&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onCreate(SQLiteDatabase db) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#9;&amp;#9;&amp;#10;&amp;#9;&amp;#9; //&amp;#36825;&amp;#24352;&amp;#34920;&amp;#37319;&amp;#29992;&amp;#20108;&amp;#36827;&amp;#21046;&amp;#25991;&amp;#20214;&amp;#23384;&amp;#20648;&amp;#23545;&amp;#35937;&amp;#27880;&amp;#24847;&amp;#31532;&amp;#20108;&amp;#20010;&amp;#23383;&amp;#27573;&amp;#25105;&amp;#20204;&amp;#23558;&amp;#23545;&amp;#35937;&amp;#23384;&amp;#21462;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#38754;&amp;#10;&amp;#9;&amp;#9;String sql_class_table=&amp;#34;create table if not exists classtable(_id integer primary key autoincrement,classtabledata text)&amp;#34;;&amp;#10;&amp;#9;&amp;#9;db.execSQL(sql_class_table);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onUpgrade(SQLiteDatabase db, int oldversion, int newversion) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;3. 最后是一个数据库操作类Dao 或者 叫service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后是一个数据库操作类，最主要的方法在这个类里面，通过二进制流把对象转换为对象流然后取出二进制存取进数据库，最后取的时候也一样。首先取出二进制对象，然后通过流还原对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&amp;#10; * &amp;#25968;&amp;#25454;&amp;#24211;&amp;#25805;&amp;#20316;&amp;#10; * @author bobo&amp;#10; *&amp;#10; */&amp;#10;public class StudentServcie &amp;#123;&amp;#10;&amp;#9;Context context;&amp;#10;&amp;#10;&amp;#9;public StudentServcie(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated constructor stub&amp;#10;&amp;#9;&amp;#9;this.context = context;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;/**&amp;#10;&amp;#9; * &amp;#20445;&amp;#23384;&amp;#10;&amp;#9; * @param student&amp;#10;&amp;#9; */&amp;#10;&amp;#9;public void saveObject(Student student) &amp;#123;&amp;#10;&amp;#9;&amp;#9;ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();&amp;#10;&amp;#9;&amp;#9;try &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;ObjectOutputStream objectOutputStream = new ObjectOutputStream(arrayOutputStream);&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.writeObject(student);&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.flush();&amp;#10;&amp;#9;&amp;#9;&amp;#9;byte data[] = arrayOutputStream.toByteArray();&amp;#10;&amp;#9;&amp;#9;&amp;#9;objectOutputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;arrayOutputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&amp;#10;&amp;#9;&amp;#9;&amp;#9;SQLiteDatabase database = dbhelper.getWritableDatabase();&amp;#10;&amp;#9;&amp;#9;&amp;#9;database.execSQL(&amp;#34;insert into classtable (classtabledata) values(?)&amp;#34;, new Object[] &amp;#123; data &amp;#125;);&amp;#10;&amp;#9;&amp;#9;&amp;#9;database.close();&amp;#10;&amp;#9;&amp;#9;&amp;#125; catch (Exception e) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;// TODO Auto-generated catch block&amp;#10;&amp;#9;&amp;#9;&amp;#9;e.printStackTrace();&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public Student getObject() &amp;#123;&amp;#10;&amp;#9;&amp;#9;Student student = null;&amp;#10;&amp;#9;&amp;#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&amp;#10;&amp;#9;&amp;#9;SQLiteDatabase database = dbhelper.getReadableDatabase();&amp;#10;&amp;#9;&amp;#9;Cursor cursor = database.rawQuery(&amp;#34;select * from classtable&amp;#34;, null);&amp;#10;&amp;#9;&amp;#9;if (cursor != null) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;while (cursor.moveToNext()) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;byte data[] = cursor.getBlob(cursor.getColumnIndex(&amp;#34;classtabledata&amp;#34;));&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;ByteArrayInputStream arrayInputStream = new ByteArrayInputStream(data);&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;try &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;ObjectInputStream inputStream = new ObjectInputStream(arrayInputStream);&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;student = (Student) inputStream.readObject();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;inputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;arrayInputStream.close();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;break;//&amp;#36825;&amp;#37324;&amp;#20026;&amp;#20102;&amp;#27979;&amp;#35797;&amp;#23601;&amp;#21462;&amp;#19968;&amp;#20010;&amp;#25968;&amp;#25454;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#125; catch (Exception e) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;// TODO Auto-generated catch block&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;e.printStackTrace();&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return student;&amp;#10;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4. 最后是测试代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MainActivity extends Activity &amp;#123;&amp;#10;&amp;#9;StudentServcie servcie;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super.onCreate(savedInstanceState);&amp;#10;&amp;#9;&amp;#9;setContentView(R.layout.activity_main);&amp;#10;&amp;#9;&amp;#9;servcie = new StudentServcie(this);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#9;public void onclick(View view) &amp;#123;&amp;#10;&amp;#9;&amp;#9;switch (view.getId()) &amp;#123;&amp;#10;&amp;#9;&amp;#9;case R.id.save:&amp;#10;&amp;#9;&amp;#9;&amp;#9;servcie.saveObject(new Student(&amp;#34;&amp;#26446;&amp;#38647;&amp;#34;, 20));&amp;#10;&amp;#9;&amp;#9;&amp;#9;Toast.makeText(this, &amp;#34;&amp;#23384;&amp;#21462;&amp;#23436;&amp;#25104;&amp;#34;, 0).show();&amp;#10;&amp;#9;&amp;#9;&amp;#9;break;&amp;#10;&amp;#9;&amp;#9;case R.id.load:&amp;#10;&amp;#9;&amp;#9;&amp;#9;Student student =&amp;#9;servcie.getObject();&amp;#10;&amp;#9;&amp;#9;&amp;#9;if(student!=null)&amp;#10;&amp;#9;&amp;#9;&amp;#9;Toast.makeText(this, student.getName()+student.getAge(), 0).show();&amp;#10;&amp;#9;&amp;#9;&amp;#9;break;&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样我们也可以对list，或者map对象进行保存，方法跟上面的一样，但是map或者list里面的对象必须序列化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【参考文献】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是转载 &lt;a href=&quot;http://blog.csdn.net/codebob/article/details/37091003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址点这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-SQLite存储自定义对象&quot;&gt;&lt;a href=&quot;#Android-SQLite存储自定义对象&quot; class=&quot;headerlink&quot; title=&quot;Android SQLite存储自定义对象&quot;&gt;&lt;/a&gt;Android SQLite存储自定义对象&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1. 首先给出JavaBean&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Student implements Serializable &amp;#123;&amp;#10;&amp;#10;&amp;#9;/**&amp;#10;&amp;#9; * &amp;#10;&amp;#9; */&amp;#10;&amp;#9;private static final long serialVersionUID = 1L;&amp;#10;&amp;#9;String name;&amp;#10;&amp;#9;int age;&amp;#10;&amp;#10;&amp;#9;public Student(String name, int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super();&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public String getName() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setName(String name) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.name = name;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public int getAge() &amp;#123;&amp;#10;&amp;#9;&amp;#9;return age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void setAge(int age) &amp;#123;&amp;#10;&amp;#9;&amp;#9;this.age = age;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2. 然后给出Dbhelper&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/***&amp;#10; * &amp;#21333;&amp;#20363;&amp;#27169;&amp;#24335;&amp;#23454;&amp;#29616;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#36830;&amp;#25509;&amp;#10; * @author bobo&amp;#10; *&amp;#10; */&amp;#10;public class Dbhelper extends SQLiteOpenHelper &amp;#123;&amp;#10;&amp;#10;&amp;#9;private static Dbhelper dbhelper = null;&amp;#10;&amp;#10;&amp;#9;public static Dbhelper getInstens(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;if (dbhelper == null) &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;dbhelper = new Dbhelper(context);&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return dbhelper;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;private Dbhelper(Context context) &amp;#123;&amp;#10;&amp;#9;&amp;#9;super(context, &amp;#34;datebase.db&amp;#34;, null, 1);&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated constructor stub&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onCreate(SQLiteDatabase db) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#9;&amp;#9;&amp;#10;&amp;#9;&amp;#9; //&amp;#36825;&amp;#24352;&amp;#34920;&amp;#37319;&amp;#29992;&amp;#20108;&amp;#36827;&amp;#21046;&amp;#25991;&amp;#20214;&amp;#23384;&amp;#20648;&amp;#23545;&amp;#35937;&amp;#27880;&amp;#24847;&amp;#31532;&amp;#20108;&amp;#20010;&amp;#23383;&amp;#27573;&amp;#25105;&amp;#20204;&amp;#23558;&amp;#23545;&amp;#35937;&amp;#23384;&amp;#21462;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#38754;&amp;#10;&amp;#9;&amp;#9;String sql_class_table=&amp;#34;create table if not exists classtable(_id integer primary key autoincrement,classtabledata text)&amp;#34;;&amp;#10;&amp;#9;&amp;#9;db.execSQL(sql_class_table);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;@Override&amp;#10;&amp;#9;public void onUpgrade(SQLiteDatabase db, int oldversion, int newversion) &amp;#123;&amp;#10;&amp;#9;&amp;#9;// TODO Auto-generated method stub&amp;#10;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我认为不错的几个Hexo主题</title>
    <link href="http://febsky.me/2016/05/15/2016-05-15-%E6%88%91%E8%AE%A4%E4%B8%BA%E4%B8%8D%E9%94%99%E7%9A%84%E5%87%A0%E4%B8%AAHexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://febsky.me/2016/05/15/2016-05-15-我认为不错的几个Hexo主题/</id>
    <published>2016-05-15T04:37:28.000Z</published>
    <updated>2016-06-02T15:12:38.000Z</updated>
    
    <content type="html">&lt;p&gt;我认为几个不错的主题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kaijun/hexo-theme-huxblog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-huxblog&lt;/a&gt;   &lt;a href=&quot;http://huangxuan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址 Hux Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-even&lt;/a&gt;    &lt;a href=&quot;http://www.ahonn.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-icarus&lt;/a&gt;   &lt;a href=&quot;http://blog.zhangruipeng.me/hexo-theme-icarus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alex-fun/hexo-theme-jane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-jane&lt;/a&gt;   &lt;a href=&quot;http://hejx.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape-plus&lt;/a&gt; &lt;a href=&quot;http://honglu.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;  &lt;a href=&quot;http://arvinxiang.com/landscape-plus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;And&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;我认为几个不错的主题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kaijun/hexo-theme-huxblog/&quot;&gt;hexo-theme-huxblog&lt;/a&gt;   &lt;a href=&quot;http://huangxuan.me/&quot;&gt;演示地址 Hux Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot;&gt;hexo-theme-even&lt;/a&gt;    &lt;a href=&quot;http://www.ahonn.me/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;hexo-theme-icarus&lt;/a&gt;   &lt;a href=&quot;http://blog.zhangruipeng.me/hexo-theme-icarus/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alex-fun/hexo-theme-jane&quot;&gt;hexo-theme-jane&lt;/a&gt;   &lt;a href=&quot;http://hejx.me/&quot;&gt;演示地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot;&gt;landscape-plus&lt;/a&gt; &lt;a href=&quot;http://honglu.me/&quot;&gt;演示地址&lt;/a&gt;  &lt;a href=&quot;http://arvinxiang.com/landscape-plus/&quot;&gt;And&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://febsky.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://febsky.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android SQLite操作</title>
    <link href="http://febsky.me/2016/05/10/2016-05-10-Android%E6%93%8D%E4%BD%9CSQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://febsky.me/2016/05/10/2016-05-10-Android操作SQLite数据库的方法/</id>
    <published>2016-05-10T04:14:42.000Z</published>
    <updated>2016-05-13T15:57:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、-SQLiteOpenHelper辅助类&quot;&gt;&lt;a href=&quot;#一、-SQLiteOpenHelper辅助类&quot; class=&quot;headerlink&quot; title=&quot;一、 SQLiteOpenHelper辅助类&quot;&gt;&lt;/a&gt;一、 SQLiteOpenHelper辅助类&lt;/h1&gt;&lt;p&gt;SQLiteOpenHelper类是一个辅助类，用于创建或打开数据库。&lt;br&gt;该类的使用方法一般是自定义一个子类，继承自SQLiteOpenHelper，并覆写其中最关键的两个方法：onCreate(SQLiteDatabase db)和onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)。当新建一个数据库时会调用前者，一般在里面做一些创建表或视图的操作。数据库版本升级时则会调用后者。&lt;/p&gt;
&lt;p&gt;定义好子类后（假如叫SqlHelper），只要调用SqlHelper对象的getReadableDatabase()方法或getWritableDatabase()方法即可返回一个SQLiteDatabase对象。如果是第一次调用，则会创建数据库。随后可使用SQLiteDatabase对象的方法进行数据操作，如：execSQL(), insert(), update(), query(), rawQuery(), delete()等。&lt;/p&gt;
&lt;p&gt;PS：通过该方法创建的数据库存放的目录是固定的，其路径为/data/data/packageName/databases/。&lt;/p&gt;
&lt;h1 id=&quot;二、Context类的openOrCreateDatabase-方法&quot;&gt;&lt;a href=&quot;#二、Context类的openOrCreateDatabase-方法&quot; class=&quot;headerlink&quot; title=&quot;二、Context类的openOrCreateDatabase()方法&quot;&gt;&lt;/a&gt;二、Context类的openOrCreateDatabase()方法&lt;/h1&gt;&lt;p&gt;openOrCreateDatabase(String dbName, int mode, CursorFactory factory);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dbName：数据库名称。&lt;/li&gt;
&lt;li&gt;mode：数据库操作模式。默认值为MODE_PRIVATE（即0）。可选值：MODE_WORLD_READABLE, MODE_WORLD_WRITABLE, MODE_ENABLE_WRITE_AHEAD_LOGGING&lt;/li&gt;
&lt;li&gt;factory：附加的一个工厂类，当SQLiteDatabase实例的query函数被调用时，会使用该工厂类返回一个Cursor。可为null。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static final String DATABASE_NAME = &amp;#8220;myDatabase.db&amp;#8221;;&amp;#10;private static final String DATABASE_TABLE = &amp;#8220;mainTable&amp;#8221;;&amp;#10;private static final String DATABASE_CREATE =&amp;#10;&amp;#8220;create table &amp;#8220; + DATABASE_TABLE +&amp;#10;&amp;#8220; ( _id integer primary key autoincrement,&amp;#8221; +&amp;#10;&amp;#8220;column_one text not null);&amp;#8221;;&amp;#10; &amp;#10;SQLiteDatabase myDatabase;&amp;#10; &amp;#10;private void createDatabase() &amp;#123;&amp;#10;myDatabase = openOrCreateDatabase(DATABASE_NAME, Context.MODE_PRIVATE, null);&amp;#10;myDatabase.execSQL(DATABASE_CREATE);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：该方法得到的数据库文件，其存储路径与上一方法相同。&lt;/p&gt;
&lt;h1 id=&quot;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases&quot;&gt;&lt;a href=&quot;#三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases&quot; class=&quot;headerlink&quot; title=&quot;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()&quot;&gt;&lt;/a&gt;三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()&lt;/h1&gt;&lt;p&gt;SQLiteDatabase类有几个静态方法可直接打开或创建数据库。&lt;br&gt;//等同于openDatabase(path, factory, SQLiteDatabase.CREATE_IF_NECESSARY)  &lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(String path, CursorFactory factory)&lt;br&gt;//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY)&lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(File file, CursorFactory factory)&lt;br&gt;//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY, errorHandler)&lt;/p&gt;
&lt;p&gt;openOrCreateDatabase(String path, CursorFactory factory, DatabaseErrorHandler errorHandler)&lt;/p&gt;
&lt;p&gt;PS：该方法打开或创建的数据库文件可与上述两个方法的路径不同。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    private static final String DATABASE_NAME = &amp;#34;xiangjie.db&amp;#34;;&amp;#10;    private static final String DATABASE_TABLE = &amp;#34;test&amp;#34;;&amp;#10;    private static final String DATABASE_CREATE =&amp;#10;    &amp;#34;create table &amp;#34; + DATABASE_TABLE +&amp;#10;            &amp;#34; ( _id integer primary key autoincrement,&amp;#34; +&amp;#10;            &amp;#34;column_one text not null)&amp;#34;;&amp;#10;    @Override&amp;#10;    protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;        super.onCreate(savedInstanceState);&amp;#10;        setContentView(R.layout.activity_green_dao);&amp;#10;        &amp;#10;       SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(&amp;#34;/sdcard/&amp;#34;+DATABASE_NAME, null);&amp;#10;        &amp;#10;        //db.execSQL(&amp;#34;create table test ( _id integer primary key autoincrement,column_one text not null)&amp;#34;);&amp;#10;//        db.execSQL(&amp;#34;insert into test (column_one) values(?)&amp;#34;,new Object[]&amp;#123;&amp;#34;1111&amp;#34;&amp;#125;);&amp;#10;&amp;#10;        Cursor cursor = db.rawQuery(&amp;#34;select * from test;&amp;#34;,null);&amp;#10;        while (cursor.moveToNext()) &amp;#123;&amp;#10;            String id = cursor.getString(0);//&amp;#33719;&amp;#21462;&amp;#31532;&amp;#19968;&amp;#21015;&amp;#30340;&amp;#20540;&amp;#10;            Log.d(&amp;#34;Q_M:&amp;#34;,id);&amp;#10;        &amp;#125;&amp;#10;        cursor.close();&amp;#10;        db.close();&amp;#10;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;最后记住，不管用何种方式打开了数据库，获得的SQLite对象不再使用时，都要调用close()来关闭打开的数据库，否则抛出IllegalStateException异常。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-SQLiteOpenHelper辅助类&quot;&gt;&lt;a href=&quot;#一、-SQLiteOpenHelper辅助类&quot; class=&quot;headerlink&quot; title=&quot;一、 SQLiteOpenHelper辅助类&quot;&gt;&lt;/a&gt;一、 SQLiteOpenHelper辅
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="数据库" scheme="http://febsky.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Android 中实现倒计时</title>
    <link href="http://febsky.me/2016/05/10/2016-05-10-Android%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://febsky.me/2016/05/10/2016-05-10-Android中实现倒计时的方式/</id>
    <published>2016-05-10T04:14:42.000Z</published>
    <updated>2016-06-02T15:13:55.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-中实现倒计时控件的方法有哪些&quot;&gt;&lt;a href=&quot;#Android-中实现倒计时控件的方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;Android 中实现倒计时控件的方法有哪些&quot;&gt;&lt;/a&gt;Android 中实现倒计时控件的方法有哪些&lt;/h1&gt;&lt;p&gt;今天在工作中用到了倒计时功能，也就是在一个TextView上显示倒计时。突然想到当时面试的时候有家公司的面试官问我在Android中实现倒计时功能我会用哪些方法。哈哈当时竟然不知道Android sdk本身就有实现了。丢人~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第一种CountDownTimer&quot;&gt;&lt;a href=&quot;#第一种CountDownTimer&quot; class=&quot;headerlink&quot; title=&quot;第一种CountDownTimer&quot;&gt;&lt;/a&gt;第一种CountDownTimer&lt;/h2&gt;&lt;p&gt;位于&lt;code&gt;android.os.CountDownTimer&lt;/code&gt;这个类很好用。可以直接查看官方文档，文档中就有实例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountDownTimer(&lt;span class=&quot;number&quot;&gt;30000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; millisUntilFinished)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textView.setText(&lt;span class=&quot;string&quot;&gt;&quot;seconds remaining: &quot;&lt;/span&gt; + millisUntilFinished / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textView.setText(&lt;span class=&quot;string&quot;&gt;&quot;done!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二种-Timer与TimerTask-runOnUiThread-runnable-方法&quot;&gt;&lt;a href=&quot;#第二种-Timer与TimerTask-runOnUiThread-runnable-方法&quot; class=&quot;headerlink&quot; title=&quot;第二种 Timer与TimerTask + runOnUiThread(runnable)方法&quot;&gt;&lt;/a&gt;第二种 Timer与TimerTask + runOnUiThread(runnable)方法&lt;/h2&gt;&lt;h2 id=&quot;第三种Handler与Message（不用TimerTask）&quot;&gt;&lt;a href=&quot;#第三种Handler与Message（不用TimerTask）&quot; class=&quot;headerlink&quot; title=&quot;第三种Handler与Message（不用TimerTask）&quot;&gt;&lt;/a&gt;第三种Handler与Message（不用TimerTask）&lt;/h2&gt;&lt;h2 id=&quot;第四种Handler与Runnable（最简单型）&quot;&gt;&lt;a href=&quot;#第四种Handler与Runnable（最简单型）&quot; class=&quot;headerlink&quot; title=&quot;第四种Handler与Runnable（最简单型）&quot;&gt;&lt;/a&gt;第四种Handler与Runnable（最简单型）&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; recLen = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TextView txtView;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.timertask);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        txtView = (TextView)findViewById(R.id.txttime);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handler.postDelayed(runnable, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Handler handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Runnable runnable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            recLen++;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            txtView.setText(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + recLen);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            handler.postDelayed(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-中实现倒计时控件的方法有哪些&quot;&gt;&lt;a href=&quot;#Android-中实现倒计时控件的方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;Android 中实现倒计时控件的方法有哪些&quot;&gt;&lt;/a&gt;Android 中实现倒计时控件的方法有哪些&lt;/h1&gt;&lt;p&gt;今天在工作中用到了倒计时功能，也就是在一个TextView上显示倒计时。突然想到当时面试的时候有家公司的面试官问我在Android中实现倒计时功能我会用哪些方法。哈哈当时竟然不知道Android sdk本身就有实现了。丢人~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>nodejs的学习</title>
    <link href="http://febsky.me/2016/05/07/2016-05-07-nodejs%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://febsky.me/2016/05/07/2016-05-07-nodejs的学习/</id>
    <published>2016-05-07T12:18:31.000Z</published>
    <updated>2016-05-29T14:27:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;检查Python 是否安装&lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查ruby是否安装&lt;code&gt;ruby -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;首先安装&lt;code&gt;homebrew&lt;/code&gt;,然后命令行&lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查node是否安装成功 &lt;code&gt;node -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后命令行&lt;code&gt;node&lt;/code&gt;可以打开nodejs的交互器，和Python类似，很好玩&lt;/li&gt;
&lt;li&gt;打开控制台输入 which node ，得到的输出结果就是node安装路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;什么不说直接上代码，Mac命令行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim server.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入下面代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req,res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res.end(&lt;span class=&quot;string&quot;&gt;&#39;Hello World\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Server running at http://127.0.0.1:1337/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;$ node server.js&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;模块与包管理工具&quot;&gt;&lt;a href=&quot;#模块与包管理工具&quot; class=&quot;headerlink&quot; title=&quot;模块与包管理工具&quot;&gt;&lt;/a&gt;模块与包管理工具&lt;/h1&gt;&lt;p&gt;Commonjs 规范,理解模块含义理解模块&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;requite&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模块大致分为三种：核心模块、文件模块、第三方模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块创建流程：&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建模块&lt;code&gt;teacher.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导出模块 &lt;code&gt;export.add = function{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加载模块 `var teacher = requite(‘./teacher.js’)&lt;/li&gt;
&lt;li&gt;使用模块 &lt;code&gt;teacher.add(&amp;#39;Scott&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基本API&quot;&gt;&lt;a href=&quot;#基本API&quot; class=&quot;headerlink&quot; title=&quot;基本API&quot;&gt;&lt;/a&gt;基本API&lt;/h1&gt;&lt;p&gt;查看一个model的所拥有的函数&lt;code&gt;$ node&lt;/code&gt;开启nodejs交互器&lt;br&gt;然后输入模块名，比如想看url模块,直接在交互器输入&lt;code&gt;url&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#62; url&amp;#10;&amp;#123; parse: [Function: urlParse],&amp;#10;  resolve: [Function: urlResolve],&amp;#10;  resolveObject: [Function: urlResolveObject],&amp;#10;  format: [Function: urlFormat],&amp;#10;  Url: [Function: Url] &amp;#125;&amp;#10;&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;了解http-模块&quot;&gt;&lt;a href=&quot;#了解http-模块&quot; class=&quot;headerlink&quot; title=&quot;了解http 模块&quot;&gt;&lt;/a&gt;了解http 模块&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;什么是回调？&lt;/li&gt;
&lt;li&gt;什么是同步/异步？&lt;/li&gt;
&lt;li&gt;什么是I/O？&lt;/li&gt;
&lt;li&gt;什么的单线程/多线程？&lt;/li&gt;
&lt;li&gt;什么是阻塞/非阻塞？&lt;/li&gt;
&lt;li&gt;什么是事件？&lt;/li&gt;
&lt;li&gt;什么是事件驱动？&lt;/li&gt;
&lt;li&gt;什么是基于事件驱动的回调？&lt;/li&gt;
&lt;li&gt;什么是事件循环？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理解nodejs中的 this （上下文）,一般指向当前函数的拥有者。&lt;br&gt;但是&lt;code&gt;call&lt;/code&gt;方法可以改变this上下文&lt;/p&gt;
&lt;h2 id=&quot;Node的突出特点&quot;&gt;&lt;a href=&quot;#Node的突出特点&quot; class=&quot;headerlink&quot; title=&quot;Node的突出特点&quot;&gt;&lt;/a&gt;Node的突出特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WEB服务器&lt;br&gt;NodeJS与一般的后台编译性语言有什么不同?        &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NodeJS本身包含一个http服务器，不像asp.net程序需要一个IIS，或者java的程序需要一个apche&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeJS是异步IO，事件驱动的;一般的程序调用都是执行一个命令之后，线程阻塞，一直等到命令成功之后，才会去执行下面的事情，但是NodeJS不一样，所有的IO，网络通信，磁盘操作都是由事件来控制的，Nodejs进程在同一时刻只会处理一个事件，完成后立即进入事件轮询并检查处理后面的事件。如图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;【参考文献】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个学习网站&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-express-framework.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这儿&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.nodeclass.com/articles/99682&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orm2参考使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sequelizejs.com/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sequelize github上start最多的orm&lt;/a&gt; &lt;a href=&quot;http://my.oschina.net/zj0303/blog/305384&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个使用教程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;检查Python 是否安装&lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查r
    
    </summary>
    
      <category term="nodejs" scheme="http://febsky.me/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://febsky.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Android FragmentPagerAdapter和FragmentStatePagerAdapter</title>
    <link href="http://febsky.me/2016/05/06/2016-05-12-FragmentStatePagerAdapter%E5%92%8CFragmentPagerAdapter/"/>
    <id>http://febsky.me/2016/05/06/2016-05-12-FragmentStatePagerAdapter和FragmentPagerAdapter/</id>
    <published>2016-05-06T04:14:42.000Z</published>
    <updated>2016-05-13T15:56:42.000Z</updated>
    
    <content type="html">&lt;p&gt;在公司查看别人的代码的时候发现个东西，在展示试题的是时候，他用的是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;而如果是我的话，我就直接用&lt;code&gt;viewpager&lt;/code&gt;+&lt;code&gt;PagerAdapter&lt;/code&gt;,但是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;是个什么鬼，我听过&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;可是没用过&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;啊，只怪自己学艺不精，既然人家用了就有用的道理。&lt;/p&gt;
&lt;h1 id=&quot;文档说明&quot;&gt;&lt;a href=&quot;#文档说明&quot; class=&quot;headerlink&quot; title=&quot;文档说明&quot;&gt;&lt;/a&gt;文档说明&lt;/h1&gt;&lt;p&gt;跟踪源码来看一下FragmentPagerAdapter和FragmentStatePagerAdapter的API说明。我们先来看看FragmentPagerAdapter的API（直接翻译吧）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FragmentPagerAdapter继承自PagerAdapter ，主要用来展示多个Fragment页面，并且每一个Fragment都会被保存在fragment manager中。 FragmentPagerAdapter最适用于那种少量且相对静态的页面，例如几个tab页。每一个用户访问过的fragment都会被保存在内存中，尽管他的视图层级可能会在不可见时被销毁。这可能导致大量的内存因为fragment实例能够拥有任意数量的状态。对于较多的页面集合，更推荐使用FragmentStatePagerAdapter。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentPagerAdapter的派生类只需要实现getItem(int)和getCount()即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FragmentStatePagerAdapter继承自PagerAdapter，主要使用Fragment来管理每个页面。这个类同样用来保存和恢复fragment页面的状态。 FragmentStatePagerAdapter更多用于大量页面，例如视图列表。当某个页面对用户不再可见时，他们的整个fragment就会被销毁，仅保留fragment状态。相比于FragmentPagerAdapter，这样做的好处是在访问各个页面时能节约大量的内存开销，但代价是在页面切换时会增加非常多的开销。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentStatePagerAdapter的派生类只需要实现getItem(int)和getCount()即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#直接上结论，然后是分析代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FragmentStatePagerAdapter&lt;br&gt;顾名思义，我们的这个FragmentStatePagerAdapter，在我们切换不同的Fragment的时候，我们会把前面的Fragment销毁，所谓的销毁就是走完Fragment的生命周期，调用&lt;code&gt;onDestroyView&lt;/code&gt;,&lt;code&gt;onDestroy&lt;/code&gt;,直到&lt;code&gt;onDetach&lt;/code&gt;为止,而我们系统在销毁前，会把我们的我们Fragment的Bundle在我们的onSaveInstanceState(Bundle)保存下来。等用户切换回来的时候，我们的Fragment就会根据我们的instance state恢复出来。并且当切换回来的时候会调用这个Fragment的整个生命周期从&lt;code&gt;onAttach&lt;/code&gt;方法开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FragmentPagerAdapter&lt;br&gt;使用这种Adapter，我们的Fragment在切换的时候，只会把我们的Fragment的view销毁，也就是说一个Fragment的生命周期只会调用到&lt;code&gt;onDestroyView&lt;/code&gt;,变不会再往下执行，下一次再滑动viewpager回到上一个&lt;code&gt;Fragment&lt;/code&gt;的时候,会从这个Fragment的&lt;code&gt;onCreateView&lt;/code&gt;开始执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;代码验证&quot;&gt;&lt;a href=&quot;#代码验证&quot; class=&quot;headerlink&quot; title=&quot;代码验证&quot;&gt;&lt;/a&gt;代码验证&lt;/h1&gt;&lt;h2 id=&quot;Fragment代码&quot;&gt;&lt;a href=&quot;#Fragment代码&quot; class=&quot;headerlink&quot; title=&quot;Fragment代码&quot;&gt;&lt;/a&gt;Fragment代码&lt;/h2&gt;&lt;p&gt;为了代码简洁Fragment的布局文件就不再给出，就是一个&lt;code&gt;RelativeLayout&lt;/code&gt;包含一个&lt;code&gt;TextView&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.fesky.test.fragment;&amp;#10;&amp;#10;import android.content.Context;&amp;#10;import android.os.Bundle;&amp;#10;import android.support.annotation.Nullable;&amp;#10;import android.support.v4.app.Fragment;&amp;#10;import android.util.Log;&amp;#10;import android.view.LayoutInflater;&amp;#10;import android.view.View;&amp;#10;import android.view.ViewGroup;&amp;#10;import android.widget.TextView;&amp;#10;&amp;#10;import me.fesky.test.R;&amp;#10;&amp;#10;/**&amp;#10; * Created by Administrator on 2016/5/12.&amp;#10; */&amp;#10;public class MyFragment extends Fragment &amp;#123;&amp;#10;&amp;#10;    int index;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onAttach(Context context) &amp;#123;&amp;#10;        super.onAttach(context);&amp;#10;        Bundle bundle = getArguments();&amp;#10;        index = bundle.getInt(&amp;#34;index&amp;#34;);&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onAttach&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Nullable&amp;#10;    @Override&amp;#10;    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &amp;#123;&amp;#10;        View view = inflater.inflate(R.layout.fragment, container, false);&amp;#10;        TextView textView = (TextView) view.findViewById(R.id.text_view);&amp;#10;&amp;#10;        textView.setText(textView.getText()+&amp;#34;&amp;#34;+index);&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onCreateView&amp;#34; + index);&amp;#10;        return view;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDestroyView() &amp;#123;&amp;#10;        super.onDestroyView();&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDestroyView&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDestroy() &amp;#123;&amp;#10;        super.onDestroy();&amp;#10;&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDestroy&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    public void onDetach() &amp;#123;&amp;#10;        super.onDetach();&amp;#10;        Log.i(&amp;#34;Q_M:&amp;#34;, &amp;#34;onDetach&amp;#34; + index);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Activity以及adapter代码&quot;&gt;&lt;a href=&quot;#Activity以及adapter代码&quot; class=&quot;headerlink&quot; title=&quot;Activity以及adapter代码&quot;&gt;&lt;/a&gt;Activity以及adapter代码&lt;/h2&gt;&lt;p&gt;为了代码简洁&lt;code&gt;Activity&lt;/code&gt;的布局文件就不再给出，就是一个&lt;code&gt;RelativeLayout&lt;/code&gt;包含一个&lt;code&gt;android.support.v4.view.ViewPager&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.fesky.test;&amp;#10;&amp;#10;import android.support.v4.app.Fragment;&amp;#10;import android.support.v4.app.FragmentManager;&amp;#10;import android.support.v4.app.FragmentPagerAdapter;&amp;#10;import android.support.v4.app.FragmentStatePagerAdapter;&amp;#10;import android.support.v4.view.PagerAdapter;&amp;#10;import android.support.v4.view.ViewPager;&amp;#10;import android.support.v7.app.AppCompatActivity;&amp;#10;import android.os.Bundle;&amp;#10;&amp;#10;import java.util.ArrayList;&amp;#10;import java.util.List;&amp;#10;&amp;#10;import me.fesky.test.fragment.MyFragment;&amp;#10;&amp;#10;public class TestFragmentActivity extends AppCompatActivity &amp;#123;&amp;#10;&amp;#10;    ViewPager viewPager;&amp;#10;&amp;#10;    List&amp;#60;Fragment&amp;#62; fragments;&amp;#10;&amp;#10;    @Override&amp;#10;    protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;        super.onCreate(savedInstanceState);&amp;#10;        setContentView(R.layout.activity_test_fragment);&amp;#10;&amp;#10;        fragments = new ArrayList&amp;#60;&amp;#62;();&amp;#10;&amp;#10;        /**&amp;#10;         * &amp;#21019;&amp;#24314;&amp;#22235;&amp;#20010;Fragment&amp;#10;         */&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;        fragments.add(new MyFragment());&amp;#10;&amp;#10;        /**&amp;#10;         *&amp;#29992;&amp;#36825;&amp;#31181;&amp;#26041;&amp;#24335;&amp;#21521;Fragment&amp;#20256;&amp;#36882;&amp;#21442;&amp;#25968;&amp;#10;         */&amp;#10;        Bundle bundle1 = new Bundle();&amp;#10;        bundle1.putInt(&amp;#34;index&amp;#34;,1);&amp;#10;        fragments.get(0).setArguments(bundle1);&amp;#10;&amp;#10;        Bundle bundle2 = new Bundle();&amp;#10;        bundle2.putInt(&amp;#34;index&amp;#34;,2);&amp;#10;        fragments.get(1).setArguments(bundle2);&amp;#10;&amp;#10;        Bundle bundle3 = new Bundle();&amp;#10;        bundle3.putInt(&amp;#34;index&amp;#34;,3);&amp;#10;        fragments.get(2).setArguments(bundle3);&amp;#10;&amp;#10;        Bundle bundle4 = new Bundle();&amp;#10;        bundle4.putInt(&amp;#34;index&amp;#34;,4);&amp;#10;        fragments.get(3).setArguments(bundle4);&amp;#10;&amp;#10;        viewPager = (ViewPager) findViewById(R.id.view_pager);&amp;#10;        PagerAdapter pagerAdapter = new MyFragmentPagerAdapter(getSupportFragmentManager());&amp;#10;&amp;#10;        viewPager.setAdapter(pagerAdapter);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;&amp;#10;    /**&amp;#10;     * &amp;#23581;&amp;#35797;&amp;#20999;&amp;#25442;&amp;#32487;&amp;#25215;&amp;#30340;FragmentPagerAdapter&amp;#21644;FragmentStatePagerAdapter&amp;#10;     * &amp;#35266;&amp;#23519;&amp;#25171;&amp;#21360;&amp;#32467;&amp;#26524;&amp;#26377;&amp;#20160;&amp;#20040;&amp;#19981;&amp;#21516;&amp;#10;     */&amp;#10;    public  class MyFragmentPagerAdapter extends FragmentPagerAdapter &amp;#123;&amp;#10;&amp;#10;        public MyFragmentPagerAdapter(FragmentManager fm) &amp;#123;&amp;#10;            super(fm);&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        @Override&amp;#10;        public Fragment getItem(int position) &amp;#123;&amp;#10;            return fragments.get(position);&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        @Override&amp;#10;        public int getCount() &amp;#123;&amp;#10;            return fragments.size();&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;font colot=&quot;red&quot;&gt; 注意上面所说的销毁都是建立在ViewPager缓存逻辑之上的并不是划过去就会销毁的。不了解的可以看下ViewPager的销毁机制&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;运行上面的测试代码，可以看到，当adapter是&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;打印结果如下：&lt;/p&gt;
&lt;p&gt;ViewPager向后滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:24:53.370 11366-11366/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:25:36.260 11366-11366/me.fesky.test I/Q_M:: onAttach3&lt;br&gt;05-12 16:25:36.270 11366-11366/me.fesky.test I/Q_M:: onCreateView3&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onDestroyView1&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onAttach4&lt;br&gt;05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onCreateView4&lt;br&gt;05-12 16:25:44.760 11366-11366/me.fesky.test I/Q_M:: onDestroyView2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ViewPager向前滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:26:17.220 11366-11366/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onDestroyView4&lt;br&gt;05-12 16:26:27.450 11366-11366/me.fesky.test I/Q_M:: onDestroyView3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当adapter是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;打印结果如下：&lt;/p&gt;
&lt;p&gt;ViewPager向后(也就是向下一页滑动)滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:53:36.940 3043-3043/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onAttach3&lt;br&gt;05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onCreateView3&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroyView1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroy1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDetach1&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onAttach4&lt;br&gt;05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onCreateView4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ViewPager向前滑动结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;05-12 16:55:31.350 3043-3043/me.fesky.test I/Q_M:: onAttach2&lt;br&gt;05-12 16:55:31.360 3043-3043/me.fesky.test I/Q_M:: onCreateView2&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroyView4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroy4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDetach4&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onAttach1&lt;br&gt;05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onCreateView1&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroyView3&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroy3&lt;br&gt;05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDetach3&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在公司查看别人的代码的时候发现个东西，在展示试题的是时候，他用的是&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;而如果是我的话，我就直接用&lt;code&gt;viewpager&lt;/code&gt;+&lt;code&gt;PagerAdapter&lt;/code&gt;,但是&lt;c
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 打包过程</title>
    <link href="http://febsky.me/2016/05/06/2016-05-06-Android%E6%89%93%E5%8C%85%E8%BF%87%E7%A8%8B/"/>
    <id>http://febsky.me/2016/05/06/2016-05-06-Android打包过程/</id>
    <published>2016-05-06T04:14:42.000Z</published>
    <updated>2016-05-13T15:55:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-打包过程&quot;&gt;&lt;a href=&quot;#Android-打包过程&quot; class=&quot;headerlink&quot; title=&quot;Android 打包过程&quot;&gt;&lt;/a&gt;Android 打包过程&lt;/h1&gt;&lt;p&gt;第一步：打包资源文件，生成R.java文件&lt;br&gt;【输入】Resource文件（就是工程中res中的文件）、Assets文件（相当于另外一种资源，这种资源Android系统并不像对res中的文件那样优化它）、AndroidManifest.xml文件（包名就是从这里读取的，因为生成R.java文件需要包名）、Android基础类库（Android.jar文件）&lt;br&gt;【输出】打包好的资源（一般在Android工程的bin目录可以看到一个叫resources.ap_的文件就是它了）、R.java文件（在gen目录中，大家应该很熟悉了）&lt;br&gt;【工具】aapt工具，它的路径在${ANDROID_SDK_HOME}/platform-tools/aapt（如果你使用的是Windows系统，按惯例路径应该这样写：%ANDROID_SDK_HOME%\platform-tools\aapt.exe，下同）。&lt;/p&gt;
&lt;p&gt;第二步：处理AIDL文件，生成对应的.java文件（当然，有很多工程没有用到AIDL，那这个过程就可以省了）&lt;br&gt;【输入】源码文件、aidl文件、framework.aidl文件&lt;br&gt;【输出】对应的.java文件&lt;br&gt;【工具】aidl工具&lt;/p&gt;
&lt;p&gt;第三步：编译Java文件，生成对应的.class文件&lt;br&gt;【输入】源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件）&lt;br&gt;【输出】.class文件&lt;br&gt;【工具】javac工具&lt;/p&gt;
&lt;p&gt;第四步：把.class文件转化成Davik VM支持的.dex文件&lt;br&gt;【输入】 .class文件（包括Aidl生成.class文件，R生成的.class文件，源文件生成的.class文件），库文件（.jar文件）&lt;br&gt;【输出】.dex文件&lt;br&gt;【工具】javac工具&lt;/p&gt;
&lt;p&gt;第五步：打包生成未签名的.apk文件&lt;br&gt;【输入】打包后的资源文件、打包后类文件（.dex文件）、libs文件（包括.so文件，当然很多工程都没有这样的文件，如果你不使用C/C++开发的话）&lt;br&gt;【输出】未签名的.apk文件&lt;br&gt;【工具】apkbuilder工具&lt;/p&gt;
&lt;p&gt;第六步：对未签名.apk文件进行签名&lt;br&gt;【输入】未签名的.apk文件&lt;br&gt;【输出】签名的.apk文件&lt;br&gt;【工具】jarsigner&lt;/p&gt;
&lt;p&gt;第七步：对签名后的.apk文件进行对齐处理（不进行对齐处理是不能发布到Google Market的）&lt;br&gt;【输入】签名后的.apk文件&lt;br&gt;【输出】对齐后的.apk文件&lt;br&gt;【工具】zipalign工具&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-打包过程&quot;&gt;&lt;a href=&quot;#Android-打包过程&quot; class=&quot;headerlink&quot; title=&quot;Android 打包过程&quot;&gt;&lt;/a&gt;Android 打包过程&lt;/h1&gt;&lt;p&gt;第一步：打包资源文件，生成R.java文件&lt;br&gt;【输入】R
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="编译" scheme="http://febsky.me/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>泛型（Generics）</title>
    <link href="http://febsky.me/2016/05/04/2016-05-04-Java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://febsky.me/2016/05/04/2016-05-04-Java泛型/</id>
    <published>2016-05-04T04:14:42.000Z</published>
    <updated>2016-05-13T15:55:39.000Z</updated>
    
    <content type="html">&lt;p&gt;泛型是提供给Javac编译器使用的。可以限定集合中输入的类型，让编译器挡住原始程序的非法输入，编译器编译带类型说明的集合时会去掉“类型”信息，使程序运行效率不受影响，对于参数化的泛型类型。&lt;/p&gt;
&lt;h1 id=&quot;泛型中用到的术语&quot;&gt;&lt;a href=&quot;#泛型中用到的术语&quot; class=&quot;headerlink&quot; title=&quot;泛型中用到的术语&quot;&gt;&lt;/a&gt;泛型中用到的术语&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ArrayList&amp;lt;E&amp;gt;&lt;/code&gt;类定义和&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;类引用中涉及如下术语：整个称为ArrayList&lt;e&gt;泛型类型，ArrayList&lt;e&gt;中的E称为&lt;strong&gt;&lt;code&gt;类型变量&lt;/code&gt;&lt;/strong&gt;或&lt;code&gt;类型参数&lt;/code&gt;，整个ArrayList&lt;integer&gt;称为&lt;code&gt;参数化的类型&lt;/code&gt;，ArrayList&lt;integer&gt;中的Integer称为&lt;code&gt;类型参数的实例&lt;/code&gt;或实际类型参数，ArrayList称为原始类型。&lt;/integer&gt;&lt;/integer&gt;&lt;/e&gt;&lt;/e&gt;&lt;/p&gt;
&lt;h1 id=&quot;类型擦除&quot;&gt;&lt;a href=&quot;#类型擦除&quot; class=&quot;headerlink&quot; title=&quot;类型擦除&quot;&gt;&lt;/a&gt;类型擦除&lt;/h1&gt;&lt;p&gt;　　由于Java泛型的实现机制，使用了泛型的代码在运行期间相关的泛型参数的类型会被擦除，我们无法在运行期间获知泛型参数的具体类型（所有的泛型类型在运行时都是Object类型）。&lt;/p&gt;
&lt;p&gt;　　正确理解泛型概念的首要前提是理解类型擦除（type erasure）。 Java中的泛型基本上都是在编译器这个层次来实现的。属于编译器执行类型检查和类型诊断，然后生成普通的非泛型的字节码，也就是在生成的Java字节代码中是不包含泛型中的类型信息的，使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这种实现技术称为类型擦除。如在代码中定义的List&lt;object&gt;和List&lt;string&gt;等类型，在编译之后都会变成List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法避免在运行时刻出现类型转换异常的情况。&lt;/string&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;很多泛型的奇怪特性都与这个类型擦除的存在有关，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型类并没有自己独有的Class类对象。比如并不存在List&lt;string&gt;.class或是List&lt;integer&gt;.class，而只有List.class；&lt;/integer&gt;&lt;/string&gt;&lt;/li&gt;
&lt;li&gt;静态变量是被泛型类的所有实例所共享的。对于声明为MyClass&lt;t&gt;的类，访问其中的静态变量的方法仍然是 MyClass.myStaticVar。不管是通过new MyClass&lt;string&gt;还是new MyClass&lt;integer&gt;创建的对象，都是共享一个静态变量。&lt;/integer&gt;&lt;/string&gt;&lt;/t&gt;&lt;/li&gt;
&lt;li&gt;泛型的类型参数不能用在Java异常处理的catch语句中。因为异常处理是由JVM在运行时刻来进行的。由于类型信息被擦除，JVM是无法区分两个异常类型MyException&lt;string&gt;和MyException&lt;integer&gt;的。对于JVM来说，它们都是MyException类型的。也就无法执行与异常对应的catch语句。&lt;/integer&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;通配符与上下界&quot;&gt;&lt;a href=&quot;#通配符与上下界&quot; class=&quot;headerlink&quot; title=&quot;通配符与上下界&quot;&gt;&lt;/a&gt;通配符与上下界&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;泛型参数可以使用通配符，通配符所表示的类型是未知的。&lt;/li&gt;
&lt;li&gt;List&amp;lt;?&amp;gt;所声明的就是所有类型都是可以的。&lt;/li&gt;
&lt;li&gt;但是List&amp;lt;?&amp;gt;并不等同于List&lt;object&gt;。&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;List&amp;lt;? extends Number&amp;gt;说明List中可能包含的元素类型是Number及其子类。&lt;/li&gt;
&lt;li&gt;而List&amp;lt;? super Number&amp;gt;则说明List中包含的是Number及其父类。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Object&amp;gt; list)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Object obj : list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//这个操作在当前方法的上下文是合法的。 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;String&amp;gt; strs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inspect(strs); &lt;span class=&quot;comment&quot;&gt;//编译错误 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;重新学习泛型的原因&quot;&gt;&lt;a href=&quot;#重新学习泛型的原因&quot; class=&quot;headerlink&quot; title=&quot;重新学习泛型的原因&quot;&gt;&lt;/a&gt;重新学习泛型的原因&lt;/h1&gt;&lt;p&gt;在使用Gson的时候，看源码遇到了瓶颈。在Gson中我们需要将使用了泛型的Java代码序列化或者反序列化的时候，我们确实需要获知泛型参数的类型，这个时候问题就变得比较棘手。&lt;/p&gt;
&lt;p&gt;而在Gson中用来TypeToken这个帮助类来获取泛型的具体类型。这个类的核心关键思想是&lt;code&gt;Class&lt;/code&gt;对象中&lt;code&gt;getGenericSuperclass()&lt;/code&gt;这个方法的使用。这个方法是干嘛的，从字面意思看是获取含有泛型的父类类型。什么玩意？哦，意思是说，如果某个类的父类含有泛型，那么它可以获取父类的字节码对象，也就是Class对象，但是呢这个方法和&lt;code&gt;getSuperclass（）&lt;/code&gt;的区别是，他还能获取到父类中的泛型参数的字节码对象。而Gson中TypeToken的用法就是利用了这个设计思想，看我们每次用TypeToken都是这么用的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Type type = new TypeToken&amp;#60;List&amp;#60;String&amp;#62;&amp;#62;()&amp;#123;&amp;#125;.getType();&amp;#10;List&amp;#60;String&amp;#62; list = gson.fromJson(jsonStr, type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中的&lt;code&gt;new TypeToken&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){}&lt;/code&gt;就是创建了一个TypeToke的匿名子类对象。所以从这个对象中可以拿到父类（TypeToken）中的泛型参数（&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;）的具体类型。&lt;/p&gt;
&lt;p&gt;当然我们可以模仿写一个试试：&lt;/p&gt;
&lt;p&gt;首先建立一个获取类型的帮助类，类似TypeToken&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; me.febsky;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by Administrator on 2016/5/4.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class&amp;lt;T&amp;gt; type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type = (Class&amp;lt;T&amp;gt;) getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后看我们的测试类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package me.febsky;&amp;#10;&amp;#10;import java.lang.reflect.ParameterizedType;&amp;#10;import java.lang.reflect.Type;&amp;#10;&amp;#10;public class Main &amp;#123;&amp;#10;    public static void main(String[] args) &amp;#123;&amp;#10;        Foo&amp;#60;String&amp;#62; foo = new Foo&amp;#60;String&amp;#62;()&amp;#123;&amp;#125;;&amp;#10;        Type mySuperClass = foo.getClass().getGenericSuperclass();&amp;#10;        Type type = ((ParameterizedType)mySuperClass).getActualTypeArguments()[0];&amp;#10;        System.out.println(type);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从测试类中我成功拿到泛型类中的泛型参数的具体类型。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;泛型是提供给Javac编译器使用的。可以限定集合中输入的类型，让编译器挡住原始程序的非法输入，编译器编译带类型说明的集合时会去掉“类型”信息，使程序运行效率不受影响，对于参数化的泛型类型。&lt;/p&gt;
&lt;h1 id=&quot;泛型中用到的术语&quot;&gt;&lt;a href=&quot;#泛型中用到的术语&quot; 
    
    </summary>
    
    
      <category term="Gson" scheme="http://febsky.me/tags/Gson/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="泛型" scheme="http://febsky.me/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 简介和使用</title>
    <link href="http://febsky.me/2016/04/26/2016-04-26-Gradle%E7%9A%84%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://febsky.me/2016/04/26/2016-04-26-Gradle的简介和使用/</id>
    <published>2016-04-26T04:14:42.000Z</published>
    <updated>2016-05-13T15:56:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Gradle是个什么东西，从哪里入手学习，都知道在Android Studio中用到了Gradle配置，那么他和Android 以及AndroidStudio的关系是啥？他和Java的关系又是啥，他脱离AndroidStudio是否能够运行？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看了官方的英文文档后发现社区竟然有热心的开发者翻译了一份中文的oh shit ~ &lt;a href=&quot;https://github.com/DONGChuan/GradleUserGuide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接地址&lt;/a&gt;  &lt;a href=&quot;https://docs.gradle.org/current/release-notes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网文档&lt;/a&gt;最近两年Gradle更新相当频繁，注意更新版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Gradle 是一个基于JVM的构建工具。使用Groovy这种脚步语言，主要提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个像 Ant 一样的灵活的构建工具&lt;/li&gt;
&lt;li&gt;一种可切换的, 像 maven 一样的基于合约构建的框架&lt;/li&gt;
&lt;li&gt;支持强大的多工程构建&lt;/li&gt;
&lt;li&gt;支持强大的依赖管理(基于 ApacheIvy )&lt;/li&gt;
&lt;li&gt;支持已有的 maven 和 ivy 仓库&lt;/li&gt;
&lt;li&gt;支持传递性依赖管理, 而不需要远程仓库或者 pom.xml 或者 ivy 配置文件&lt;/li&gt;
&lt;li&gt;优先支持 Ant 式的任务和构建&lt;/li&gt;
&lt;li&gt;基于 groovy 的构建脚本&lt;/li&gt;
&lt;li&gt;有丰富的领域模型来描述你的构建&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;为啥使用Groovy这种脚步语言&quot;&gt;&lt;a href=&quot;#为啥使用Groovy这种脚步语言&quot; class=&quot;headerlink&quot; title=&quot;为啥使用Groovy这种脚步语言&quot;&gt;&lt;/a&gt;为啥使用Groovy这种脚步语言&lt;/h1&gt;&lt;p&gt;我们认为在脚本构建时，内部基于 XML 的 DSL（基于一个动态语言）优势是巨大的. 有许多动态语言在那里, 我们为什么选择 Groovy? 答案在于 Gradle 的运行环境. 虽然 Gradle 是以一个多用途的构建工具为核心，它的重点是Java项目. 在这样的项目中, 显然团队每个成员都了解 Java. 我们认为构建应尽可能对所有团队成员都是透明的, 所以选择了 Groovy.&lt;/p&gt;
&lt;p&gt;你可能会说，为什么不直接使用 Java 作为构建脚本的语言. 我们认为这是一个有效性的问题. 对于你的团队, 它要有最高的透明度和最低的学习曲线, 也就是说容易掌握. 但由于 Java 的限制, 这样的构建语言不会那么完美和强大. 如 Python，Groovy 或 Ruby 语言都可以有更高的效率. 我们选择了 Groovy 是因为它给 Java 开发人员提供了迄今为止最大的透明度. 其基本的符号和类型与 Java 是一样的，其封装结构和许多其他的地方也是如此.&lt;/p&gt;
&lt;p&gt;对于那些同样分享 Python 或 Ruby 知识的 Java 团队将会很乐意学习它. Gradle 的设计非常适合在 JRuby 和 Jython 中创建另一个构建脚本引擎. 它只是目前开发的优先级里. 我们十分支持任何人来做贡献, 创建额外的构建脚本引擎.&lt;/p&gt;
&lt;h1 id=&quot;安装使用&quot;&gt;&lt;a href=&quot;#安装使用&quot; class=&quot;headerlink&quot; title=&quot;安装使用&quot;&gt;&lt;/a&gt;安装使用&lt;/h1&gt;&lt;p&gt;在编程方面要想快速了解一个东西，就是用一下，也就是写个Hello world!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 需要运行在一个 Java 环境里&lt;ul&gt;
&lt;li&gt;安装一个 Java JDK 或者 JRE. 而且 Java 版本必须至少是 6 以上.&lt;/li&gt;
&lt;li&gt;Gradle 自带 Groovy 库, 所以没必要安装 Groovy. 任何已经安装的 Groovy 会被 Gradle 忽略.&lt;/li&gt;
&lt;li&gt;去Gradle官网下载一个Gradle的版本&lt;a href=&quot;http://www.gradle.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;，选择个比较新的解压就行。（网速可能比较慢,必要时可以选择科学上网）&lt;/li&gt;
&lt;li&gt;解压后设置环境变量（windows和Linux和Mac的不太一样），就是把解压后的bin目录设置到环境变量中。（和jdk的一样）&lt;/li&gt;
&lt;li&gt;然后在命令行中运行&lt;code&gt;gradle -v&lt;/code&gt;来检测你的Gradle是否安装成功。&lt;/li&gt;
&lt;li&gt;设置JVM选项（略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;headerlink&quot; title=&quot;专业术语&quot;&gt;&lt;/a&gt;专业术语&lt;/h1&gt;&lt;p&gt;安也安了，命令行也配置好了，那么就开始在命令行下用唄~其实用过git的同学（首先你得习惯用git的命令行模式而不是图形化界面）可以类比下git的使用方式。&lt;/p&gt;
&lt;p&gt;首先要理解Gradle中的几个专业术语。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;projects ( 项目 )&lt;/strong&gt;：每一个构建都是由一个或多个 projects 构成的. 一个 project 到底代表什么依赖于你想用 Gradle 做什么. 举个例子, 一个 project 可以代表一个 JAR 或者一个网页应用. 它也可能代表一个发布的 ZIP 压缩包, 这个 ZIP 可能是由许多其他项目的 JARs 构成的. 但是一个 project 不一定非要代表被构建的某个东西. 它可以代表一件**要做的事, 比如部署你的应用.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tasks ( 任务 )&lt;/strong&gt;：每一个 project 是由一个或多个 tasks 构成的. 一个 task 代表一些更加细化的构建. 可能是编译一些 classes, 创建一个 JAR, 生成 javadoc, 或者生成某个目录的压缩文件.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实以上的官方解释可以忽略，毛线都读不明白~~~&lt;/p&gt;
&lt;h1 id=&quot;Project对象和build-gradle&quot;&gt;&lt;a href=&quot;#Project对象和build-gradle&quot; class=&quot;headerlink&quot; title=&quot;Project对象和build.gradle&quot;&gt;&lt;/a&gt;Project对象和build.gradle&lt;/h1&gt;&lt;p&gt;为了不深究Gradle的实现原理（就是去读源代码），又要让大家觉得有据可依。我通过引用官方文档的一些描述来帮助大家理解Project对象。&lt;/p&gt;
&lt;p&gt;For each project in the build, Gradle creates an object of type Project and associates this Project object with the build script. (Chapter 13. Writing Build Scripts)&lt;br&gt;构建中的每一个project，Gradle都会创建一个Project对象，并将这个对象与构建脚本相关联。&lt;/p&gt;
&lt;p&gt;There is a one-to-one relationship between a Project and a “build.gradle” file. (Interface Project API)&lt;br&gt;Project对象与build.gradle是一对一的关系。&lt;/p&gt;
&lt;p&gt;First, Gradle scripts are configuration scripts. As the script executes, it configures an object of a particular type. For example, as a build script executes, it configures an object of type Project. This object is called the delegate object of the script. (Gradle Build Language Reference)&lt;br&gt;Gradle的脚本是配置脚本，当脚本执行时，它是在配置某一个特殊类型的对象。比如一个构建脚本的执行，它就是在配置一个Project类型的对象。这个对象叫做脚本的代理对象。&lt;/p&gt;
&lt;p&gt;读完这三句话，应该可以清楚的明白build.gradle的本质，简单的说，build.gradle是对一个Project对象的配置。&lt;/p&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;gradle 命令会在当前目录中查找一个叫 build.gradle 的文件. 我们称这个 build.gradle 文件为一个&lt;strong&gt;构建脚本 (build script)&lt;/strong&gt;, 但是严格来说它是一个构建配置脚本 (build configuration script). 这个脚本定义了一个 &lt;code&gt;project&lt;/code&gt; 和它的 &lt;code&gt;tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;你可以通过 gradle 命令运行一个 Gradle 构建.&lt;/p&gt;
&lt;p&gt;让我们来先看一个例子, 创建一个名为build.gradle的构建脚本.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task hello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;&#39;Hello world!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在命令行里, 进入脚本所在的文件夹然后输入 &lt;code&gt;gradle -q hello&lt;/code&gt; 来执行构建脚本.命令里加入 -q. 代表 quite 模式. 它不会生成 Gradle 的日志信息 (log messages).&lt;/p&gt;
&lt;p&gt;这里发生了什么? 这个构建脚本定义了一个独立的 task, 叫做 hello, 并且加入了一个 action. 当你运行 gradle hello, Gradle 执行叫做 hello 的 task, 也就是执行了你所提供的 action. 这个 action 是一个包含了一些 Groovy 代码的闭包(closure 这个概念不清楚的同学好好谷歌下).&lt;/p&gt;
&lt;p&gt;Gradle 不仅仅是想XML一样的配置文件，他是个脚本，是可以写代码的，更多操作请查看官方文档。&lt;/p&gt;
&lt;h1 id=&quot;Java插件&quot;&gt;&lt;a href=&quot;#Java插件&quot; class=&quot;headerlink&quot; title=&quot;Java插件&quot;&gt;&lt;/a&gt;Java插件&lt;/h1&gt;&lt;p&gt; Gradle 是一种多用途的构建工具. 它可以在你的构建脚本里构建任何你想要实现的东西. 但前提是你必须先在构建脚本里加入代码, 不然它什么都不会执行.&lt;/p&gt;
&lt;p&gt;大都数 Java 项目是非常相像的: 你需要编译你的 Java 源文件, 运行一些单元测试, 同时创建一个包含你类文件的 JAR. 如果你可以不需要为每一个项目重复编写这些, 我想你会非常乐意的.&lt;/p&gt;
&lt;p&gt;幸运的是, 你现在不再需要做这些重复劳动了. Gradle 通过使用插件解决了这个问题. 插件是 Gradle 的扩展, 它会通过某种方式配置你的项目, 典型的有加入一些预配置任务. Gradle 自带了许多插件, 你也可以很简单地编写自己的插件并和其他开发者分享它. Java 插件就是一个这样的插件. 这个插件在你的项目里加入了许多任务， 这些任务会编译和单元测试你的源文件, 并且把它们都集成一个 JAR 文件里.&lt;/p&gt;
&lt;p&gt;Java 插件是基于合约的（&lt;strong&gt;约定优于配置&lt;/strong&gt;）. 这意味着插件已经给项目的许多方面定义了默认的参数, 比如 Java 源文件的位置. 如果你在项目里遵从这些合约, 你通常不需要在你的构建脚本里加入太多东西. 如果你不想要或者是你不能遵循合约, Gradle 也允许你自己定制你的项目. 事实上, 因为对 Java 项目的支持是通过插件实现的, 如果你不想要的话, 你一点也不需要使用这个插件来构建你的项目.&lt;/p&gt;
&lt;h1 id=&quot;gradle-和-groovy的关系&quot;&gt;&lt;a href=&quot;#gradle-和-groovy的关系&quot; class=&quot;headerlink&quot; title=&quot;gradle 和 groovy的关系&quot;&gt;&lt;/a&gt;gradle 和 groovy的关系&lt;/h1&gt;&lt;p&gt;那么好好的groovy怎么就变成gradle那样了呢？&lt;br&gt;原因就是，Gradle大量地使用了Groovy闭包的delegate（委托）机制。简单来说，delegate机制可以使我们将一个闭包中的执行代码的作用对象设置成任意其他对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle深入与实战（六）Gradle的背后是什么？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle是个什么东西，从哪里入手学习，都知道在Android Studio中用到了Gradle配置，那么他和Android 以及AndroidStudio的关系是啥？他和Java的关系又是啥，他脱离AndroidStudio是否能够运行？&lt;/p&gt;
&lt;blockquote
    
    </summary>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Gradle" scheme="http://febsky.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>获取表和字段的元数据的方法</title>
    <link href="http://febsky.me/2016/04/24/2014-12-23-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://febsky.me/2016/04/24/2014-12-23-获取表和字段的元数据的方法/</id>
    <published>2016-04-24T10:36:24.000Z</published>
    <updated>2016-05-15T13:25:50.000Z</updated>
    
    <content type="html">&lt;h2&gt;外键关系查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. CONSTRAINT_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. TABLE_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kcu. COLUMN_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. TABLE_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; foreign_table_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. COLUMN_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; foreign_column_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc.is_deferrable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc.initially_deferred&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema.table_constraints &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.key_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; kcu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.constraint_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ccu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	constraint_type = &lt;span class=&quot;string&quot;&gt;&#39;FOREIGN KEY&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; tc. TABLE_NAME = &lt;span class=&quot;string&quot;&gt;&#39;dimention_goods&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://itroadmap.sinaapp.com/2014/12/23/postgres-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;&lt;del&gt;不知道如何防止被流氓网站爬取&lt;/del&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;字段详细信息查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.table_schema,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. TABLE_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.ordinal_position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. COLUMN_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.data_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.character_maximum_length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.numeric_precision,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.numeric_scale,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.is_nullable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.column_default,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	des.description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema. &lt;span class=&quot;keyword&quot;&gt;COLUMNS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; pg_description des &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;. TABLE_NAME :: regclass = des.objoid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;.ordinal_position = des.objsubid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	table_schema = &lt;span class=&quot;string&quot;&gt;&#39;XXXX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; TABLE_NAME = &lt;span class=&quot;string&quot;&gt;&#39;XXXX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ordinal_position;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;获取所有的表名&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tablename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pg_tables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tablename &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pg%&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; tablename &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sql_%&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;##mysql中对入插入的触发器&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELIMITER $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*[DEFINER = &amp;#123; user | CURRENT_USER &amp;#125;]*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`clinkworld_metadata`&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;`add_tid_fields_relation`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`clinkworld_metadata`&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;`fields_relation`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BEGIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; t_id &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; @f1_tid_var &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fields_info &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f1_id;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; t_id &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; @f2_tid_var &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fields_info &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f2_id;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f1_tid=@f1_tid_var;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NEW&lt;/span&gt;.f2_tid=@f2_tid_var;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELIMITER ;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;主键列信息获取&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tc. CONSTRAINT_NAME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. TABLE_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; primary_table_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ccu. COLUMN_NAME &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; primary_column_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	information_schema.table_constraints &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; tc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.key_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; kcu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; information_schema.constraint_column_usage &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ccu &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	constraint_type = &lt;span class=&quot;string&quot;&gt;&#39;PRIMARY KEY&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2&gt;外键关系查询语句&lt;/h2&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
    
    </summary>
    
      <category term="postgres" scheme="http://febsky.me/categories/postgres/"/>
    
    
      <category term="postgres" scheme="http://febsky.me/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>Paas和SaaS</title>
    <link href="http://febsky.me/2016/04/24/2015-07-27-Paas%E5%92%8CSaaS/"/>
    <id>http://febsky.me/2016/04/24/2015-07-27-Paas和SaaS/</id>
    <published>2016-04-24T10:33:24.000Z</published>
    <updated>2016-05-13T15:38:43.000Z</updated>
    
    <content type="html">&lt;p&gt;平台即服务（Platform as a Service, PaaS)是软件即服务（Software as a Service, SaaS)的延伸。&lt;/p&gt;
&lt;p&gt;SaaS提供的是定制好的远程软件服务，比如当你订购一个网络销售系统软件，就可以直接使用，不需要代码开发，但是缺点是客制化困难。&lt;/p&gt;
&lt;p&gt;PaaS也是远程订购服务，但是你购买的是平台模块服务，如计算能力、数据库、储存和消息传送等。底层的平台已¾¬帮你铺建好，你需要开发自己的上层应用。&lt;/p&gt;
&lt;p&gt;PAAS平台应用代表&lt;br&gt;国外：Google、Salesforce、Amazon&lt;br&gt;国内：八百客 用友 百度BAE 新浪SAE 阿里Ali 魔泊云（MoPaaS）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平台即服务（Platform as a Service, PaaS)是软件即服务（Software as a Service, SaaS)的延伸。&lt;/p&gt;
&lt;p&gt;SaaS提供的是定制好的远程软件服务，比如当你订购一个网络销售系统软件，就可以直接使用，不需要代码开发，但是缺点
    
    </summary>
    
      <category term="大数据" scheme="http://febsky.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://febsky.me/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Theme制作用到的库</title>
    <link href="http://febsky.me/2016/04/16/2016-04-16-Hexo%E7%9A%84Theme%E5%88%B6%E4%BD%9C%E7%94%A8%E5%88%B0%E7%9A%84%E5%BA%93/"/>
    <id>http://febsky.me/2016/04/16/2016-04-16-Hexo的Theme制作用到的库/</id>
    <published>2016-04-16T02:31:43.000Z</published>
    <updated>2016-04-24T10:24:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Hexo 的&lt;a href=&quot;https://hexo.io/zh-cn/docs/templates.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS库 &lt;a href=&quot;http://stylus-lang.com/docs/executable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylus&lt;/a&gt;当时一直很好奇这个&lt;code&gt;.styl&lt;/code&gt;结尾的文件到底是个啥,&lt;a href=&quot;http://www.zhangxinxu.com/jq/stylus/js.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo 的&lt;a href=&quot;https://hexo.io/zh-cn/docs/templates.html&quot;&gt;文档&lt;/a&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS库 &lt;a href=&quot;http://stylus-lang.com/docs/executable.html&quot;&gt;Stylus&lt;/a&gt;当时一直很好奇这个&lt;code&gt;.styl&lt;/code&gt;结尾的文件到底是个啥,&lt;a href=&quot;http://www.zhangxinxu.com/jq/stylus/js.php&quot;&gt;中文文档地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://febsky.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://febsky.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>某家公司面试题</title>
    <link href="http://febsky.me/2016/04/14/2016-04-14-%E6%9F%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://febsky.me/2016/04/14/2016-04-14-某公司面试笔试题/</id>
    <published>2016-04-14T08:39:22.000Z</published>
    <updated>2016-04-16T02:43:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;先说点个人感想（废话）：&lt;/strong&gt;这家公司还是不错的，面了三个星期了，14个工作日，面了12家公司.这家算是除了新浪微博之外比较正规的面试了。只记录技术二面，一面的都是比较基础的Java和Android。主要的有下面两个其余的忘了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;1-说说ArrayList的底层实现。&quot;&gt;&lt;a href=&quot;#1-说说ArrayList的底层实现。&quot; class=&quot;headerlink&quot; title=&quot;1. 说说ArrayList的底层实现。&quot;&gt;&lt;/a&gt;1. 说说ArrayList的底层实现。&lt;/h1&gt;&lt;p&gt;延长方式，为什么要选择这种延长方式，而不是一个个延长。（面试官带着我算了一下这几种延长方式时间复杂度，幸亏为了应对微博的面试我简单复习了下算法理论知识，不至于被虐的体无完肤）但是算到log(n)的时候我真心不会了，对数函数早忘没了~~~&lt;/p&gt;
&lt;h1 id=&quot;2-题目是这样的：&quot;&gt;&lt;a href=&quot;#2-题目是这样的：&quot; class=&quot;headerlink&quot; title=&quot;2. 题目是这样的：&quot;&gt;&lt;/a&gt;2. 题目是这样的：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;如果你知道接下来每秒的股票的价格，但是你只有一次买的机会，和一次卖的机会如何才能使收益最高。&lt;/li&gt;
&lt;li&gt;我当时的解决是用来双重for循环来遍历，然后面试官接着问，你的算法复杂度是多少（就离不开复杂度了，😓），我说O(n²)，他说好，有没有办法一次for循环能解决。额，我解决了半天~~ 都没作对。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;3-Activity在不同启动模式下的生命周期&quot;&gt;&lt;a href=&quot;#3-Activity在不同启动模式下的生命周期&quot; class=&quot;headerlink&quot; title=&quot;3. Activity在不同启动模式下的生命周期&quot;&gt;&lt;/a&gt;3. Activity在不同启动模式下的生命周期&lt;/h1&gt;&lt;p&gt;恩，好像有个&lt;code&gt;onNewIntent()&lt;/code&gt;.记不清了,这个我不会。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;先说点个人感想（废话）：&lt;/strong&gt;这家公司还是不错的，面了三个星期了，14个工作日，面了12家公司.这家算是除了新浪微博之外比较正规的面试了。只记录技术二面，一面的都是比较基础的Java和Android。主要的有下面两个其余的忘了。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
      <category term="面试" scheme="http://febsky.me/categories/Java/Android/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="面试" scheme="http://febsky.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>新浪微博笔试最后一题</title>
    <link href="http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E7%AC%94%E8%AF%95%E6%9C%80%E5%90%8E%E4%B8%80%E9%A2%98/"/>
    <id>http://febsky.me/2016/04/12/2016-04-12-新浪微博笔试最后一题/</id>
    <published>2016-04-12T14:12:32.000Z</published>
    <updated>2016-04-16T02:44:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这是个程序找错题，找出&lt;strong&gt;不合理的地方&lt;/strong&gt;并且给出解决方案。明确的说应该是三处错误，我当时找出三处但是有一处没有改对。程序大体的代码是这样的，最后的那个枚举类型有点不太确定的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.febsky.temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.content.Context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.os.Handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.os.Message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.support.v7.app.AppCompatActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.os.Bundle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.view.View;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SinaWeiboActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Handler handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.handleMessage(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_sina_weibo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View.OnClickListener listener = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        findViewById(R.id.button).setOnClickListener(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Manager.getInstance(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).setListener(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Manager &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INSTANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View.OnClickListener listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Manager &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (Manager.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Manager.INSTANCE.context == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Manager.INSTANCE.context = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; INSTANCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setListener&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View.OnClickListener listener)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.listener = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;答案我就不给了，万一微博真的还在用这个题面试。我岂不是成了微博的醉人0^0，想知道答案的可以留言，我回复邮件。&lt;/p&gt;
&lt;p&gt;其余的笔试题参照&lt;strong&gt;&lt;a href=&quot;&quot;&gt;上篇&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是个程序找错题，找出&lt;strong&gt;不合理的地方&lt;/strong&gt;并且给出解决方案。明确的说应该是三处错误，我当时找出三处但是有一处没有改对。程序大体的代码是这样的，最后的那个枚举类型有点不太确定的地方。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
      <category term="面试" scheme="http://febsky.me/categories/Java/Android/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="面试" scheme="http://febsky.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2016年四月新浪微博面试体验</title>
    <link href="http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://febsky.me/2016/04/12/2016-04-12-新浪微博面试笔试题/</id>
    <published>2016-04-12T13:14:41.000Z</published>
    <updated>2016-04-16T02:46:08.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;先说点个人感想（废话）：&lt;/strong&gt;真心挺感谢新浪能给这个面试机会，作为一个非重点本科毕业学生来说，能给个面试机会已经非常不错了。不想某些大公司筛选简历一看工作年限，二看出身。很可惜自己能力有限在三面的时候彻底被虐了，今年算是止步于三面了。但是还是学到很多东西的，如果再有个一到两年的沉淀，详细自己还是可以胜任的。本来不想发出来的不知道发出来会不会影响到人家的面试。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;约的是下午四点的面试，面到了差不多7点。时间还是挺长的。三面完了等了打约20分钟，人事告诉我他们要的是高级工程师。然后~~~&lt;/p&gt;
&lt;h1 id=&quot;2016四月新浪微博面试笔试题&quot;&gt;&lt;a href=&quot;#2016四月新浪微博面试笔试题&quot; class=&quot;headerlink&quot; title=&quot;2016四月新浪微博面试笔试题&quot;&gt;&lt;/a&gt;2016四月新浪微博面试笔试题&lt;/h1&gt;&lt;h2 id=&quot;1-静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？&quot;&gt;&lt;a href=&quot;#1-静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？&quot; class=&quot;headerlink&quot; title=&quot;1. 静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？&quot;&gt;&lt;/a&gt;1. 静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？&lt;/h2&gt;&lt;h2 id=&quot;2-AraayList-和Vector-的区别&quot;&gt;&lt;a href=&quot;#2-AraayList-和Vector-的区别&quot; class=&quot;headerlink&quot; title=&quot;2. AraayList 和Vector 的区别&quot;&gt;&lt;/a&gt;2. AraayList 和Vector 的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的&lt;/li&gt;
&lt;li&gt;记住Vector与Hashtable是旧的，是java一诞生就提供了的，它们是线程安全的，ArrayList与HashMap是java2时才提供的&lt;/li&gt;
&lt;li&gt;ArrayList与Vector都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加ArrayList与Vector的存储空间，Vector默认增长为原来两倍，而ArrayList的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的1.5倍） ArrayList与Vector都可以设置初始的空间大小，Vector还可以设置增长的空间大小，而ArrayList没有提供设置增长空间的方法。&lt;br&gt;总结：即Vector增长原来的一倍，ArrayList增加原来的0.5倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-RemoteView-在什么地方用&quot;&gt;&lt;a href=&quot;#3-RemoteView-在什么地方用&quot; class=&quot;headerlink&quot; title=&quot;3. RemoteView 在什么地方用&quot;&gt;&lt;/a&gt;3. RemoteView 在什么地方用&lt;/h2&gt;&lt;p&gt;到目前为止，我发现RemoteView会用在两个地方：一个是在AppWidget,另外一个是在Notification. &lt;/p&gt;
&lt;h2 id=&quot;4-Fragment和Activity的生命周期&quot;&gt;&lt;a href=&quot;#4-Fragment和Activity的生命周期&quot; class=&quot;headerlink&quot; title=&quot;4. Fragment和Activity的生命周期&quot;&gt;&lt;/a&gt;4. Fragment和Activity的生命周期&lt;/h2&gt;&lt;h2 id=&quot;5-Android-中的进程有哪些，说出它们的优先级&quot;&gt;&lt;a href=&quot;#5-Android-中的进程有哪些，说出它们的优先级&quot; class=&quot;headerlink&quot; title=&quot;5. Android 中的进程有哪些，说出它们的优先级&quot;&gt;&lt;/a&gt;5. Android 中的进程有哪些，说出它们的优先级&lt;/h2&gt;&lt;h2 id=&quot;6-view和Surfaceview的区别&quot;&gt;&lt;a href=&quot;#6-view和Surfaceview的区别&quot; class=&quot;headerlink&quot; title=&quot;6. view和Surfaceview的区别&quot;&gt;&lt;/a&gt;6. view和Surfaceview的区别&lt;/h2&gt;&lt;h2 id=&quot;7-onInterceptTouchEvent、onTouchEvent-的区别&quot;&gt;&lt;a href=&quot;#7-onInterceptTouchEvent、onTouchEvent-的区别&quot; class=&quot;headerlink&quot; title=&quot;7. onInterceptTouchEvent、onTouchEvent 的区别&quot;&gt;&lt;/a&gt;7. onInterceptTouchEvent、onTouchEvent 的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;onTouchEvent同样也是在view中定义的一个方法。处理传递到view 的手势事件。手势事件类型包括ACTION_DOWN,ACTION_MOVE,ACTION_UP,ACTION_CANCEL四种事件。&lt;br&gt;一旦onTouchEvent方法被调用，并返回true则这个手势事件就结束了，并不会向下传递到子控件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;onInterceptTouchEvent是在ViewGroup里面定义的。Android中的layout布局类一般都是继承此类的。onInterceptTouchEvent是用于拦截手势事件的，每个手势事件都会先调用onInterceptTouchEvent&lt;br&gt;此方法返回false，则手势事件会向子控件传递；返回true，则调用onTouchEvent方法。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;8-switch-中可以用byte吗，可以用long吗，可以用String吗？&quot;&gt;&lt;a href=&quot;#8-switch-中可以用byte吗，可以用long吗，可以用String吗？&quot; class=&quot;headerlink&quot; title=&quot;8. switch 中可以用byte吗，可以用long吗，可以用String吗？&quot;&gt;&lt;/a&gt;8. switch 中可以用byte吗，可以用long吗，可以用String吗？&lt;/h2&gt;&lt;p&gt;答：switch 只能添加  &lt;code&gt;char,byte,short,int,Character,Byte,Short,Interger,String ,enum&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;9-try-catch-finally-运行流程&quot;&gt;&lt;a href=&quot;#9-try-catch-finally-运行流程&quot; class=&quot;headerlink&quot; title=&quot;9. try catch finally 运行流程&quot;&gt;&lt;/a&gt;9. try catch finally 运行流程&lt;/h2&gt;&lt;h2 id=&quot;10-是一个程序找错题。&quot;&gt;&lt;a href=&quot;#10-是一个程序找错题。&quot; class=&quot;headerlink&quot; title=&quot;10. 是一个程序找错题。&quot;&gt;&lt;/a&gt;10. 是一个程序找错题。&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;先说点个人感想（废话）：&lt;/strong&gt;真心挺感谢新浪能给这个面试机会，作为一个非重点本科毕业学生来说，能给个面试机会已经非常不错了。不想某些大公司筛选简历一看工作年限，二看出身。很可惜自己能力有限在三面的时候彻底被虐了，今年算是止步于三面了。但是还是学到很多东西的，如果再有个一到两年的沉淀，详细自己还是可以胜任的。本来不想发出来的不知道发出来会不会影响到人家的面试。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
      <category term="面试" scheme="http://febsky.me/categories/Java/Android/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="面试" scheme="http://febsky.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2016年四月新浪微博面试部分</title>
    <link href="http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAndroid%E9%9D%A2%E8%AF%95%E9%83%A8%E5%88%86/"/>
    <id>http://febsky.me/2016/04/12/2016-04-12-新浪微博Android面试部分/</id>
    <published>2016-04-12T13:14:41.000Z</published>
    <updated>2016-04-16T02:43:12.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="Android" scheme="http://febsky.me/categories/Java/Android/"/>
    
      <category term="面试" scheme="http://febsky.me/categories/Java/Android/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://febsky.me/tags/Android/"/>
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="面试" scheme="http://febsky.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2016-04-11-Android四大组件之Service概念</title>
    <link href="http://febsky.me/2016/04/11/2016-04-11-Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService%E6%A6%82%E5%BF%B5/"/>
    <id>http://febsky.me/2016/04/11/2016-04-11-Android四大组件之Service概念/</id>
    <published>2016-04-11T10:36:01.000Z</published>
    <updated>2016-04-16T02:44:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Service-与-Thread-的区别&quot;&gt;&lt;a href=&quot;#Service-与-Thread-的区别&quot; class=&quot;headerlink&quot; title=&quot;Service 与 Thread 的区别&quot;&gt;&lt;/a&gt;Service 与 Thread 的区别&lt;/h1&gt;&lt;p&gt;很多时候，你可能会问，为什么要用 Service，而不用 Thread 呢，因为用 Thread 是很方便的，比起 Service 也方便多了，下面我详细的来解释一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;Thread：Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。&lt;/li&gt;
&lt;li&gt;Service：Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。因此请不要把 Service 理解成线程，它跟线程半毛钱的关系都没有！&lt;br&gt;&amp;emsp;&amp;emsp; 既然这样，那么我们为什么要用 Service 呢？其实这跟 android 的系统机制有关，我们先拿 Thread 来说。Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。&lt;br&gt;&amp;emsp;&amp;emsp;举个例子：如果你的 Thread 需要不停地隔一段时间就要连接服务器做某种同步的话，该 Thread 需要在 Activity 没有start的时候也在运行。这个时候当你 start 一个 Activity 就没有办法在该 Activity 里面控制之前创建的 Thread。因此你便需要创建并启动一个 Service ，在 Service 里面创建、运行并控制该 Thread，这样便解决了该问题（因为任何 Activity 都可以控制同一 Service，而系统也只会创建一个对应 Service 的实例）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此你可以把 Service 想象成一种消息服务，而你可以在任何有 Context 的地方调用 Context.startService、Context.stopService、Context.bindService，Context.unbindService，来控制它，你也可以在 Service 里注册 BroadcastReceiver，在其他地方通过发送 broadcast 来控制它，当然这些都是 Thread 做不到的。&lt;/p&gt;
&lt;h1 id=&quot;Service的生命周期&quot;&gt;&lt;a href=&quot;#Service的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Service的生命周期&quot;&gt;&lt;/a&gt;Service的生命周期&lt;/h1&gt;&lt;p&gt;&lt;code&gt;onCreate``onStart``onDestroy``onBind&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被启动的服务的生命周期：如果一个Service被某个Activity 调用 Context.startService 方法启动，那么不管是否有Activity使用bindService绑定或unbindService解除绑定到该Service，该Service都在后台运行。如果一个Service被startService 方法多次启动，那么onCreate方法只会调用一次，onStart将会被调用多次（对应调用startService的次数），并且系统只会创建Service的一个实例（因此你应该知道只需要一次stopService调用）。该Service将会一直在后台运行，而不管对应程序的Activity是否在运行，直到被调用stopService，或自身的stopSelf方法。当然如果系统资源不足，android系统也可能结束服务。&lt;/li&gt;
&lt;li&gt;被绑定的服务的生命周期：如果一个Service被某个Activity 调用 Context.bindService 方法绑定启动，不管调用 bindService 调用几次，onCreate方法都只会调用一次，同时onStart方法始终不会被调用。当连接建立之后，Service将会一直运行，除非调用Context.unbindService 断开连接或者之前调用bindService 的 Context 不存在了（如Activity被finish的时候），系统将会自动停止Service，对应onDestroy将被调用。&lt;/li&gt;
&lt;li&gt;被启动又被绑定的服务的生命周期：如果一个Service又被启动又被绑定，则该Service将会一直在后台运行。并且不管如何调用，onCreate始终只会调用一次，对应startService调用多少次，Service的onStart便会调用多少次。调用unbindService将不会停止Service，而必须调用 stopService 或 Service的 stopSelf 来停止服务。&lt;/li&gt;
&lt;li&gt;当服务被停止时清除服务：当一个Service被终止（&lt;ul&gt;
&lt;li&gt;调用stopService； &lt;/li&gt;
&lt;li&gt;调用stopSelf；&lt;/li&gt;
&lt;li&gt;不再有绑定的连接（没有被启动））时，onDestroy方法将会被调用，在这里你应当做一些清除工作，如停止在Service中创建并运行的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;特别注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你应当知道在调用 bindService 绑定到Service的时候，你就应当保证在某处调用 unbindService 解除绑定（尽管 Activity 被 finish 的时候绑定会自动解除，并且Service会自动停止)  &lt;/li&gt;
&lt;li&gt;你应当注意 使用 startService 启动服务之后，一定要使用 stopService停止服务，不管你是否使用bindService；&lt;/li&gt;
&lt;li&gt;同时使用 startService 与 bindService 要注意到，Service 的终止，需要unbindService与stopService同时调用，才能终止 Service，不管 startService 与 bindService 的调用顺序，如果先调用 unbindService 此时服务不会自动终止，再调用 stopService 之后服务才会停止，如果先调用 stopService 此时服务也不会终止，而再调用 unbindService 或者 之前调用 bindService 的 Context 不存在了（如Activity 被 finish 的时候）之后服务才会自动停止；&lt;/li&gt;
&lt;li&gt;当在旋转手机屏幕的时候，当手机屏幕在“横”“竖”变换时，此时如果你的 Activity 如果会自动旋转的话，旋转其实是 Activity 的重新创建，因此旋转之前的使用 bindService 建立的连接便会断开（Context 不存在了），对应服务的生命周期与上述相同。&lt;/li&gt;
&lt;li&gt;在 sdk 2.0 及其以后的版本中，对应的 onStart 已经被否决变为了 onStartCommand，不过之前的 onStart 任然有效。这意味着，如果你开发的应用程序用的 sdk 为 2.0 及其以后的版本，那么你应当使用 onStartCommand 而不是 onStart。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Service-与-Thread-的区别&quot;&gt;&lt;a href=&quot;#Service-与-Thread-的区别&quot; class=&quot;headerlink&quot; title=&quot;Service 与 Thread 的区别&quot;&gt;&lt;/a&gt;Service 与 Thread 的区别&lt;/h1&gt;&lt;p&gt;很多时候，你可能会问，为什么要用 Service，而不用 Thread 呢，因为用 Thread 是很方便的，比起 Service 也方便多了，下面我详细的来解释一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016-04-10-希尔排序（改进的插入排序）Java实现</title>
    <link href="http://febsky.me/2016/04/10/2016-04-10-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E6%94%B9%E8%BF%9B%E7%9A%84%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%89Java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://febsky.me/2016/04/10/2016-04-10-希尔排序（改进的插入排序）Java实现/</id>
    <published>2016-04-10T02:14:41.000Z</published>
    <updated>2016-04-16T02:46:41.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;希尔排序：&lt;/strong&gt;将无序数组分割为若干个子序列，子序列不是逐段分割的，而是相隔特定的增量的子序列，对各个子序列进行插入排序；然后再选择一个更小的增量，再将数组分割为多个子序列进行排序……最后选择增量为1，即使用直接插入排序，使最终数组成为有序。   &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;增量的选择：&lt;/strong&gt;在每趟的排序过程都有一个增量，至少满足一个规则 增量关系 d[1] &amp;gt; d[2] &amp;gt; d[3] &amp;gt;..&amp;gt; d[t] = 1 (t趟排序)；根据增量序列的选取其时间复杂度也会有变化，这个不少论文进行了研究，在此处就不再深究；本文采用首选增量为n/2,以此递推，每次增量为原先的1/2，直到增量为1；&lt;/p&gt;
&lt;p&gt;如下图：&lt;br&gt;&lt;img src=&quot;http://7xripg.com1.z0.glb.clouddn.com/2016/04/10/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【参考文章】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/cjf_iceking/article/details/7951481&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;希尔排序&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;希尔排序：&lt;/strong&gt;将无序数组分割为若干个子序列，子序列不是逐段分割的，而是相隔特定的增量的子序列，对各个子序列进行插入排序；然后再选择一个更小的增量，再将数组分割为多个子序列进行排序……最后选择增量为1，即使用直接插入排序，使最终数组成为有序。   &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://febsky.me/categories/Java/"/>
    
      <category term="算法" scheme="http://febsky.me/categories/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://febsky.me/tags/Java/"/>
    
      <category term="算法" scheme="http://febsky.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>

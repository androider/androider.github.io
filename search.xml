<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MPAndroidChart画线形图]]></title>
      <url>http://febsky.me/2016/07/14/2016-07-14-MPAndroidChart%E7%94%BB%E7%BA%BF%E5%BD%A2%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>最近要做一个折线图，就搜到了 <a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">MPAndroidChart</a></p>
<p><strong>效果图如下</strong></p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/07/14/device-2016-07-14-153535.png" alt="MPAndroidChart绘制后的效果图"></p>
<p><strong>gradle 引入</strong></p>
<p><code>compile &#39;com.github.PhilJay:MPAndroidChart:v3.0.0-beta&#39;</code></p>
<p><strong>以下是Activity的代码</strong></p>
<p>布局文件很简单就包含一个<code>com.github.mikephil.charting.charts.LineChart</code>标签，不再给出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> febsky.me.testmpchart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.charts.LineChart;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.components.AxisBase;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.components.Legend;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.components.XAxis;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.components.YAxis;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.Entry;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.LineData;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.LineDataSet;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.formatter.AxisValueFormatter;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.highlight.Highlight;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.listener.OnChartValueSelectedListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiLineActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnChartValueSelectedListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LineChart mChart;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mColors = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">            Color.rgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),    <span class="comment">//红色</span></span><br><span class="line">            Color.rgb(<span class="number">2</span>, <span class="number">196</span>, <span class="number">244</span>),    <span class="comment">//淡蓝色</span></span><br><span class="line">            Color.rgb(<span class="number">2</span>, <span class="number">123</span>, <span class="number">243</span>)    <span class="comment">//深蓝</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">protected</span> String[] mMonths = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"1月"</span>, <span class="string">"2月"</span>, <span class="string">"3月"</span>, <span class="string">"4月"</span>, <span class="string">"5月"</span>, <span class="string">"6月"</span>, <span class="string">"7月"</span>, <span class="string">"8月"</span>, <span class="string">"9月"</span>, <span class="string">"10月"</span>, <span class="string">"11月"</span>, <span class="string">"12月"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_mulit_line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mChart = (LineChart) findViewById(R.id.chart);</span><br><span class="line">        mChart.setOnChartValueSelectedListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        initChartView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**--------------------------**/</span></span><br><span class="line">        <span class="comment">//设置模拟数据</span></span><br><span class="line">        ArrayList&lt;Entry&gt; yVals = <span class="keyword">new</span> ArrayList&lt;Entry&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            yVals.add(<span class="keyword">new</span> Entry(i, (<span class="keyword">float</span>) (Math.random() * <span class="number">50f</span>) + <span class="number">50f</span> * <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Entry&gt; yVals2 = <span class="keyword">new</span> ArrayList&lt;Entry&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            yVals2.add(<span class="keyword">new</span> Entry(i, (<span class="keyword">float</span>) (Math.random() * <span class="number">50f</span>) + <span class="number">50f</span> * <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addDataSet(yVals, <span class="string">"一居"</span>);</span><br><span class="line">        addDataSet(yVals2, <span class="string">"两居"</span>);</span><br><span class="line">        <span class="comment">/**--------------------------**/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//图标的下边的指示块  图例</span></span><br><span class="line">        Legend l = mChart.getLegend();</span><br><span class="line">        l.setForm(Legend.LegendForm.LINE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initChartView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mChart.setDrawGridBackground(<span class="keyword">false</span>);</span><br><span class="line">        mChart.setDescription(<span class="string">""</span>);    <span class="comment">//右下角说明文字</span></span><br><span class="line">        mChart.setDrawBorders(<span class="keyword">false</span>);    <span class="comment">//四周是不是有边框</span></span><br><span class="line"><span class="comment">//        mChart.setBorderColor();    //边框颜色，默认黑色？</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制轴上的坐标绘制在什么地方 上边下边左边右边</span></span><br><span class="line">        XAxis xAxis = mChart.getXAxis();</span><br><span class="line">        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);</span><br><span class="line">        xAxis.enableGridDashedLine(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">0f</span>);    <span class="comment">//给整成虚线</span></span><br><span class="line">        xAxis.setValueFormatter(<span class="keyword">new</span> AxisValueFormatter() &#123;    <span class="comment">//绘制横轴显示</span></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFormattedValue</span><span class="params">(<span class="keyword">float</span> value, AxisBase axis)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mMonths[(<span class="keyword">int</span>) value % mMonths.length];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDecimalDigits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        xAxis.setDrawLabels(<span class="keyword">true</span>);    <span class="comment">//是不是显示轴上的刻度</span></span><br><span class="line"></span><br><span class="line">        mChart.getAxisRight().setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        YAxis leftAxis = mChart.getAxisLeft();</span><br><span class="line">        leftAxis.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        leftAxis.enableGridDashedLine(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">0f</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// enable touch gestures</span></span><br><span class="line">        mChart.setTouchEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// if disabled, scaling can be done on x- and y-axis separately</span></span><br><span class="line">        mChart.setPinchZoom(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// enable scaling and dragging</span></span><br><span class="line">        mChart.setDragEnabled(<span class="keyword">true</span>);</span><br><span class="line">        mChart.setScaleEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个chart中包含一个Data对象，一个Data对象包含多个DataSet对象，</span></span><br><span class="line">        <span class="comment">// 每个DataSet是对应一条线上的所有点(相对于折线图来说)</span></span><br><span class="line">        mChart.setData(<span class="keyword">new</span> LineData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDataSet</span><span class="params">(ArrayList&lt;Entry&gt; entryList, String dataSetName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LineData data = mChart.getData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = data.getDataSetCount();</span><br><span class="line"></span><br><span class="line">            LineDataSet set = <span class="keyword">new</span> LineDataSet(entryList, dataSetName);</span><br><span class="line">            set.setLineWidth(<span class="number">1.5f</span>);</span><br><span class="line">            set.setCircleRadius(<span class="number">3.5f</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> color = mColors[count % mColors.length];</span><br><span class="line"></span><br><span class="line">            set.setColor(color);</span><br><span class="line">            set.setCircleColor(color);</span><br><span class="line">            set.setValueTextSize(<span class="number">10f</span>);</span><br><span class="line">            set.setDrawValues(<span class="keyword">false</span>);    <span class="comment">//节点不显示具体数值</span></span><br><span class="line">            set.setValueTextColor(color);</span><br><span class="line">            set.setDrawHighlightIndicators(<span class="keyword">false</span>);    <span class="comment">//取消横向辅助线</span></span><br><span class="line">            set.setDrawVerticalHighlightIndicator(<span class="keyword">false</span>);    <span class="comment">//取消纵向辅助线</span></span><br><span class="line"></span><br><span class="line">            data.addDataSet(set);</span><br><span class="line">            data.notifyDataChanged();</span><br><span class="line">            mChart.notifyDataSetChanged();</span><br><span class="line">            mChart.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onValueSelected</span><span class="params">(Entry e, Highlight h)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Q_M:"</span>, e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio中查看依赖库的本地存储路径]]></title>
      <url>http://febsky.me/2016/07/13/2016-07-13-AndroidStudio%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%B8%80%E4%B8%AAtask%E6%98%BE%E7%A4%BA%E5%87%BA%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>这两天由于公司网速慢，每次要下载v4  和 v7 包非常耗时。把gradle 改成离线模式就好多了。据说离线模式不再重新下载依赖。但是很好奇，AndroidStudio的gradle 引入的第三方库到底缓存到本地的什么位置了。</p>
<p>可以在app目录下的<code>build.gradle</code>的文件的最后添加：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;task showMeCache &#60;&#60; &#123;&#10;    configurations.compile.each &#123; println it &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在命令行切换到你的项目根目录下运行：</p>
<p><code>./gradlew showMeCache</code></p>
<p>这时候控制台就好打印出依赖库的缓存位置(下面是我显示的环信一个demo的所有的依赖库，包括lib引入，和在gradle的maven库引入的。)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">liuqiangs-MacBook-Pro:TestHx liuqiang$ ./gradlew showMeCache&#10;Incremental java compilation is an incubating feature.&#10;:app:showMeCache&#10;/Users/liuqiang/Workspace/meiliwu/TestHx/app/libs/hyphenatechat_3.1.3.jar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/appcompat-v7/23.4.0/appcompat-v7-23.4.0.aar&#10;/Users/liuqiang/.gradle/caches/modules-2/files-2.1/com.jakewharton/butterknife/7.0.1/d5d13ea991eab0252e3710e5df3d6a9d4b21d461/butterknife-7.0.1.jar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/design/23.4.0/design-23.4.0.aar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/animated-vector-drawable/23.4.0/animated-vector-drawable-23.4.0.aar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/support-v4/23.4.0/support-v4-23.4.0.aar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/support-vector-drawable/23.4.0/support-vector-drawable-23.4.0.aar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.aar&#10;/Users/liuqiang/Development/android-sdk-macosx/extras/android/m2repository/com/android/support/support-annotations/23.4.0/support-annotations-23.4.0.jar</span><br></pre></td></tr></table></figure>
<p>我们可以看到，v4 和 v7的支持包，是下载下来放到你本地Android sdk的extras 目录下的，所以，我猜测，可以直接从别人电脑拷贝这个文件夹的内容，然后使用gradle的离线模式编译。这样就不会再网速差的情况下去下载 v4 和 v7  。这种想法仅仅是用于 v4和v7 其他的第三方依赖库可以看到是放到 ~/.gradle/cache 目录下的。</p>
<p><strong>【参考文献】</strong></p>
<p><a href="http://blog.csdn.net/asd6340370/article/details/51829847" target="_blank" rel="external">在AndroidStudio中如何利用一个task显示出依赖库的本地存储路径
</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio加快编译的方法]]></title>
      <url>http://febsky.me/2016/07/12/2016-07-12-AndroidStudio%E5%8A%A0%E5%BF%AB%E7%BC%96%E8%AF%91%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Gradle 给我们的Android开发带来很大的便利，同事Gradle也是很灵活的，配置起来很’方便’，而且我们的开发工具AndroidStudio也是基于Gradle的，但是随着我们项目越来越大，依赖也越来越多，导致了编译起来非常慢。</p>
<a id="more"></a>
<p>在网上搜索的时候我们能找到很多优化AndroidStudio Gradle编译的方法，例如：</p>
<ol>
<li><p>配置 <code>gradle.properties</code> 在文件中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.daemon = true&#10;org.gradle.parallel = true&#10;org.gradle.configureondemand=true&#10;org.gradle.jvmargs=-Xms256m -Xmx1024m</span><br></pre></td></tr></table></figure>
</li>
<li><p>把 gradle 设置成离线模式  <code>offline work</code></p>
<p> 离线模式下 ，应该不能修改任何 build.gradle 文件。也就是说如果gradle 在Androidstudio中提示你要 <strong><code>sync</code></strong> 时，必须要联网。</p>
</li>
<li><p>set up large vm heap size: 2G  （这个是别人说的我也不知道怎么设置）</p>
</li>
</ol>
<hr>
<h1 id="Gradle-为什么慢？"><a href="#Gradle-为什么慢？" class="headerlink" title="Gradle 为什么慢？"></a>Gradle 为什么慢？</h1><ul>
<li>有些task运行起来就很慢</li>
<li>设置了multiDexEnabled</li>
<li>依赖库太多，下载慢</li>
</ul>
<h1 id="如何知道自己项目中是由那个原因引起的"><a href="#如何知道自己项目中是由那个原因引起的" class="headerlink" title="如何知道自己项目中是由那个原因引起的"></a>如何知道自己项目中是由那个原因引起的</h1><p>可以在gradle 运行的时候给每个task添加一个参数  <code>--profile</code> ,用了监视task的运行，并打印log  最终log以html的方式打印在你的项目下的 <code>build/reports/profile/</code> 中，根据不同时间命名的。</p>
<p>可以配置到AndroidStudio中，或者直接在命令行运行的时候添加<code>./gradlew clean buildAll --profile</code></p>
<p>其他优化办法就是就代码依赖库进行删减了，没什么技术含量，还有就是选择编译。</p>
<p><strong>【参考文章】</strong></p>
<ul>
<li><a href="http://www.liaohuqiu.net/posts/speed-up-your-build/" target="_blank" rel="external">http://www.liaohuqiu.net/posts/speed-up-your-build/</a></li>
<li><a href="http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/" target="_blank" rel="external">http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo添加站内搜索]]></title>
      <url>http://febsky.me/2016/07/11/2016-07-11-Hexo%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h1 id="Google-和-百度提供的站内搜索"><a href="#Google-和-百度提供的站内搜索" class="headerlink" title="Google 和 百度提供的站内搜索"></a>Google 和 百度提供的站内搜索</h1><p><strong>可行性：</strong>Google 呵呵，你懂。百度 据说github拒绝百度的爬虫，如果你的网站部署在github首页上，可能不能成功。</p>
<p><strong>用法：</strong> 在google的输入框中输入  <code>site:fesky.me</code></p>
<a id="more"></a>
<h1 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h1><p>这个据说是国外的一个很屌的做站内搜索的服务商，据说B轮融资。融了很多刀、</p>
<p><strong>官方网址：</strong> <a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a></p>
<p><strong>可行性 ：</strong> 据说官方给了30天的免费试用，试用期结束就降到普通版，我感觉我就是要搜个关键字也就几百篇文章完全没问题，可是我的过了试用期却不能用了，不知道为啥 时间为2016年7月。而且官网让我给他发邮局联系，你懂我的英语水平根本搞不明白他说了些啥。</p>
<h1 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h1><p>从 Algolia 管理界面和文档上来看不会比 Swiftype 差，可留作备选。</p>
<p><strong>官方网址</strong> <a href="https://www.algolia.com/" target="_blank" rel="external">Algolia</a></p>
<h1 id="序列化站点内容作为数据源，然后自己写查询方法。"><a href="#序列化站点内容作为数据源，然后自己写查询方法。" class="headerlink" title="序列化站点内容作为数据源，然后自己写查询方法。"></a>序列化站点内容作为数据源，然后自己写查询方法。</h1><p>好像有个Hexo的插件 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a></p>
<p><strong>作者写的文档：</strong> <a href="http://hahack.com/codes/local-search-engine-for-hexo/#stq=&amp;stp=0" target="_blank" rel="external">地址</a> </p>
<p>目前我用的这种方式，哈哈，我给这自己写了个通用版的</p>
<ul>
<li><p>首先安装这个插件,主要为了生成search.xml</p>
<p> <code>$ npm install --save hexo-generator-search</code></p>
</li>
<li><p>配置hexo根目录的<code>_confing.yml</code>文件，在文件最后添加,具体参数代表含义看文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search:&#10;  path: search.xml&#10;  field: post</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在<code>source</code>文件夹下面创建一个html文件我的如下,我主要为了偷懒不去修改theme中的模板了。也可以按照作者的方式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>搜索页面<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/jquery-latest.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">path, search_id, content_id</span>) </span>&#123;</span><br><span class="line"><span class="pi">            'use strict'</span>;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: path,</span><br><span class="line">                dataType: <span class="string">"xml"</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">xmlResponse</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// get the contents from search data</span></span><br><span class="line">                    <span class="keyword">var</span> datas = $(<span class="string">"entry"</span>, xmlResponse).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            title: $(<span class="string">"title"</span>, <span class="keyword">this</span>).text(),</span><br><span class="line">                            content: $(<span class="string">"content"</span>, <span class="keyword">this</span>).text(),</span><br><span class="line">                            url: $(<span class="string">"url"</span>, <span class="keyword">this</span>).text()</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;).get();</span><br><span class="line">                    <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</span><br><span class="line">                    <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</span><br><span class="line">                    $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> str = <span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;</span><br><span class="line">                        <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</span><br><span class="line">                        $resultContent.innerHTML = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// perform local searching</span></span><br><span class="line">                        datas.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">var</span> content_index = [];</span><br><span class="line">                            <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</span><br><span class="line">                            <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">                            <span class="keyword">var</span> data_url = data.url;</span><br><span class="line">                            <span class="keyword">var</span> index_title = -<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">var</span> index_content = -<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">var</span> first_occur = -<span class="number">1</span>;</span><br><span class="line">                            <span class="comment">// only match artiles with not empty titles and contents</span></span><br><span class="line">                            <span class="keyword">if</span> (data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</span><br><span class="line">                                keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword, i</span>) </span>&#123;</span><br><span class="line">                                    index_title = data_title.indexOf(keyword);</span><br><span class="line">                                    index_content = data_content.indexOf(keyword);</span><br><span class="line">                                    <span class="keyword">if</span> (index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        isMatch = <span class="literal">false</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                            index_content = <span class="number">0</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                                            first_occur = index_content;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// show search results</span></span><br><span class="line">                            <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">                                str += <span class="string">"&lt;li&gt;&lt;a href='"</span> + data_url + <span class="string">"' class='search-result-title'&gt;"</span> + data_title + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">                                <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>);</span><br><span class="line">                                <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="comment">// cut out 100 characters</span></span><br><span class="line">                                    <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</span><br><span class="line">                                    <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        start = <span class="number">0</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span><br><span class="line">                                        end = <span class="number">100</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (end &gt; content.length) &#123;</span><br><span class="line">                                        end = content.length;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">var</span> match_content = content.substr(start, end);</span><br><span class="line">                                    <span class="comment">// highlight all keywords</span></span><br><span class="line">                                    keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">                                        <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</span><br><span class="line">                                        match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span> + keyword + <span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line">                                    &#125;);</span><br><span class="line"></span><br><span class="line">                                    str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content + <span class="string">"...&lt;/p&gt;"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                str += <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        str += <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line">                        $resultContent.innerHTML = str;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">    	<span class="comment">//注意这个地方要改成自己的博客地址</span></span><br><span class="line">        searchFunc(<span class="string">"http://febsky.me/search.xml"</span>, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"site_search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"local-search-input"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">results</span>=<span class="value">"0"</span> <span class="attribute">placeholder</span>=<span class="value">"search my blog..."</span></span><br><span class="line">           <span class="attribute">class</span>=<span class="value">"form-control"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后一步很重要，因为我们用了偷懒的方式，所以必须弥补</p>
<p>在根目录的<code>_config.yml</code> 中修改 skip_render 配置，意思是说不让模板来渲染，我们自己为这个html指定css样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render:&#10;    - search.html</span><br></pre></td></tr></table></figure>
<p>这样运行 <code>hexo d -g</code> 之后，就可以用我们自己的域名加<code>/search.html</code>的方式打开搜索界面了。例如我的是<code>http://febsky.me/search.html</code> 很丑是吧，自己写css吧，还好我以前做web。</p>
</li>
</ul>
<p> 至此就完成了本地检索引擎的实现，最后的工作就是修改样式，让检索页面更美观。在 searchFunc 函数中，作者已经为几个关键的页面元素设定了 css 名：</p>
<blockquote>
<p>ul.search-result-list - 搜索结果列表的样式名；<br>a.search-result-title - 搜索结果文章标题的样式名；<br>p.search-result - 搜索结果每篇文章的预览段落的样式名；<br>em.search-keyword - 搜索结果每篇文章的预览段落中匹配关键词的样式名。</p>
</blockquote>
<h1 id="最后还有一个叫-lunrjs的东西"><a href="#最后还有一个叫-lunrjs的东西" class="headerlink" title="最后还有一个叫 lunrjs的东西"></a>最后还有一个叫 lunrjs的东西</h1><p><strong>官网：</strong><a href="http://lunrjs.com/" target="_blank" rel="external">http://lunrjs.com/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发我用到的Chrome插件]]></title>
      <url>http://febsky.me/2016/07/05/2016-07-05-Android%E5%BC%80%E5%8F%91%E6%88%91%E7%94%A8%E5%88%B0%E7%9A%84Chrome%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="Chrome调试WebView"><a href="#Chrome调试WebView" class="headerlink" title="Chrome调试WebView"></a>Chrome调试WebView</h1><p><code>前提一定要开启手机USB调试模式</code>如果千万不要丢了U</p>
<p>在电脑上打开Chrome浏览器的菜单– 更多工具 – 检查设备（Chromemenu &gt; More tools &gt; Inspect Devices），或者直接在浏览器地址栏输入chrome://inspect 或者about:inspect</p>
<p>然后自己瞎鼓捣就行了。</p>
<h1 id="Chrome（电脑端）操作Android真机（解放双手）"><a href="#Chrome（电脑端）操作Android真机（解放双手）" class="headerlink" title="Chrome（电脑端）操作Android真机（解放双手）"></a>Chrome（电脑端）操作Android真机（解放双手）</h1><ol>
<li><p>Chrome有个叫做 <code>Vysor</code> 的插件，可以直接在Chrome应用市场搜索。<br>可惜的是这个的免费版，画面太不清晰。</p>
</li>
<li><p>其实还有一个不是Chrome插件的东西，是Google开发的亲儿子，（简称ASM）是一款监视手机或者模拟器屏幕的工具，主要和上面相比分辨率高   <a href="https://code.google.com/archive/p/android-screen-monitor/" target="_blank" rel="external">android-screen-monitor</a>  这个托管在GoogleCode上面，要科学上网！ 这个和上面的相比仅仅有监视的功能不能操作。</p>
</li>
</ol>
<p>配置方式：解压后将 <code>asm.jar</code>拷贝到本机 <code>android-sdk\platform-tools</code>目录下。然后命令行运行 <code>java -jar asm.jar</code> 如果不copy到 platform-tools目录下，可能要配置Android sdk的环境变量。切记。</p>
<h1 id="Facebook出了一个叫做Stetho东西"><a href="#Facebook出了一个叫做Stetho东西" class="headerlink" title="Facebook出了一个叫做Stetho东西"></a>Facebook出了一个叫做<a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a>东西</h1><p><strong>作用：</strong> 他能在Chrome控制台中查看app的网络请求，数据抓包，和app的数据库文件等等。但是要在app中引入库，具体的操作看官网吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android逆向工程用到的工具]]></title>
      <url>http://febsky.me/2016/07/05/2016-07-05-Android%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="第一套组合"><a href="#第一套组合" class="headerlink" title="第一套组合"></a>第一套组合</h1><p><a href="https://github.com/iBotPeaches/Apktool" target="_blank" rel="external">Apktool</a> + <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a> + <a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="external">jd-gui</a></p>
<p>可惜的是apktool好像后来不再支持调试Smali文件，jd-gui 作者从 2015 年开始就停止了维护.</p>
<blockquote>
<p>但是AndroidStudio有个调试Smali的插件  <a href="SmaliIdea：https://github.com/JesusFreke/smali/wiki/smalidea">地址 https://github.com/JesusFreke/smali/wiki/smalidea</a><br>据说jadx 不错，可以取代 jd-gui <a href="https://github.com/skylot/jadx" target="_blank" rel="external">地址 https://github.com/skylot/jadx</a></p>
</blockquote>
<h1 id="Google-出的几个逆向分析工具"><a href="#Google-出的几个逆向分析工具" class="headerlink" title="Google 出的几个逆向分析工具"></a>Google 出的几个逆向分析工具</h1><h2 id="1-enjarify"><a href="#1-enjarify" class="headerlink" title="1. enjarify  "></a>1. enjarify  </h2><p><a href="https://github.com/google/enjarify" target="_blank" rel="external">https://github.com/google/enjarify</a><br>功能：可直接将 apk 文件还原成为 jar 文件，也可以和 dex2jar 一样，直接操作某个dex</p>
<p>这是 Google 出品的一个逆向分析工具，从反编译成 jar 包的流程来说，要比 dex2jar 方便得多。下载完工具到本地并配置好 Python 环境后，需要修改 enjarify 目录下的 enjarify.bat 文件，将 python3 改为 python</p>
<h2 id="2-Procyon"><a href="#2-Procyon" class="headerlink" title="2. Procyon"></a>2. Procyon</h2><p><a href="https://bitbucket.org/mstrobel/procyon" target="_blank" rel="external">https://bitbucket.org/mstrobel/procyon</a><br>功能：将反编译得到 jar 包还原成 java 文件，同时能够更强的还原代码的逻辑结构 </p>
<h2 id="3-ClassyShark"><a href="#3-ClassyShark" class="headerlink" title="3. ClassyShark"></a>3. ClassyShark</h2><p><a href="https://github.com/google/android-classyshark" target="_blank" rel="external">https://github.com/google/android-classyshark</a></p>
<p>功能：可直接浏览 Apk，支持对.dex, .aar, .so，.apk, .jar, .class等文件的操作。</p>
<blockquote>
<p>java -jar ClassyShark.jar -open XXX.apk</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python使用虚拟环境]]></title>
      <url>http://febsky.me/2016/06/17/2016-06-17-Python%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>Python的虚拟环境可以使一个Python程序拥有独立的库library和解释器interpreter，而不用与其他Python程序共享统一个library和interpreter。虚拟环境的好处是避免了不同Python程序间的互相影响（共同使用global library 和 interpreter），例如程序A需要某个库的1.0版本，而程序B需要同样这个库的2.0版本，如果程序B执行则A就不能执行了。</p>
<ol>
<li>安装virtualenv：<br><code>pip install virtualenv</code></li>
<li><p>创建虚拟环境</p>
<p><code>virtualenv venv</code><br> venv是新创建的虚拟环境的名称。 同时会创建一个与虚拟环境名称相同的文件夹venv, 里面存储了一个独立的Python执行环境。</p>
</li>
<li><p>进入虚拟环境</p>
<p> <code>source venv/bin/activate</code><br> 进入虚拟环境后，命令行的提示符会加入虚拟环境的名称，例如：(venv)user@machine:~$</p>
</li>
<li>退出虚拟环境<br> <code>deactivate</code></li>
<li>删除虚拟环境<br> <code>rm -r venv</code><br> 直接删除虚拟环境所在的文件夹venv就删除了我们创建的venv虚拟环境。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python常用的库]]></title>
      <url>http://febsky.me/2016/06/17/2016-06-17-Python%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/</url>
      <content type="html"><![CDATA[<ol>
<li>网络请求库 requests <a href="http://cn.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">一份中文文档</a></li>
<li>HTML解析  pyquery 或者 beautifulsoup</li>
<li>orm库 sqlalchemy <a href="http://gashero.yeax.com/?p=6" target="_blank" rel="external">一份中文文档</a></li>
<li>种子解析libtorrent</li>
<li>web Flask,flask-httpauth</li>
</ol>
<p>【参考】<br><a href="http://www.cnblogs.com/vovlie/p/4182814.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">用Flask设计带认证的Restfull</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python日期时间的处理]]></title>
      <url>http://febsky.me/2016/06/14/2016-06-14-Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="首先导入时间日期模块"><a href="#首先导入时间日期模块" class="headerlink" title="首先导入时间日期模块"></a>首先导入时间日期模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import datetime&#10;import time</span><br></pre></td></tr></table></figure>
<h3 id="string转datetime"><a href="#string转datetime" class="headerlink" title="string转datetime"></a>string转datetime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = &#39;2012-11-19&#39;&#10;&#10;date_time = datetime.datetime.strptime(str,&#39;%Y-%m-%d&#39;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="datetime转string"><a href="#datetime转string" class="headerlink" title="datetime转string"></a>datetime转string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_time = datetime.datetime(2012,11,19,0,0)&#10;&#10;date_time.strftime(&#39;%Y-%m-%d&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="datetime-获取date"><a href="#datetime-获取date" class="headerlink" title="datetime 获取date"></a>datetime 获取date</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_time.date()</span><br></pre></td></tr></table></figure>
<h3 id="datetime转时间戳"><a href="#datetime转时间戳" class="headerlink" title="datetime转时间戳"></a>datetime转时间戳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time_time = time.mktime(date_time.timetuple())&#10;print time_time</span><br></pre></td></tr></table></figure>
<h3 id="时间戳转string"><a href="#时间戳转string" class="headerlink" title="时间戳转string"></a>时间戳转string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time_time))</span><br></pre></td></tr></table></figure>
<h3 id="time（时间戳）与datetime之间的互相转换"><a href="#time（时间戳）与datetime之间的互相转换" class="headerlink" title="time（时间戳）与datetime之间的互相转换"></a>time（时间戳）与datetime之间的互相转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#27880;&#37322; time.time() &#36820;&#22238;&#30340;&#26159;&#27627;&#31186;&#20540;&#10;datetime.datetime.fromtimestamp(time.time())</span><br></pre></td></tr></table></figure>
<h3 id="date转datetime"><a href="#date转datetime" class="headerlink" title="date转datetime"></a>date转datetime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date = datetime.date.today()&#10;&#10;print date    ##datetime.date(2012,11,19)&#10;&#10;datetime.datetime.strptime(str(date),&#39;%Y-%m-%d&#39;) #&#23558;date&#36716;&#25442;&#20026;str&#65292;&#22312;&#30001;str&#36716;&#25442;&#20026;datetime&#10;&#10;datetime.datetime(2012,11,19,0,0)</span><br></pre></td></tr></table></figure>
<hr>
<p>##time模块</p>
<p>time模块提供各种操作时间的函数，一般有两种表示时间的方式:</p>
<ul>
<li>第一种是时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的</li>
<li>第二种以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同</li>
<li>gmtime()与mktime（）可以将两种时间表示方法自由转换</li>
</ul>
<p>【参考文献】</p>
<ul>
<li><a href="http://iam42.iteye.com/blog/1922875" target="_blank" rel="external">time 和 datetime之间的关系</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发中图文并排插件]]></title>
      <url>http://febsky.me/2016/06/13/2016-06-13-Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%96%87%E5%B9%B6%E6%8E%92%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="https://github.com/sufficientlysecure/html-textview" target="_blank" rel="external">html-textview</a></li>
<li><a href="https://github.com/zzhoujay/RichText" target="_blank" rel="external">RichText</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo主题目录介绍]]></title>
      <url>http://febsky.me/2016/06/03/2016-06-03-Hexo%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="分析主题目录"><a href="#分析主题目录" class="headerlink" title="分析主题目录"></a>分析主题目录</h1><p><strong>存放所有主题的文件目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes&#10;    |--my_theme</span><br></pre></td></tr></table></figure>
<p><strong>某个特定主题目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_theme&#10;    |-- _config.yml&#10;    |-- languages/&#10;    |-- layout/&#10;    &#9;|-- _partial/&#10;&#9;&#9;|-- _widget/&#10;&#9;&#9;|-- archive.ejs *&#10;&#9;&#9;|-- category.ejs *&#10;&#9;&#9;|-- index.ejs *&#10;&#9;&#9;|-- layout.ejs *&#10;&#9;&#9;|-- page.ejs *&#10;&#9;&#9;|-- post.ejs *&#10;&#9;&#9;|-- tag.ejs *&#10;    |-- LICENSE&#10;    |-- README.md&#10;    |-- source/</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>layout/</code><br>以上打<code>*</code>的文件表示，每个主题至少需要这些文件。所有的主题都是用layout.ejs作为默认的布局文件，你也可以自定义布局文件。</p>
<ul>
<li><code>_widget/</code>： 小工具目录，在my_theme主题中对右边栏的控制。</li>
<li><code>_partial/</code>： 组件目录，给博客添加统计、评论等功能</li>
</ul>
</li>
<li><p><code>source/</code><br>主题资源目录，主题用到的CSS、Javascript等文件需要放在这个目录中，会被编译到hexo的public目录中。</p>
</li>
<li><p><code>_config.yml</code>  </p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu:        #&#31449;&#28857;&#23548;&#33322;&#26639; &#65288;&#26631;&#31614;: &#36335;&#24452;&#65289;&#10;  &#39318;&#39029;: /&#10;  &#24402;&#26723;: /archives&#10;  &#20851;&#20110;: /about&#10;&#10;widgets:        #&#23567;&#24037;&#20855; &#21363;&#31449;&#28857;&#30340;&#21491;&#36793;&#19968;&#26639; &#39029;&#38754;&#20250;&#25353;&#36825;&#37324;&#30340;&#39034;&#24207;&#25490;&#21015;&#10;- recent_posts&#10;- category&#10;- weibo_show&#10;- blogroll&#10;&#10;excerpt_link: &#38405;&#35835;&#20840;&#25991;   #&#40664;&#35748;&#26159;Read more &#21487;&#20197;&#25913;&#25104;&#20013;&#25991;&#10;&#10;twitter:    #&#22681;&#20869;&#24456;&#23569;&#29992;&#27492;&#40479;&#65292;so&#21487;&#20197;&#21024;&#25481;&#10;&#10;addthis:    #&#36825;&#20010;&#20063;&#21487;&#20197;&#21024;&#25481;&#10;  enable: true&#10;&#10;fancybox: true&#10;&#10;baidu_analytics: true    #&#30334;&#24230;&#32479;&#35745;&#65292;&#22825;&#26397;&#36824;&#26159;&#36825;&#20010;&#22909;&#20351;&#65292;&#27809;&#21150;&#27861;&#28404;&#10;&#10;google_analytics:        #&#40664;&#35748;&#32479;&#35745;&#65292;&#22810;&#20040;&#24076;&#26395;&#29992;&#36825;&#20010;&#32479;&#35745;&#65292;&#21487;&#24796;&#10;&#10;rss: /atom.xml        #RSS&#10;&#10;comment_provider:</span><br></pre></td></tr></table></figure>
<ol>
<li><p>每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>
<ul>
<li>index 首页</li>
<li>post 文章</li>
<li>page 分页</li>
<li>archive 归档</li>
<li>category 分类归档</li>
<li>tag 标签归档</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下的某些命令]]></title>
      <url>http://febsky.me/2016/05/29/2016-05-29-Mac%E4%B8%8B%E7%9A%84%E6%9F%90%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ol>
<li><code>open .</code> 单开finder为当前目录</li>
</ol>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 开发中的小技巧]]></title>
      <url>http://febsky.me/2016/05/28/2016-05-16-Android%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="ListView小技巧"><a href="#ListView小技巧" class="headerlink" title="ListView小技巧"></a>ListView小技巧</h1><ul>
<li>可以设置空白站位View <code>listView.setEmptyView(view);</code>非常有用</li>
<li>缓慢滚动到某个位置<code>listView.smoothScrollToPosition();</code>当然还有其他的滚动方法</li>
<li>在使用<code>adapter.notifyDataSetChanged()</code>方法的时候，必须保证传进adapter的数据List是同一个对象，否则无法实现效果（我就犯过这个错）</li>
</ul>
<a id="more"></a>
<h1 id="滚动和位置"><a href="#滚动和位置" class="headerlink" title="滚动和位置"></a>滚动和位置</h1><ul>
<li><code>scrollTo</code>方法其实滚动的是内容，比如说TextView中滚动的是文字。比如：<code>textView.scrollTo(0, 10);</code>意思是让TextView中的内容，的（0，10）坐标去和，TextView左上角对齐。</li>
<li>滑动多少算是滑动了<code>ViewConfiguration.get(this).getScaledTouchSlop();</code></li>
<li>所谓的滑动，是相对于参考系的运动</li>
<li><code>getX</code>,<code>getY</code> 获取的是相对于父view的相对位置</li>
<li><code>getRawX</code>,<code>getRawY</code>获取的是点击位置距离屏幕左边和上边的距离</li>
<li>Scroller类可以实现平滑的移动效果</li>
<li>实现拖拽效果<code>DrawerLayout</code>,<code>SlidingPaneLayout</code>,<code>ViewDragHelper</code>,尤其是最后一个。非常diao~  <ul>
<li>SlidingPaneLayout 效果是中间的内容块向右移动，以显示出左边的内容。只支持左侧显示  </li>
<li>DrawerLayout 支持左滑右滑 效果是左右侧的内容盖住中间的内容</li>
</ul>
</li>
</ul>
<h1 id="扩大View的触摸和点击响应范围"><a href="#扩大View的触摸和点击响应范围" class="headerlink" title="扩大View的触摸和点击响应范围"></a>扩大View的触摸和点击响应范围</h1><p><code>setTouchDelegate()</code>方法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android SQLite存储自定义对象]]></title>
      <url>http://febsky.me/2016/05/23/2016-05-23-AndroidSQLite%E5%AD%98%E5%82%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="Android-SQLite存储自定义对象"><a href="#Android-SQLite存储自定义对象" class="headerlink" title="Android SQLite存储自定义对象"></a>Android SQLite存储自定义对象</h1><a id="more"></a>
<p><strong>1. 首先给出JavaBean</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Student implements Serializable &#123;&#10;&#10;&#9;/**&#10;&#9; * &#10;&#9; */&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#9;String name;&#10;&#9;int age;&#10;&#10;&#9;public Student(String name, int age) &#123;&#10;&#9;&#9;super();&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.age = age;&#10;&#9;&#125;&#10;&#10;&#9;public String getName() &#123;&#10;&#9;&#9;return name;&#10;&#9;&#125;&#10;&#10;&#9;public void setName(String name) &#123;&#10;&#9;&#9;this.name = name;&#10;&#9;&#125;&#10;&#10;&#9;public int getAge() &#123;&#10;&#9;&#9;return age;&#10;&#9;&#125;&#10;&#10;&#9;public void setAge(int age) &#123;&#10;&#9;&#9;this.age = age;&#10;&#9;&#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. 然后给出Dbhelper</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/***&#10; * &#21333;&#20363;&#27169;&#24335;&#23454;&#29616;&#25968;&#25454;&#24211;&#36830;&#25509;&#10; * @author bobo&#10; *&#10; */&#10;public class Dbhelper extends SQLiteOpenHelper &#123;&#10;&#10;&#9;private static Dbhelper dbhelper = null;&#10;&#10;&#9;public static Dbhelper getInstens(Context context) &#123;&#10;&#9;&#9;if (dbhelper == null) &#123;&#10;&#9;&#9;&#9;dbhelper = new Dbhelper(context);&#10;&#9;&#9;&#125;&#10;&#9;&#9;return dbhelper;&#10;&#9;&#125;&#10;&#10;&#9;private Dbhelper(Context context) &#123;&#10;&#9;&#9;super(context, &#34;datebase.db&#34;, null, 1);&#10;&#9;&#9;// TODO Auto-generated constructor stub&#10;&#9;&#125;&#10;&#10;&#9;@Override&#10;&#9;public void onCreate(SQLiteDatabase db) &#123;&#10;&#9;&#9;// TODO Auto-generated method stub&#10;&#9;&#9;&#10;&#9;&#9; //&#36825;&#24352;&#34920;&#37319;&#29992;&#20108;&#36827;&#21046;&#25991;&#20214;&#23384;&#20648;&#23545;&#35937;&#27880;&#24847;&#31532;&#20108;&#20010;&#23383;&#27573;&#25105;&#20204;&#23558;&#23545;&#35937;&#23384;&#21462;&#22312;&#36825;&#37324;&#38754;&#10;&#9;&#9;String sql_class_table=&#34;create table if not exists classtable(_id integer primary key autoincrement,classtabledata text)&#34;;&#10;&#9;&#9;db.execSQL(sql_class_table);&#10;&#9;&#125;&#10;&#10;&#9;@Override&#10;&#9;public void onUpgrade(SQLiteDatabase db, int oldversion, int newversion) &#123;&#10;&#9;&#9;// TODO Auto-generated method stub&#10;&#10;&#9;&#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 最后是一个数据库操作类Dao 或者 叫service</strong></p>
<p>最后是一个数据库操作类，最主要的方法在这个类里面，通过二进制流把对象转换为对象流然后取出二进制存取进数据库，最后取的时候也一样。首先取出二进制对象，然后通过流还原对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10; * &#25968;&#25454;&#24211;&#25805;&#20316;&#10; * @author bobo&#10; *&#10; */&#10;public class StudentServcie &#123;&#10;&#9;Context context;&#10;&#10;&#9;public StudentServcie(Context context) &#123;&#10;&#9;&#9;// TODO Auto-generated constructor stub&#10;&#9;&#9;this.context = context;&#10;&#9;&#125;&#10;&#10;&#9;/**&#10;&#9; * &#20445;&#23384;&#10;&#9; * @param student&#10;&#9; */&#10;&#9;public void saveObject(Student student) &#123;&#10;&#9;&#9;ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();&#10;&#9;&#9;try &#123;&#10;&#9;&#9;&#9;ObjectOutputStream objectOutputStream = new ObjectOutputStream(arrayOutputStream);&#10;&#9;&#9;&#9;objectOutputStream.writeObject(student);&#10;&#9;&#9;&#9;objectOutputStream.flush();&#10;&#9;&#9;&#9;byte data[] = arrayOutputStream.toByteArray();&#10;&#9;&#9;&#9;objectOutputStream.close();&#10;&#9;&#9;&#9;arrayOutputStream.close();&#10;&#9;&#9;&#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&#10;&#9;&#9;&#9;SQLiteDatabase database = dbhelper.getWritableDatabase();&#10;&#9;&#9;&#9;database.execSQL(&#34;insert into classtable (classtabledata) values(?)&#34;, new Object[] &#123; data &#125;);&#10;&#9;&#9;&#9;database.close();&#10;&#9;&#9;&#125; catch (Exception e) &#123;&#10;&#9;&#9;&#9;// TODO Auto-generated catch block&#10;&#9;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#10;&#9;public Student getObject() &#123;&#10;&#9;&#9;Student student = null;&#10;&#9;&#9;Dbhelper dbhelper = Dbhelper.getInstens(context);&#10;&#9;&#9;SQLiteDatabase database = dbhelper.getReadableDatabase();&#10;&#9;&#9;Cursor cursor = database.rawQuery(&#34;select * from classtable&#34;, null);&#10;&#9;&#9;if (cursor != null) &#123;&#10;&#9;&#9;&#9;while (cursor.moveToNext()) &#123;&#10;&#9;&#9;&#9;&#9;byte data[] = cursor.getBlob(cursor.getColumnIndex(&#34;classtabledata&#34;));&#10;&#9;&#9;&#9;&#9;ByteArrayInputStream arrayInputStream = new ByteArrayInputStream(data);&#10;&#9;&#9;&#9;&#9;try &#123;&#10;&#9;&#9;&#9;&#9;&#9;ObjectInputStream inputStream = new ObjectInputStream(arrayInputStream);&#10;&#9;&#9;&#9;&#9;&#9;student = (Student) inputStream.readObject();&#10;&#9;&#9;&#9;&#9;&#9;inputStream.close();&#10;&#9;&#9;&#9;&#9;&#9;arrayInputStream.close();&#10;&#9;&#9;&#9;&#9;&#9;break;//&#36825;&#37324;&#20026;&#20102;&#27979;&#35797;&#23601;&#21462;&#19968;&#20010;&#25968;&#25454;&#10;&#9;&#9;&#9;&#9;&#125; catch (Exception e) &#123;&#10;&#9;&#9;&#9;&#9;&#9;// TODO Auto-generated catch block&#10;&#9;&#9;&#9;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;&#9;&#9;&#125;&#10;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#9;&#9;return student;&#10;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4. 最后是测试代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;&#10;&#9;StudentServcie servcie;&#10;&#10;&#9;@Override&#10;&#9;protected void onCreate(Bundle savedInstanceState) &#123;&#10;&#9;&#9;super.onCreate(savedInstanceState);&#10;&#9;&#9;setContentView(R.layout.activity_main);&#10;&#9;&#9;servcie = new StudentServcie(this);&#10;&#9;&#125;&#10;&#9;public void onclick(View view) &#123;&#10;&#9;&#9;switch (view.getId()) &#123;&#10;&#9;&#9;case R.id.save:&#10;&#9;&#9;&#9;servcie.saveObject(new Student(&#34;&#26446;&#38647;&#34;, 20));&#10;&#9;&#9;&#9;Toast.makeText(this, &#34;&#23384;&#21462;&#23436;&#25104;&#34;, 0).show();&#10;&#9;&#9;&#9;break;&#10;&#9;&#9;case R.id.load:&#10;&#9;&#9;&#9;Student student =&#9;servcie.getObject();&#10;&#9;&#9;&#9;if(student!=null)&#10;&#9;&#9;&#9;Toast.makeText(this, student.getName()+student.getAge(), 0).show();&#10;&#9;&#9;&#9;break;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>同样我们也可以对list，或者map对象进行保存，方法跟上面的一样，但是map或者list里面的对象必须序列化。</p>
<p><strong>【参考文献】</strong></p>
<p>这是转载 <a href="http://blog.csdn.net/codebob/article/details/37091003" target="_blank" rel="external">原文地址点这里</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我认为不错的几个Hexo主题]]></title>
      <url>http://febsky.me/2016/05/15/2016-05-15-%E6%88%91%E8%AE%A4%E4%B8%BA%E4%B8%8D%E9%94%99%E7%9A%84%E5%87%A0%E4%B8%AAHexo%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>我认为几个不错的主题</p>
<ol>
<li><a href="https://github.com/kaijun/hexo-theme-huxblog/" target="_blank" rel="external">hexo-theme-huxblog</a>   <a href="http://huangxuan.me/" target="_blank" rel="external">演示地址 Hux Blog</a></li>
<li><a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">hexo-theme-even</a>    <a href="http://www.ahonn.me/" target="_blank" rel="external">演示地址</a></li>
<li><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="external">hexo-theme-icarus</a>   <a href="http://blog.zhangruipeng.me/hexo-theme-icarus/" target="_blank" rel="external">演示地址</a></li>
<li><a href="https://github.com/Alex-fun/hexo-theme-jane" target="_blank" rel="external">hexo-theme-jane</a>   <a href="http://hejx.me/" target="_blank" rel="external">演示地址</a></li>
<li><a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="external">landscape-plus</a> <a href="http://honglu.me/" target="_blank" rel="external">演示地址</a>  <a href="http://arvinxiang.com/landscape-plus/" target="_blank" rel="external">And</a></li>
<li><a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">hexo-theme-apollo</a> <a href="http://pinggod.com/" target="_blank" rel="external">演示地址</a></li>
<li><a href="http://haojen.github.io/" target="_blank" rel="external">hexo-theme-Anisina</a></li>
</ol>
<a id="more"></a>
<h1 id="主题的制作"><a href="#主题的制作" class="headerlink" title="主题的制作"></a>主题的制作</h1><p>有两篇很不错的文章</p>
<ul>
<li><a href="http://www.maintao.com/2014/hexo-theme-from-scratch/" target="_blank" rel="external">从零开始定制hexo主题</a></li>
<li><a href="http://w3cboy.com/post/2014/05/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%81%9A%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%BB%E9%A2%98/" target="_blank" rel="external">一起来做博客——主题和部署</a></li>
<li><a href="http://syxiaqj.github.io/2014/02/19/introduce-hexo-theme/" target="_blank" rel="external">introduce-hexo-theme</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android SQLite操作]]></title>
      <url>http://febsky.me/2016/05/10/2016-05-10-Android%E6%93%8D%E4%BD%9CSQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="一、-SQLiteOpenHelper辅助类"><a href="#一、-SQLiteOpenHelper辅助类" class="headerlink" title="一、 SQLiteOpenHelper辅助类"></a>一、 SQLiteOpenHelper辅助类</h1><p>SQLiteOpenHelper类是一个辅助类，用于创建或打开数据库。<br>该类的使用方法一般是自定义一个子类，继承自SQLiteOpenHelper，并覆写其中最关键的两个方法：onCreate(SQLiteDatabase db)和onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)。当新建一个数据库时会调用前者，一般在里面做一些创建表或视图的操作。数据库版本升级时则会调用后者。</p>
<p>定义好子类后（假如叫SqlHelper），只要调用SqlHelper对象的getReadableDatabase()方法或getWritableDatabase()方法即可返回一个SQLiteDatabase对象。如果是第一次调用，则会创建数据库。随后可使用SQLiteDatabase对象的方法进行数据操作，如：execSQL(), insert(), update(), query(), rawQuery(), delete()等。</p>
<p>PS：通过该方法创建的数据库存放的目录是固定的，其路径为/data/data/packageName/databases/。</p>
<h1 id="二、Context类的openOrCreateDatabase-方法"><a href="#二、Context类的openOrCreateDatabase-方法" class="headerlink" title="二、Context类的openOrCreateDatabase()方法"></a>二、Context类的openOrCreateDatabase()方法</h1><p>openOrCreateDatabase(String dbName, int mode, CursorFactory factory);</p>
<ul>
<li>dbName：数据库名称。</li>
<li>mode：数据库操作模式。默认值为MODE_PRIVATE（即0）。可选值：MODE_WORLD_READABLE, MODE_WORLD_WRITABLE, MODE_ENABLE_WRITE_AHEAD_LOGGING</li>
<li>factory：附加的一个工厂类，当SQLiteDatabase实例的query函数被调用时，会使用该工厂类返回一个Cursor。可为null。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final String DATABASE_NAME = &#8220;myDatabase.db&#8221;;&#10;private static final String DATABASE_TABLE = &#8220;mainTable&#8221;;&#10;private static final String DATABASE_CREATE =&#10;&#8220;create table &#8220; + DATABASE_TABLE +&#10;&#8220; ( _id integer primary key autoincrement,&#8221; +&#10;&#8220;column_one text not null);&#8221;;&#10; &#10;SQLiteDatabase myDatabase;&#10; &#10;private void createDatabase() &#123;&#10;myDatabase = openOrCreateDatabase(DATABASE_NAME, Context.MODE_PRIVATE, null);&#10;myDatabase.execSQL(DATABASE_CREATE);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>PS：该方法得到的数据库文件，其存储路径与上一方法相同。</p>
<h1 id="三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases"><a href="#三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases" class="headerlink" title="三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()"></a>三、直接调用SQLiteDatabase类的静态方法openOrCreateDatabases()</h1><p>SQLiteDatabase类有几个静态方法可直接打开或创建数据库。<br>//等同于openDatabase(path, factory, SQLiteDatabase.CREATE_IF_NECESSARY)  </p>
<p>openOrCreateDatabase(String path, CursorFactory factory)<br>//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY)</p>
<p>openOrCreateDatabase(File file, CursorFactory factory)<br>//等同于openDatabase(file.getPath(), factory, SQLiteDatabase.CREATE_IF_NECESSARY, errorHandler)</p>
<p>openOrCreateDatabase(String path, CursorFactory factory, DatabaseErrorHandler errorHandler)</p>
<p>PS：该方法打开或创建的数据库文件可与上述两个方法的路径不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    private static final String DATABASE_NAME = &#34;xiangjie.db&#34;;&#10;    private static final String DATABASE_TABLE = &#34;test&#34;;&#10;    private static final String DATABASE_CREATE =&#10;    &#34;create table &#34; + DATABASE_TABLE +&#10;            &#34; ( _id integer primary key autoincrement,&#34; +&#10;            &#34;column_one text not null)&#34;;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) &#123;&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_green_dao);&#10;        &#10;       SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(&#34;/sdcard/&#34;+DATABASE_NAME, null);&#10;        &#10;        //db.execSQL(&#34;create table test ( _id integer primary key autoincrement,column_one text not null)&#34;);&#10;//        db.execSQL(&#34;insert into test (column_one) values(?)&#34;,new Object[]&#123;&#34;1111&#34;&#125;);&#10;&#10;        Cursor cursor = db.rawQuery(&#34;select * from test;&#34;,null);&#10;        while (cursor.moveToNext()) &#123;&#10;            String id = cursor.getString(0);//&#33719;&#21462;&#31532;&#19968;&#21015;&#30340;&#20540;&#10;            Log.d(&#34;Q_M:&#34;,id);&#10;        &#125;&#10;        cursor.close();&#10;        db.close();&#10;    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后记住，不管用何种方式打开了数据库，获得的SQLite对象不再使用时，都要调用close()来关闭打开的数据库，否则抛出IllegalStateException异常。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 中实现倒计时]]></title>
      <url>http://febsky.me/2016/05/10/2016-05-10-Android%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Android-中实现倒计时控件的方法有哪些"><a href="#Android-中实现倒计时控件的方法有哪些" class="headerlink" title="Android 中实现倒计时控件的方法有哪些"></a>Android 中实现倒计时控件的方法有哪些</h1><p>今天在工作中用到了倒计时功能，也就是在一个TextView上显示倒计时。突然想到当时面试的时候有家公司的面试官问我在Android中实现倒计时功能我会用哪些方法。哈哈当时竟然不知道Android sdk本身就有实现了。丢人~</p>
<a id="more"></a>
<h2 id="第一种CountDownTimer"><a href="#第一种CountDownTimer" class="headerlink" title="第一种CountDownTimer"></a>第一种CountDownTimer</h2><p>位于<code>android.os.CountDownTimer</code>这个类很好用。可以直接查看官方文档，文档中就有实例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CountDownTimer(<span class="number">30000</span>, <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">(<span class="keyword">long</span> millisUntilFinished)</span> </span>&#123;</span><br><span class="line">                textView.setText(<span class="string">"seconds remaining: "</span> + millisUntilFinished / <span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(<span class="string">"done!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br></pre></td></tr></table></figure>
<h2 id="第二种-Timer与TimerTask-runOnUiThread-runnable-方法"><a href="#第二种-Timer与TimerTask-runOnUiThread-runnable-方法" class="headerlink" title="第二种 Timer与TimerTask + runOnUiThread(runnable)方法"></a>第二种 Timer与TimerTask + runOnUiThread(runnable)方法</h2><h2 id="第三种Handler与Message（不用TimerTask）"><a href="#第三种Handler与Message（不用TimerTask）" class="headerlink" title="第三种Handler与Message（不用TimerTask）"></a>第三种Handler与Message（不用TimerTask）</h2><h2 id="第四种Handler与Runnable（最简单型）"><a href="#第四种Handler与Runnable（最简单型）" class="headerlink" title="第四种Handler与Runnable（最简单型）"></a>第四种Handler与Runnable（最简单型）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> recLen = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">private</span> TextView txtView;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line"> </span><br><span class="line">        setContentView(R.layout.timertask);  </span><br><span class="line">        txtView = (TextView)findViewById(R.id.txttime);  </span><br><span class="line">          </span><br><span class="line">        handler.postDelayed(runnable, <span class="number">1000</span>);  </span><br><span class="line">    &#125;     </span><br><span class="line"> </span><br><span class="line">    Handler handler = <span class="keyword">new</span> Handler();  </span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">        <span class="annotation">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            recLen++;  </span><br><span class="line">            txtView.setText(<span class="string">""</span> + recLen);  </span><br><span class="line">            handler.postDelayed(<span class="keyword">this</span>, <span class="number">1000</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs的学习]]></title>
      <url>http://febsky.me/2016/05/07/2016-05-07-nodejs%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h1><ul>
<li>检查Python 是否安装<code>python -V</code></li>
<li>检查ruby是否安装<code>ruby -v</code></li>
<li>首先安装<code>homebrew</code>,然后命令行<code>brew install node</code></li>
<li>检查node是否安装成功 <code>node -v</code></li>
<li>然后命令行<code>node</code>可以打开nodejs的交互器，和Python类似，很好玩</li>
<li>打开控制台输入 which node ，得到的输出结果就是node安装路径。</li>
</ul>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>什么不说直接上代码，Mac命令行</p>
<p><code>$ vim server.js</code></p>
<p>输入下面代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">   res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">   res.end(<span class="string">'Hello World\n'</span>)</span><br><span class="line">&#125;).listen(<span class="number">1337</span>,<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:1337/'</span>)</span><br></pre></td></tr></table></figure>
<p><code>$ node server.js</code></p>
<h1 id="模块与包管理工具"><a href="#模块与包管理工具" class="headerlink" title="模块与包管理工具"></a>模块与包管理工具</h1><p>Commonjs 规范,理解模块含义理解模块<code>export</code>和<code>requite</code></p>
<p>模块大致分为三种：核心模块、文件模块、第三方模块</p>
<p><strong>模块创建流程：</strong>  </p>
<ul>
<li>创建模块<code>teacher.js</code></li>
<li>导出模块 <code>export.add = function{}</code></li>
<li>加载模块 `var teacher = requite(‘./teacher.js’)</li>
<li>使用模块 <code>teacher.add(&#39;Scott&#39;)</code></li>
</ul>
<h1 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h1><p>查看一个model的所拥有的函数<code>$ node</code>开启nodejs交互器<br>然后输入模块名，比如想看url模块,直接在交互器输入<code>url</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62; url&#10;&#123; parse: [Function: urlParse],&#10;  resolve: [Function: urlResolve],&#10;  resolveObject: [Function: urlResolveObject],&#10;  format: [Function: urlFormat],&#10;  Url: [Function: Url] &#125;&#10;&#62;</span><br></pre></td></tr></table></figure>
<h2 id="了解http-模块"><a href="#了解http-模块" class="headerlink" title="了解http 模块"></a>了解http 模块</h2><ol>
<li>什么是回调？</li>
<li>什么是同步/异步？</li>
<li>什么是I/O？</li>
<li>什么的单线程/多线程？</li>
<li>什么是阻塞/非阻塞？</li>
<li>什么是事件？</li>
<li>什么是事件驱动？</li>
<li>什么是基于事件驱动的回调？</li>
<li>什么是事件循环？</li>
</ol>
<p>理解nodejs中的 this （上下文）,一般指向当前函数的拥有者。<br>但是<code>call</code>方法可以改变this上下文</p>
<h2 id="Node的突出特点"><a href="#Node的突出特点" class="headerlink" title="Node的突出特点"></a>Node的突出特点</h2><ul>
<li><p>WEB服务器<br>NodeJS与一般的后台编译性语言有什么不同?        </p>
<ol>
<li><p>NodeJS本身包含一个http服务器，不像asp.net程序需要一个IIS，或者java的程序需要一个apche</p>
</li>
<li><p>NodeJS是异步IO，事件驱动的;一般的程序调用都是执行一个命令之后，线程阻塞，一直等到命令成功之后，才会去执行下面的事情，但是NodeJS不一样，所有的IO，网络通信，磁盘操作都是由事件来控制的，Nodejs进程在同一时刻只会处理一个事件，完成后立即进入事件轮询并检查处理后面的事件。如图</p>
</li>
</ol>
</li>
</ul>
<p><strong>【参考文献】</strong></p>
<p>一个学习网站<a href="http://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="external">点这儿</a></p>
<p><a href="http://www.nodeclass.com/articles/99682" target="_blank" rel="external">Orm2参考使用</a></p>
<p><a href="http://docs.sequelizejs.com/en/latest/" target="_blank" rel="external">Sequelize github上start最多的orm</a> <a href="http://my.oschina.net/zj0303/blog/305384" target="_blank" rel="external">一个使用教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android FragmentPagerAdapter和FragmentStatePagerAdapter]]></title>
      <url>http://febsky.me/2016/05/06/2016-05-12-FragmentStatePagerAdapter%E5%92%8CFragmentPagerAdapter/</url>
      <content type="html"><![CDATA[<p>在公司查看别人的代码的时候发现个东西，在展示试题的是时候，他用的是<code>FragmentStatePagerAdapter</code>而如果是我的话，我就直接用<code>viewpager</code>+<code>PagerAdapter</code>,但是<code>FragmentStatePagerAdapter</code>是个什么鬼，我听过<code>FragmentPagerAdapter</code>可是没用过<code>FragmentStatePagerAdapter</code>啊，只怪自己学艺不精，既然人家用了就有用的道理。</p>
<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><p>跟踪源码来看一下FragmentPagerAdapter和FragmentStatePagerAdapter的API说明。我们先来看看FragmentPagerAdapter的API（直接翻译吧）：</p>
<blockquote>
<p>FragmentPagerAdapter继承自PagerAdapter ，主要用来展示多个Fragment页面，并且每一个Fragment都会被保存在fragment manager中。 FragmentPagerAdapter最适用于那种少量且相对静态的页面，例如几个tab页。每一个用户访问过的fragment都会被保存在内存中，尽管他的视图层级可能会在不可见时被销毁。这可能导致大量的内存因为fragment实例能够拥有任意数量的状态。对于较多的页面集合，更推荐使用FragmentStatePagerAdapter。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentPagerAdapter的派生类只需要实现getItem(int)和getCount()即可。</p>
</blockquote>
<p>然后是<code>FragmentStatePagerAdapter</code>:</p>
<blockquote>
<p>FragmentStatePagerAdapter继承自PagerAdapter，主要使用Fragment来管理每个页面。这个类同样用来保存和恢复fragment页面的状态。 FragmentStatePagerAdapter更多用于大量页面，例如视图列表。当某个页面对用户不再可见时，他们的整个fragment就会被销毁，仅保留fragment状态。相比于FragmentPagerAdapter，这样做的好处是在访问各个页面时能节约大量的内存开销，但代价是在页面切换时会增加非常多的开销。 当使用FragmentPagerAdapter的时候对应的ViewPager必须拥有一个有效的ID集。 FragmentStatePagerAdapter的派生类只需要实现getItem(int)和getCount()即可。</p>
</blockquote>
<p>#直接上结论，然后是分析代码</p>
<ul>
<li><p>FragmentStatePagerAdapter<br>顾名思义，我们的这个FragmentStatePagerAdapter，在我们切换不同的Fragment的时候，我们会把前面的Fragment销毁，所谓的销毁就是走完Fragment的生命周期，调用<code>onDestroyView</code>,<code>onDestroy</code>,直到<code>onDetach</code>为止,而我们系统在销毁前，会把我们的我们Fragment的Bundle在我们的onSaveInstanceState(Bundle)保存下来。等用户切换回来的时候，我们的Fragment就会根据我们的instance state恢复出来。并且当切换回来的时候会调用这个Fragment的整个生命周期从<code>onAttach</code>方法开始。</p>
</li>
<li><p>FragmentPagerAdapter<br>使用这种Adapter，我们的Fragment在切换的时候，只会把我们的Fragment的view销毁，也就是说一个Fragment的生命周期只会调用到<code>onDestroyView</code>,变不会再往下执行，下一次再滑动viewpager回到上一个<code>Fragment</code>的时候,会从这个Fragment的<code>onCreateView</code>开始执行。</p>
</li>
</ul>
<h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><h2 id="Fragment代码"><a href="#Fragment代码" class="headerlink" title="Fragment代码"></a>Fragment代码</h2><p>为了代码简洁Fragment的布局文件就不再给出，就是一个<code>RelativeLayout</code>包含一个<code>TextView</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package me.fesky.test.fragment;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.support.annotation.Nullable;&#10;import android.support.v4.app.Fragment;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import me.fesky.test.R;&#10;&#10;/**&#10; * Created by Administrator on 2016/5/12.&#10; */&#10;public class MyFragment extends Fragment &#123;&#10;&#10;    int index;&#10;&#10;    @Override&#10;    public void onAttach(Context context) &#123;&#10;        super.onAttach(context);&#10;        Bundle bundle = getArguments();&#10;        index = bundle.getInt(&#34;index&#34;);&#10;        Log.i(&#34;Q_M:&#34;, &#34;onAttach&#34; + index);&#10;    &#125;&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;&#10;        View view = inflater.inflate(R.layout.fragment, container, false);&#10;        TextView textView = (TextView) view.findViewById(R.id.text_view);&#10;&#10;        textView.setText(textView.getText()+&#34;&#34;+index);&#10;&#10;        Log.i(&#34;Q_M:&#34;, &#34;onCreateView&#34; + index);&#10;        return view;&#10;    &#125;&#10;&#10;    @Override&#10;    public void onDestroyView() &#123;&#10;        super.onDestroyView();&#10;&#10;        Log.i(&#34;Q_M:&#34;, &#34;onDestroyView&#34; + index);&#10;    &#125;&#10;&#10;    @Override&#10;    public void onDestroy() &#123;&#10;        super.onDestroy();&#10;&#10;        Log.i(&#34;Q_M:&#34;, &#34;onDestroy&#34; + index);&#10;    &#125;&#10;&#10;    @Override&#10;    public void onDetach() &#123;&#10;        super.onDetach();&#10;        Log.i(&#34;Q_M:&#34;, &#34;onDetach&#34; + index);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Activity以及adapter代码"><a href="#Activity以及adapter代码" class="headerlink" title="Activity以及adapter代码"></a>Activity以及adapter代码</h2><p>为了代码简洁<code>Activity</code>的布局文件就不再给出，就是一个<code>RelativeLayout</code>包含一个<code>android.support.v4.view.ViewPager</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package me.fesky.test;&#10;&#10;import android.support.v4.app.Fragment;&#10;import android.support.v4.app.FragmentManager;&#10;import android.support.v4.app.FragmentPagerAdapter;&#10;import android.support.v4.app.FragmentStatePagerAdapter;&#10;import android.support.v4.view.PagerAdapter;&#10;import android.support.v4.view.ViewPager;&#10;import android.support.v7.app.AppCompatActivity;&#10;import android.os.Bundle;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import me.fesky.test.fragment.MyFragment;&#10;&#10;public class TestFragmentActivity extends AppCompatActivity &#123;&#10;&#10;    ViewPager viewPager;&#10;&#10;    List&#60;Fragment&#62; fragments;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) &#123;&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_test_fragment);&#10;&#10;        fragments = new ArrayList&#60;&#62;();&#10;&#10;        /**&#10;         * &#21019;&#24314;&#22235;&#20010;Fragment&#10;         */&#10;        fragments.add(new MyFragment());&#10;        fragments.add(new MyFragment());&#10;        fragments.add(new MyFragment());&#10;        fragments.add(new MyFragment());&#10;&#10;        /**&#10;         *&#29992;&#36825;&#31181;&#26041;&#24335;&#21521;Fragment&#20256;&#36882;&#21442;&#25968;&#10;         */&#10;        Bundle bundle1 = new Bundle();&#10;        bundle1.putInt(&#34;index&#34;,1);&#10;        fragments.get(0).setArguments(bundle1);&#10;&#10;        Bundle bundle2 = new Bundle();&#10;        bundle2.putInt(&#34;index&#34;,2);&#10;        fragments.get(1).setArguments(bundle2);&#10;&#10;        Bundle bundle3 = new Bundle();&#10;        bundle3.putInt(&#34;index&#34;,3);&#10;        fragments.get(2).setArguments(bundle3);&#10;&#10;        Bundle bundle4 = new Bundle();&#10;        bundle4.putInt(&#34;index&#34;,4);&#10;        fragments.get(3).setArguments(bundle4);&#10;&#10;        viewPager = (ViewPager) findViewById(R.id.view_pager);&#10;        PagerAdapter pagerAdapter = new MyFragmentPagerAdapter(getSupportFragmentManager());&#10;&#10;        viewPager.setAdapter(pagerAdapter);&#10;    &#125;&#10;&#10;&#10;    /**&#10;     * &#23581;&#35797;&#20999;&#25442;&#32487;&#25215;&#30340;FragmentPagerAdapter&#21644;FragmentStatePagerAdapter&#10;     * &#35266;&#23519;&#25171;&#21360;&#32467;&#26524;&#26377;&#20160;&#20040;&#19981;&#21516;&#10;     */&#10;    public  class MyFragmentPagerAdapter extends FragmentPagerAdapter &#123;&#10;&#10;        public MyFragmentPagerAdapter(FragmentManager fm) &#123;&#10;            super(fm);&#10;        &#125;&#10;&#10;        @Override&#10;        public Fragment getItem(int position) &#123;&#10;            return fragments.get(position);&#10;        &#125;&#10;&#10;        @Override&#10;        public int getCount() &#123;&#10;            return fragments.size();&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<font colot="red"> 注意上面所说的销毁都是建立在ViewPager缓存逻辑之上的并不是划过去就会销毁的。不了解的可以看下ViewPager的销毁机制</font>

</blockquote>
<p>运行上面的测试代码，可以看到，当adapter是<code>FragmentPagerAdapter</code>打印结果如下：</p>
<p>ViewPager向后滑动结果如下：</p>
<blockquote>
<p>05-12 16:24:53.370 11366-11366/me.fesky.test I/Q_M:: onAttach1<br>05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView1<br>05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onAttach2<br>05-12 16:24:53.380 11366-11366/me.fesky.test I/Q_M:: onCreateView2<br>05-12 16:25:36.260 11366-11366/me.fesky.test I/Q_M:: onAttach3<br>05-12 16:25:36.270 11366-11366/me.fesky.test I/Q_M:: onCreateView3<br>05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onDestroyView1<br>05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onAttach4<br>05-12 16:25:39.980 11366-11366/me.fesky.test I/Q_M:: onCreateView4<br>05-12 16:25:44.760 11366-11366/me.fesky.test I/Q_M:: onDestroyView2</p>
</blockquote>
<p>ViewPager向前滑动结果如下：</p>
<blockquote>
<p>05-12 16:26:17.220 11366-11366/me.fesky.test I/Q_M:: onCreateView2<br>05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onCreateView1<br>05-12 16:26:18.720 11366-11366/me.fesky.test I/Q_M:: onDestroyView4<br>05-12 16:26:27.450 11366-11366/me.fesky.test I/Q_M:: onDestroyView3</p>
</blockquote>
<p>当adapter是<code>FragmentStatePagerAdapter</code>打印结果如下：</p>
<p>ViewPager向后(也就是向下一页滑动)滑动结果如下：</p>
<blockquote>
<p>05-12 16:53:36.940 3043-3043/me.fesky.test I/Q_M:: onAttach1<br>05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView1<br>05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onAttach2<br>05-12 16:53:36.950 3043-3043/me.fesky.test I/Q_M:: onCreateView2<br>05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onAttach3<br>05-12 16:53:44.500 3043-3043/me.fesky.test I/Q_M:: onCreateView3<br>05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroyView1<br>05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDestroy1<br>05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onDetach1<br>05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onAttach4<br>05-12 16:53:46.250 3043-3043/me.fesky.test I/Q_M:: onCreateView4</p>
</blockquote>
<p>ViewPager向前滑动结果如下：</p>
<blockquote>
<p>05-12 16:55:31.350 3043-3043/me.fesky.test I/Q_M:: onAttach2<br>05-12 16:55:31.360 3043-3043/me.fesky.test I/Q_M:: onCreateView2<br>05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroyView4<br>05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDestroy4<br>05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onDetach4<br>05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onAttach1<br>05-12 16:55:33.620 3043-3043/me.fesky.test I/Q_M:: onCreateView1<br>05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroyView3<br>05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDestroy3<br>05-12 16:55:35.040 3043-3043/me.fesky.test I/Q_M:: onDetach3</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 打包过程]]></title>
      <url>http://febsky.me/2016/05/06/2016-05-06-Android%E6%89%93%E5%8C%85%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Android-打包过程"><a href="#Android-打包过程" class="headerlink" title="Android 打包过程"></a>Android 打包过程</h1><p>第一步：打包资源文件，生成R.java文件<br>【输入】Resource文件（就是工程中res中的文件）、Assets文件（相当于另外一种资源，这种资源Android系统并不像对res中的文件那样优化它）、AndroidManifest.xml文件（包名就是从这里读取的，因为生成R.java文件需要包名）、Android基础类库（Android.jar文件）<br>【输出】打包好的资源（一般在Android工程的bin目录可以看到一个叫resources.ap_的文件就是它了）、R.java文件（在gen目录中，大家应该很熟悉了）<br>【工具】aapt工具，它的路径在${ANDROID_SDK_HOME}/platform-tools/aapt（如果你使用的是Windows系统，按惯例路径应该这样写：%ANDROID_SDK_HOME%\platform-tools\aapt.exe，下同）。</p>
<p>第二步：处理AIDL文件，生成对应的.java文件（当然，有很多工程没有用到AIDL，那这个过程就可以省了）<br>【输入】源码文件、aidl文件、framework.aidl文件<br>【输出】对应的.java文件<br>【工具】aidl工具</p>
<p>第三步：编译Java文件，生成对应的.class文件<br>【输入】源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件）<br>【输出】.class文件<br>【工具】javac工具</p>
<p>第四步：把.class文件转化成Davik VM支持的.dex文件<br>【输入】 .class文件（包括Aidl生成.class文件，R生成的.class文件，源文件生成的.class文件），库文件（.jar文件）<br>【输出】.dex文件<br>【工具】javac工具</p>
<p>第五步：打包生成未签名的.apk文件<br>【输入】打包后的资源文件、打包后类文件（.dex文件）、libs文件（包括.so文件，当然很多工程都没有这样的文件，如果你不使用C/C++开发的话）<br>【输出】未签名的.apk文件<br>【工具】apkbuilder工具</p>
<p>第六步：对未签名.apk文件进行签名<br>【输入】未签名的.apk文件<br>【输出】签名的.apk文件<br>【工具】jarsigner</p>
<p>第七步：对签名后的.apk文件进行对齐处理（不进行对齐处理是不能发布到Google Market的）<br>【输入】签名后的.apk文件<br>【输出】对齐后的.apk文件<br>【工具】zipalign工具</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[泛型（Generics）]]></title>
      <url>http://febsky.me/2016/05/04/2016-05-04-Java%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>泛型是提供给Javac编译器使用的。可以限定集合中输入的类型，让编译器挡住原始程序的非法输入，编译器编译带类型说明的集合时会去掉“类型”信息，使程序运行效率不受影响，对于参数化的泛型类型。</p>
<h1 id="泛型中用到的术语"><a href="#泛型中用到的术语" class="headerlink" title="泛型中用到的术语"></a>泛型中用到的术语</h1><p><code>ArrayList&lt;E&gt;</code>类定义和<code>ArrayList&lt;Integer&gt;</code>类引用中涉及如下术语：整个称为ArrayList<e>泛型类型，ArrayList<e>中的E称为<strong><code>类型变量</code></strong>或<code>类型参数</code>，整个ArrayList<integer>称为<code>参数化的类型</code>，ArrayList<integer>中的Integer称为<code>类型参数的实例</code>或实际类型参数，ArrayList称为原始类型。</integer></integer></e></e></p>
<h1 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h1><p>　　由于Java泛型的实现机制，使用了泛型的代码在运行期间相关的泛型参数的类型会被擦除，我们无法在运行期间获知泛型参数的具体类型（所有的泛型类型在运行时都是Object类型）。</p>
<p>　　正确理解泛型概念的首要前提是理解类型擦除（type erasure）。 Java中的泛型基本上都是在编译器这个层次来实现的。属于编译器执行类型检查和类型诊断，然后生成普通的非泛型的字节码，也就是在生成的Java字节代码中是不包含泛型中的类型信息的，使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这种实现技术称为类型擦除。如在代码中定义的List<object>和List<string>等类型，在编译之后都会变成List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法避免在运行时刻出现类型转换异常的情况。</string></object></p>
<p>很多泛型的奇怪特性都与这个类型擦除的存在有关，包括：</p>
<ul>
<li>泛型类并没有自己独有的Class类对象。比如并不存在List<string>.class或是List<integer>.class，而只有List.class；</integer></string></li>
<li>静态变量是被泛型类的所有实例所共享的。对于声明为MyClass<t>的类，访问其中的静态变量的方法仍然是 MyClass.myStaticVar。不管是通过new MyClass<string>还是new MyClass<integer>创建的对象，都是共享一个静态变量。</integer></string></t></li>
<li>泛型的类型参数不能用在Java异常处理的catch语句中。因为异常处理是由JVM在运行时刻来进行的。由于类型信息被擦除，JVM是无法区分两个异常类型MyException<string>和MyException<integer>的。对于JVM来说，它们都是MyException类型的。也就无法执行与异常对应的catch语句。</integer></string></li>
</ul>
<h1 id="通配符与上下界"><a href="#通配符与上下界" class="headerlink" title="通配符与上下界"></a>通配符与上下界</h1><ul>
<li>泛型参数可以使用通配符，通配符所表示的类型是未知的。</li>
<li>List&lt;?&gt;所声明的就是所有类型都是可以的。</li>
<li>但是List&lt;?&gt;并不等同于List<object>。</object></li>
<li>List&lt;? extends Number&gt;说明List中可能包含的元素类型是Number及其子类。</li>
<li>而List&lt;? super Number&gt;则说明List中包含的是Number及其父类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inspect</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(<span class="number">1</span>); <span class="comment">//这个操作在当前方法的上下文是合法的。 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; strs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    inspect(strs); <span class="comment">//编译错误 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="重新学习泛型的原因"><a href="#重新学习泛型的原因" class="headerlink" title="重新学习泛型的原因"></a>重新学习泛型的原因</h1><p>在使用Gson的时候，看源码遇到了瓶颈。在Gson中我们需要将使用了泛型的Java代码序列化或者反序列化的时候，我们确实需要获知泛型参数的类型，这个时候问题就变得比较棘手。</p>
<p>而在Gson中用来TypeToken这个帮助类来获取泛型的具体类型。这个类的核心关键思想是<code>Class</code>对象中<code>getGenericSuperclass()</code>这个方法的使用。这个方法是干嘛的，从字面意思看是获取含有泛型的父类类型。什么玩意？哦，意思是说，如果某个类的父类含有泛型，那么它可以获取父类的字节码对象，也就是Class对象，但是呢这个方法和<code>getSuperclass（）</code>的区别是，他还能获取到父类中的泛型参数的字节码对象。而Gson中TypeToken的用法就是利用了这个设计思想，看我们每次用TypeToken都是这么用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type type = new TypeToken&#60;List&#60;String&#62;&#62;()&#123;&#125;.getType();&#10;List&#60;String&#62; list = gson.fromJson(jsonStr, type);</span><br></pre></td></tr></table></figure>
<p>代码中的<code>new TypeToken&lt;List&lt;String&gt;&gt;(){}</code>就是创建了一个TypeToke的匿名子类对象。所以从这个对象中可以拿到父类（TypeToken）中的泛型参数（<code>List&lt;String&gt;</code>）的具体类型。</p>
<p>当然我们可以模仿写一个试试：</p>
<p>首先建立一个获取类型的帮助类，类似TypeToken</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> me.febsky;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Administrator on 2016/5/4.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Class&lt;T&gt; type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = (Class&lt;T&gt;) getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后看我们的测试类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package me.febsky;&#10;&#10;import java.lang.reflect.ParameterizedType;&#10;import java.lang.reflect.Type;&#10;&#10;public class Main &#123;&#10;    public static void main(String[] args) &#123;&#10;        Foo&#60;String&#62; foo = new Foo&#60;String&#62;()&#123;&#125;;&#10;        Type mySuperClass = foo.getClass().getGenericSuperclass();&#10;        Type type = ((ParameterizedType)mySuperClass).getActualTypeArguments()[0];&#10;        System.out.println(type);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>从测试类中我成功拿到泛型类中的泛型参数的具体类型。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 简介和使用]]></title>
      <url>http://febsky.me/2016/04/26/2016-04-26-Gradle%E7%9A%84%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Gradle是个什么东西，从哪里入手学习，都知道在Android Studio中用到了Gradle配置，那么他和Android 以及AndroidStudio的关系是啥？他和Java的关系又是啥，他脱离AndroidStudio是否能够运行？</p>
<blockquote>
<p>看了官方的英文文档后发现社区竟然有热心的开发者翻译了一份中文的oh shit ~ <a href="https://github.com/DONGChuan/GradleUserGuide" target="_blank" rel="external">链接地址</a>  <a href="https://docs.gradle.org/current/release-notes" target="_blank" rel="external">官网文档</a>最近两年Gradle更新相当频繁，注意更新版本。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Gradle 是一个基于JVM的构建工具。使用Groovy这种脚步语言，主要提供以下功能：</p>
<ul>
<li>一个像 Ant 一样的灵活的构建工具</li>
<li>一种可切换的, 像 maven 一样的基于合约构建的框架</li>
<li>支持强大的多工程构建</li>
<li>支持强大的依赖管理(基于 ApacheIvy )</li>
<li>支持已有的 maven 和 ivy 仓库</li>
<li>支持传递性依赖管理, 而不需要远程仓库或者 pom.xml 或者 ivy 配置文件</li>
<li>优先支持 Ant 式的任务和构建</li>
<li>基于 groovy 的构建脚本</li>
<li>有丰富的领域模型来描述你的构建</li>
</ul>
<h1 id="为啥使用Groovy这种脚步语言"><a href="#为啥使用Groovy这种脚步语言" class="headerlink" title="为啥使用Groovy这种脚步语言"></a>为啥使用Groovy这种脚步语言</h1><p>我们认为在脚本构建时，内部基于 XML 的 DSL（基于一个动态语言）优势是巨大的. 有许多动态语言在那里, 我们为什么选择 Groovy? 答案在于 Gradle 的运行环境. 虽然 Gradle 是以一个多用途的构建工具为核心，它的重点是Java项目. 在这样的项目中, 显然团队每个成员都了解 Java. 我们认为构建应尽可能对所有团队成员都是透明的, 所以选择了 Groovy.</p>
<p>你可能会说，为什么不直接使用 Java 作为构建脚本的语言. 我们认为这是一个有效性的问题. 对于你的团队, 它要有最高的透明度和最低的学习曲线, 也就是说容易掌握. 但由于 Java 的限制, 这样的构建语言不会那么完美和强大. 如 Python，Groovy 或 Ruby 语言都可以有更高的效率. 我们选择了 Groovy 是因为它给 Java 开发人员提供了迄今为止最大的透明度. 其基本的符号和类型与 Java 是一样的，其封装结构和许多其他的地方也是如此.</p>
<p>对于那些同样分享 Python 或 Ruby 知识的 Java 团队将会很乐意学习它. Gradle 的设计非常适合在 JRuby 和 Jython 中创建另一个构建脚本引擎. 它只是目前开发的优先级里. 我们十分支持任何人来做贡献, 创建额外的构建脚本引擎.</p>
<h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><p>在编程方面要想快速了解一个东西，就是用一下，也就是写个Hello world!</p>
<ul>
<li>Gradle 需要运行在一个 Java 环境里<ul>
<li>安装一个 Java JDK 或者 JRE. 而且 Java 版本必须至少是 6 以上.</li>
<li>Gradle 自带 Groovy 库, 所以没必要安装 Groovy. 任何已经安装的 Groovy 会被 Gradle 忽略.</li>
<li>去Gradle官网下载一个Gradle的版本<a href="http://www.gradle.org/downloads" target="_blank" rel="external">点我下载</a>，选择个比较新的解压就行。（网速可能比较慢,必要时可以选择科学上网）</li>
<li>解压后设置环境变量（windows和Linux和Mac的不太一样），就是把解压后的bin目录设置到环境变量中。（和jdk的一样）</li>
<li>然后在命令行中运行<code>gradle -v</code>来检测你的Gradle是否安装成功。</li>
<li>设置JVM选项（略）</li>
</ul>
</li>
</ul>
<h1 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h1><p>安也安了，命令行也配置好了，那么就开始在命令行下用唄~其实用过git的同学（首先你得习惯用git的命令行模式而不是图形化界面）可以类比下git的使用方式。</p>
<p>首先要理解Gradle中的几个专业术语。</p>
<ul>
<li><strong>projects ( 项目 )</strong>：每一个构建都是由一个或多个 projects 构成的. 一个 project 到底代表什么依赖于你想用 Gradle 做什么. 举个例子, 一个 project 可以代表一个 JAR 或者一个网页应用. 它也可能代表一个发布的 ZIP 压缩包, 这个 ZIP 可能是由许多其他项目的 JARs 构成的. 但是一个 project 不一定非要代表被构建的某个东西. 它可以代表一件**要做的事, 比如部署你的应用.</li>
<li><strong>tasks ( 任务 )</strong>：每一个 project 是由一个或多个 tasks 构成的. 一个 task 代表一些更加细化的构建. 可能是编译一些 classes, 创建一个 JAR, 生成 javadoc, 或者生成某个目录的压缩文件.</li>
</ul>
<p>其实以上的官方解释可以忽略，毛线都读不明白~~~</p>
<h1 id="Project对象和build-gradle"><a href="#Project对象和build-gradle" class="headerlink" title="Project对象和build.gradle"></a>Project对象和build.gradle</h1><p>为了不深究Gradle的实现原理（就是去读源代码），又要让大家觉得有据可依。我通过引用官方文档的一些描述来帮助大家理解Project对象。</p>
<p>For each project in the build, Gradle creates an object of type Project and associates this Project object with the build script. (Chapter 13. Writing Build Scripts)<br>构建中的每一个project，Gradle都会创建一个Project对象，并将这个对象与构建脚本相关联。</p>
<p>There is a one-to-one relationship between a Project and a “build.gradle” file. (Interface Project API)<br>Project对象与build.gradle是一对一的关系。</p>
<p>First, Gradle scripts are configuration scripts. As the script executes, it configures an object of a particular type. For example, as a build script executes, it configures an object of type Project. This object is called the delegate object of the script. (Gradle Build Language Reference)<br>Gradle的脚本是配置脚本，当脚本执行时，它是在配置某一个特殊类型的对象。比如一个构建脚本的执行，它就是在配置一个Project类型的对象。这个对象叫做脚本的代理对象。</p>
<p>读完这三句话，应该可以清楚的明白build.gradle的本质，简单的说，build.gradle是对一个Project对象的配置。</p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>gradle 命令会在当前目录中查找一个叫 build.gradle 的文件. 我们称这个 build.gradle 文件为一个<strong>构建脚本 (build script)</strong>, 但是严格来说它是一个构建配置脚本 (build configuration script). 这个脚本定义了一个 <code>project</code> 和它的 <code>tasks</code>.</p>
<p>你可以通过 gradle 命令运行一个 Gradle 构建.</p>
<p>让我们来先看一个例子, 创建一个名为build.gradle的构建脚本.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'Hello world!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在命令行里, 进入脚本所在的文件夹然后输入 <code>gradle -q hello</code> 来执行构建脚本.命令里加入 -q. 代表 quite 模式. 它不会生成 Gradle 的日志信息 (log messages).</p>
<p>这里发生了什么? 这个构建脚本定义了一个独立的 task, 叫做 hello, 并且加入了一个 action. 当你运行 gradle hello, Gradle 执行叫做 hello 的 task, 也就是执行了你所提供的 action. 这个 action 是一个包含了一些 Groovy 代码的闭包(closure 这个概念不清楚的同学好好谷歌下).</p>
<p>Gradle 不仅仅是想XML一样的配置文件，他是个脚本，是可以写代码的，更多操作请查看官方文档。</p>
<h1 id="Java插件"><a href="#Java插件" class="headerlink" title="Java插件"></a>Java插件</h1><p> Gradle 是一种多用途的构建工具. 它可以在你的构建脚本里构建任何你想要实现的东西. 但前提是你必须先在构建脚本里加入代码, 不然它什么都不会执行.</p>
<p>大都数 Java 项目是非常相像的: 你需要编译你的 Java 源文件, 运行一些单元测试, 同时创建一个包含你类文件的 JAR. 如果你可以不需要为每一个项目重复编写这些, 我想你会非常乐意的.</p>
<p>幸运的是, 你现在不再需要做这些重复劳动了. Gradle 通过使用插件解决了这个问题. 插件是 Gradle 的扩展, 它会通过某种方式配置你的项目, 典型的有加入一些预配置任务. Gradle 自带了许多插件, 你也可以很简单地编写自己的插件并和其他开发者分享它. Java 插件就是一个这样的插件. 这个插件在你的项目里加入了许多任务， 这些任务会编译和单元测试你的源文件, 并且把它们都集成一个 JAR 文件里.</p>
<p>Java 插件是基于合约的（<strong>约定优于配置</strong>）. 这意味着插件已经给项目的许多方面定义了默认的参数, 比如 Java 源文件的位置. 如果你在项目里遵从这些合约, 你通常不需要在你的构建脚本里加入太多东西. 如果你不想要或者是你不能遵循合约, Gradle 也允许你自己定制你的项目. 事实上, 因为对 Java 项目的支持是通过插件实现的, 如果你不想要的话, 你一点也不需要使用这个插件来构建你的项目.</p>
<h1 id="gradle-和-groovy的关系"><a href="#gradle-和-groovy的关系" class="headerlink" title="gradle 和 groovy的关系"></a>gradle 和 groovy的关系</h1><p>那么好好的groovy怎么就变成gradle那样了呢？<br>原因就是，Gradle大量地使用了Groovy闭包的delegate（委托）机制。简单来说，delegate机制可以使我们将一个闭包中的执行代码的作用对象设置成任意其他对象。</p>
<p><strong>参考文章</strong></p>
<p><a href="http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/" target="_blank" rel="external">Gradle深入与实战（六）Gradle的背后是什么？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取表和字段的元数据的方法]]></title>
      <url>http://febsky.me/2016/04/24/2014-12-23-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2>外键关系查询语句</h2>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">	tc. CONSTRAINT_NAME,</span><br><span class="line">	tc. TABLE_NAME,</span><br><span class="line">	kcu. COLUMN_NAME,</span><br><span class="line">	ccu. TABLE_NAME <span class="keyword">AS</span> foreign_table_name,</span><br><span class="line">	ccu. COLUMN_NAME <span class="keyword">AS</span> foreign_column_name,</span><br><span class="line">	tc.is_deferrable,</span><br><span class="line">	tc.initially_deferred</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	information_schema.table_constraints <span class="keyword">AS</span> tc</span><br><span class="line"><span class="keyword">JOIN</span> information_schema.key_column_usage <span class="keyword">AS</span> kcu <span class="keyword">ON</span> tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME</span><br><span class="line"><span class="keyword">JOIN</span> information_schema.constraint_column_usage <span class="keyword">AS</span> ccu <span class="keyword">ON</span> ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	constraint_type = <span class="string">'FOREIGN KEY'</span></span><br><span class="line"><span class="keyword">AND</span> tc. TABLE_NAME = <span class="string">'dimention_goods'</span>;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://itroadmap.sinaapp.com/2014/12/23/postgres-%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external"><em><del>不知道如何防止被流氓网站爬取</del></em></a></p>
<h2>字段详细信息查询语句</h2>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="keyword">col</span>.table_schema,</span><br><span class="line">	<span class="keyword">col</span>. TABLE_NAME,</span><br><span class="line">	<span class="keyword">col</span>.ordinal_position,</span><br><span class="line">	<span class="keyword">col</span>. COLUMN_NAME,</span><br><span class="line">	<span class="keyword">col</span>.data_type,</span><br><span class="line">	<span class="keyword">col</span>.character_maximum_length,</span><br><span class="line">	<span class="keyword">col</span>.numeric_precision,</span><br><span class="line">	<span class="keyword">col</span>.numeric_scale,</span><br><span class="line">	<span class="keyword">col</span>.is_nullable,</span><br><span class="line">	<span class="keyword">col</span>.column_default,</span><br><span class="line">	des.description</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	information_schema. <span class="keyword">COLUMNS</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_description des <span class="keyword">ON</span> <span class="keyword">col</span>. TABLE_NAME :: regclass = des.objoid</span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">col</span>.ordinal_position = des.objsubid</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	table_schema = <span class="string">'XXXX'</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_NAME = <span class="string">'XXXX'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	ordinal_position;</span></span><br></pre></td></tr></table></figure>
<h2>获取所有的表名</h2>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">	tablename</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	pg_tables</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	tablename <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'pg%'</span></span><br><span class="line"><span class="keyword">AND</span> tablename <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'sql_%'</span></span></span><br></pre></td></tr></table></figure>
<h2>##mysql中对入插入的触发器</h2>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span></span><br><span class="line">    <span class="comment">/*[DEFINER = &#123; user | CURRENT_USER &#125;]*/</span></span><br><span class="line">    <span class="keyword">TRIGGER</span> <span class="string">`clinkworld_metadata`</span>.<span class="string">`add_tid_fields_relation`</span> <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="string">`clinkworld_metadata`</span>.<span class="string">`fields_relation`</span></span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> t_id <span class="keyword">INTO</span> @f1_tid_var <span class="keyword">FROM</span> fields_info <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="keyword">NEW</span>.f1_id;</span></span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span> t_id <span class="keyword">INTO</span> @f2_tid_var <span class="keyword">FROM</span> fields_info <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="keyword">NEW</span>.f2_id;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">NEW</span>.f1_tid=@f1_tid_var;</span></span><br><span class="line"><span class="operator"><span class="keyword">SET</span> <span class="keyword">NEW</span>.f2_tid=@f2_tid_var;</span></span><br><span class="line"></span><br><span class="line">    <span class="operator"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span></span><br></pre></td></tr></table></figure>
<h2>主键列信息获取</h2>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">	tc. CONSTRAINT_NAME,</span><br><span class="line">	ccu. TABLE_NAME <span class="keyword">AS</span> primary_table_name,</span><br><span class="line">	ccu. COLUMN_NAME <span class="keyword">AS</span> primary_column_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	information_schema.table_constraints <span class="keyword">AS</span> tc</span><br><span class="line"><span class="keyword">JOIN</span> information_schema.key_column_usage <span class="keyword">AS</span> kcu <span class="keyword">ON</span> tc. CONSTRAINT_NAME = kcu. CONSTRAINT_NAME</span><br><span class="line"><span class="keyword">JOIN</span> information_schema.constraint_column_usage <span class="keyword">AS</span> ccu <span class="keyword">ON</span> ccu. CONSTRAINT_NAME = tc. CONSTRAINT_NAME</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	constraint_type = <span class="string">'PRIMARY KEY'</span></span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Paas和SaaS]]></title>
      <url>http://febsky.me/2016/04/24/2015-07-27-Paas%E5%92%8CSaaS/</url>
      <content type="html"><![CDATA[<p>平台即服务（Platform as a Service, PaaS)是软件即服务（Software as a Service, SaaS)的延伸。</p>
<p>SaaS提供的是定制好的远程软件服务，比如当你订购一个网络销售系统软件，就可以直接使用，不需要代码开发，但是缺点是客制化困难。</p>
<p>PaaS也是远程订购服务，但是你购买的是平台模块服务，如计算能力、数据库、储存和消息传送等。底层的平台已¾¬帮你铺建好，你需要开发自己的上层应用。</p>
<p>PAAS平台应用代表<br>国外：Google、Salesforce、Amazon<br>国内：八百客 用友 百度BAE 新浪SAE 阿里Ali 魔泊云（MoPaaS）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的Theme制作用到的库]]></title>
      <url>http://febsky.me/2016/04/16/2016-04-16-Hexo%E7%9A%84Theme%E5%88%B6%E4%BD%9C%E7%94%A8%E5%88%B0%E7%9A%84%E5%BA%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Hexo 的<a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="external">文档</a>    </p>
</blockquote>
<hr>
<blockquote>
<p>CSS库 <a href="http://stylus-lang.com/docs/executable.html" target="_blank" rel="external">Stylus</a>当时一直很好奇这个<code>.styl</code>结尾的文件到底是个啥,<a href="http://www.zhangxinxu.com/jq/stylus/js.php" target="_blank" rel="external">中文文档地址</a></p>
</blockquote>
<hr>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[某家公司面试题]]></title>
      <url>http://febsky.me/2016/04/14/2016-04-14-%E6%9F%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>先说点个人感想（废话）：</strong>这家公司还是不错的，面了三个星期了，14个工作日，面了12家公司.这家算是除了新浪微博之外比较正规的面试了。只记录技术二面，一面的都是比较基础的Java和Android。主要的有下面两个其余的忘了。</p>
<a id="more"></a>
<h1 id="1-说说ArrayList的底层实现。"><a href="#1-说说ArrayList的底层实现。" class="headerlink" title="1. 说说ArrayList的底层实现。"></a>1. 说说ArrayList的底层实现。</h1><p>延长方式，为什么要选择这种延长方式，而不是一个个延长。（面试官带着我算了一下这几种延长方式时间复杂度，幸亏为了应对微博的面试我简单复习了下算法理论知识，不至于被虐的体无完肤）但是算到log(n)的时候我真心不会了，对数函数早忘没了~~~</p>
<h1 id="2-题目是这样的："><a href="#2-题目是这样的：" class="headerlink" title="2. 题目是这样的："></a>2. 题目是这样的：</h1><ol>
<li>如果你知道接下来每秒的股票的价格，但是你只有一次买的机会，和一次卖的机会如何才能使收益最高。</li>
<li>我当时的解决是用来双重for循环来遍历，然后面试官接着问，你的算法复杂度是多少（就离不开复杂度了，😓），我说O(n²)，他说好，有没有办法一次for循环能解决。额，我解决了半天~~ 都没作对。</li>
</ol>
<h1 id="3-Activity在不同启动模式下的生命周期"><a href="#3-Activity在不同启动模式下的生命周期" class="headerlink" title="3. Activity在不同启动模式下的生命周期"></a>3. Activity在不同启动模式下的生命周期</h1><p>恩，好像有个<code>onNewIntent()</code>.记不清了,这个我不会。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新浪微博笔试最后一题]]></title>
      <url>http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E7%AC%94%E8%AF%95%E6%9C%80%E5%90%8E%E4%B8%80%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是个程序找错题，找出<strong>不合理的地方</strong>并且给出解决方案。明确的说应该是三处错误，我当时找出三处但是有一处没有改对。程序大体的代码是这样的，最后的那个枚举类型有点不太确定的地方。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.febsky.temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinaWeiboActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Handler handler;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        setContentView(R.layout.activity_sina_weibo);</span><br><span class="line"></span><br><span class="line">        View.OnClickListener listener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button).setOnClickListener(listener);</span><br><span class="line"></span><br><span class="line">        Manager.getInstance(<span class="keyword">this</span>).setListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Manager &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        Context context;</span><br><span class="line">        View.OnClickListener listener;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Manager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Manager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Manager.INSTANCE.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Manager.INSTANCE.context = context;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.listener = listener;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案我就不给了，万一微博真的还在用这个题面试。我岂不是成了微博的醉人0^0，想知道答案的可以留言，我回复邮件。</p>
<p>其余的笔试题参照<strong><a href="">上篇</a></strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年四月新浪微博面试部分]]></title>
      <url>http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAndroid%E9%9D%A2%E8%AF%95%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<p>整理中</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年四月新浪微博面试体验]]></title>
      <url>http://febsky.me/2016/04/12/2016-04-12-%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>先说点个人感想（废话）：</strong>真心挺感谢新浪能给这个面试机会，作为一个非重点本科毕业学生来说，能给个面试机会已经非常不错了。不想某些大公司筛选简历一看工作年限，二看出身。很可惜自己能力有限在三面的时候彻底被虐了，今年算是止步于三面了。但是还是学到很多东西的，如果再有个一到两年的沉淀，详细自己还是可以胜任的。本来不想发出来的不知道发出来会不会影响到人家的面试。</p>
<a id="more"></a>
<p>约的是下午四点的面试，面到了差不多7点。时间还是挺长的。三面完了等了打约20分钟，人事告诉我他们要的是高级工程师。然后~~~</p>
<h1 id="2016四月新浪微博面试笔试题"><a href="#2016四月新浪微博面试笔试题" class="headerlink" title="2016四月新浪微博面试笔试题"></a>2016四月新浪微博面试笔试题</h1><h2 id="1-静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？"><a href="#1-静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？" class="headerlink" title="1. 静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？"></a>1. 静态内部类，内部类，匿名内部类，内部类为啥持有外部类的引用，是this吗？</h2><h2 id="2-AraayList-和Vector-的区别"><a href="#2-AraayList-和Vector-的区别" class="headerlink" title="2. AraayList 和Vector 的区别"></a>2. AraayList 和Vector 的区别</h2><ol>
<li>Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的</li>
<li>记住Vector与Hashtable是旧的，是java一诞生就提供了的，它们是线程安全的，ArrayList与HashMap是java2时才提供的</li>
<li>ArrayList与Vector都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加ArrayList与Vector的存储空间，Vector默认增长为原来两倍，而ArrayList的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的1.5倍） ArrayList与Vector都可以设置初始的空间大小，Vector还可以设置增长的空间大小，而ArrayList没有提供设置增长空间的方法。<br>总结：即Vector增长原来的一倍，ArrayList增加原来的0.5倍。</li>
</ol>
<h2 id="3-RemoteView-在什么地方用"><a href="#3-RemoteView-在什么地方用" class="headerlink" title="3. RemoteView 在什么地方用"></a>3. RemoteView 在什么地方用</h2><p>到目前为止，我发现RemoteView会用在两个地方：一个是在AppWidget,另外一个是在Notification. </p>
<h2 id="4-Fragment和Activity的生命周期"><a href="#4-Fragment和Activity的生命周期" class="headerlink" title="4. Fragment和Activity的生命周期"></a>4. Fragment和Activity的生命周期</h2><h2 id="5-Android-中的进程有哪些，说出它们的优先级"><a href="#5-Android-中的进程有哪些，说出它们的优先级" class="headerlink" title="5. Android 中的进程有哪些，说出它们的优先级"></a>5. Android 中的进程有哪些，说出它们的优先级</h2><h2 id="6-view和Surfaceview的区别"><a href="#6-view和Surfaceview的区别" class="headerlink" title="6. view和Surfaceview的区别"></a>6. view和Surfaceview的区别</h2><h2 id="7-onInterceptTouchEvent、onTouchEvent-的区别"><a href="#7-onInterceptTouchEvent、onTouchEvent-的区别" class="headerlink" title="7. onInterceptTouchEvent、onTouchEvent 的区别"></a>7. onInterceptTouchEvent、onTouchEvent 的区别</h2><ol>
<li><p>onTouchEvent同样也是在view中定义的一个方法。处理传递到view 的手势事件。手势事件类型包括ACTION_DOWN,ACTION_MOVE,ACTION_UP,ACTION_CANCEL四种事件。<br>一旦onTouchEvent方法被调用，并返回true则这个手势事件就结束了，并不会向下传递到子控件。</p>
</li>
<li><p>onInterceptTouchEvent是在ViewGroup里面定义的。Android中的layout布局类一般都是继承此类的。onInterceptTouchEvent是用于拦截手势事件的，每个手势事件都会先调用onInterceptTouchEvent<br>此方法返回false，则手势事件会向子控件传递；返回true，则调用onTouchEvent方法。  </p>
</li>
</ol>
<h2 id="8-switch-中可以用byte吗，可以用long吗，可以用String吗？"><a href="#8-switch-中可以用byte吗，可以用long吗，可以用String吗？" class="headerlink" title="8. switch 中可以用byte吗，可以用long吗，可以用String吗？"></a>8. switch 中可以用byte吗，可以用long吗，可以用String吗？</h2><p>答：switch 只能添加  <code>char,byte,short,int,Character,Byte,Short,Interger,String ,enum</code></p>
<h2 id="9-try-catch-finally-运行流程"><a href="#9-try-catch-finally-运行流程" class="headerlink" title="9. try catch finally 运行流程"></a>9. try catch finally 运行流程</h2><h2 id="10-是一个程序找错题。"><a href="#10-是一个程序找错题。" class="headerlink" title="10. 是一个程序找错题。"></a>10. 是一个程序找错题。</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-04-11-Android四大组件之Service概念]]></title>
      <url>http://febsky.me/2016/04/11/2016-04-11-Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="Service-与-Thread-的区别"><a href="#Service-与-Thread-的区别" class="headerlink" title="Service 与 Thread 的区别"></a>Service 与 Thread 的区别</h1><p>很多时候，你可能会问，为什么要用 Service，而不用 Thread 呢，因为用 Thread 是很方便的，比起 Service 也方便多了，下面我详细的来解释一下。</p>
<a id="more"></a>
<ol>
<li>Thread：Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</li>
<li>Service：Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。因此请不要把 Service 理解成线程，它跟线程半毛钱的关系都没有！<br>&emsp;&emsp; 既然这样，那么我们为什么要用 Service 呢？其实这跟 android 的系统机制有关，我们先拿 Thread 来说。Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。<br>&emsp;&emsp;举个例子：如果你的 Thread 需要不停地隔一段时间就要连接服务器做某种同步的话，该 Thread 需要在 Activity 没有start的时候也在运行。这个时候当你 start 一个 Activity 就没有办法在该 Activity 里面控制之前创建的 Thread。因此你便需要创建并启动一个 Service ，在 Service 里面创建、运行并控制该 Thread，这样便解决了该问题（因为任何 Activity 都可以控制同一 Service，而系统也只会创建一个对应 Service 的实例）。</li>
</ol>
<p>因此你可以把 Service 想象成一种消息服务，而你可以在任何有 Context 的地方调用 Context.startService、Context.stopService、Context.bindService，Context.unbindService，来控制它，你也可以在 Service 里注册 BroadcastReceiver，在其他地方通过发送 broadcast 来控制它，当然这些都是 Thread 做不到的。</p>
<h1 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h1><p><code>onCreate``onStart``onDestroy``onBind</code></p>
<ol>
<li>被启动的服务的生命周期：如果一个Service被某个Activity 调用 Context.startService 方法启动，那么不管是否有Activity使用bindService绑定或unbindService解除绑定到该Service，该Service都在后台运行。如果一个Service被startService 方法多次启动，那么onCreate方法只会调用一次，onStart将会被调用多次（对应调用startService的次数），并且系统只会创建Service的一个实例（因此你应该知道只需要一次stopService调用）。该Service将会一直在后台运行，而不管对应程序的Activity是否在运行，直到被调用stopService，或自身的stopSelf方法。当然如果系统资源不足，android系统也可能结束服务。</li>
<li>被绑定的服务的生命周期：如果一个Service被某个Activity 调用 Context.bindService 方法绑定启动，不管调用 bindService 调用几次，onCreate方法都只会调用一次，同时onStart方法始终不会被调用。当连接建立之后，Service将会一直运行，除非调用Context.unbindService 断开连接或者之前调用bindService 的 Context 不存在了（如Activity被finish的时候），系统将会自动停止Service，对应onDestroy将被调用。</li>
<li>被启动又被绑定的服务的生命周期：如果一个Service又被启动又被绑定，则该Service将会一直在后台运行。并且不管如何调用，onCreate始终只会调用一次，对应startService调用多少次，Service的onStart便会调用多少次。调用unbindService将不会停止Service，而必须调用 stopService 或 Service的 stopSelf 来停止服务。</li>
<li>当服务被停止时清除服务：当一个Service被终止（<ul>
<li>调用stopService； </li>
<li>调用stopSelf；</li>
<li>不再有绑定的连接（没有被启动））时，onDestroy方法将会被调用，在这里你应当做一些清除工作，如停止在Service中创建并运行的线程。</li>
</ul>
</li>
</ol>
<blockquote>
<p>特别注意：</p>
<ol>
<li>你应当知道在调用 bindService 绑定到Service的时候，你就应当保证在某处调用 unbindService 解除绑定（尽管 Activity 被 finish 的时候绑定会自动解除，并且Service会自动停止)  </li>
<li>你应当注意 使用 startService 启动服务之后，一定要使用 stopService停止服务，不管你是否使用bindService；</li>
<li>同时使用 startService 与 bindService 要注意到，Service 的终止，需要unbindService与stopService同时调用，才能终止 Service，不管 startService 与 bindService 的调用顺序，如果先调用 unbindService 此时服务不会自动终止，再调用 stopService 之后服务才会停止，如果先调用 stopService 此时服务也不会终止，而再调用 unbindService 或者 之前调用 bindService 的 Context 不存在了（如Activity 被 finish 的时候）之后服务才会自动停止；</li>
<li>当在旋转手机屏幕的时候，当手机屏幕在“横”“竖”变换时，此时如果你的 Activity 如果会自动旋转的话，旋转其实是 Activity 的重新创建，因此旋转之前的使用 bindService 建立的连接便会断开（Context 不存在了），对应服务的生命周期与上述相同。</li>
<li>在 sdk 2.0 及其以后的版本中，对应的 onStart 已经被否决变为了 onStartCommand，不过之前的 onStart 任然有效。这意味着，如果你开发的应用程序用的 sdk 为 2.0 及其以后的版本，那么你应当使用 onStartCommand 而不是 onStart。</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-04-10-希尔排序（改进的插入排序）Java实现]]></title>
      <url>http://febsky.me/2016/04/10/2016-04-10-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%88%E6%94%B9%E8%BF%9B%E7%9A%84%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%89Java%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p><strong>希尔排序：</strong>将无序数组分割为若干个子序列，子序列不是逐段分割的，而是相隔特定的增量的子序列，对各个子序列进行插入排序；然后再选择一个更小的增量，再将数组分割为多个子序列进行排序……最后选择增量为1，即使用直接插入排序，使最终数组成为有序。   </p>
<a id="more"></a>
<p><strong>增量的选择：</strong>在每趟的排序过程都有一个增量，至少满足一个规则 增量关系 d[1] &gt; d[2] &gt; d[3] &gt;..&gt; d[t] = 1 (t趟排序)；根据增量序列的选取其时间复杂度也会有变化，这个不少论文进行了研究，在此处就不再深究；本文采用首选增量为n/2,以此递推，每次增量为原先的1/2，直到增量为1；</p>
<p>如下图：<br><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/04/10/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg" alt=""></p>
<p><strong>【参考文章】</strong></p>
<p><a href="http://blog.csdn.net/cjf_iceking/article/details/7951481" target="_blank" rel="external">希尔排序</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse中的Android项目导入AndroidStudio中的错误]]></title>
      <url>http://febsky.me/2016/04/09/2016-04-09-Eclipse%E4%B8%AD%E7%9A%84Android%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5AndroidStudio%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>#1、图片资源格式错误</p>
<p><strong>错误Log：</strong></p>
<font color="red"><code>AAPT err(Facade for 205525644) : No Delegate set : lost message:libpng error: Not a PNG file</code></font>

<p><strong>截图展示：</strong><br><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/04/09/09-eclipse%E5%AF%BC%E5%85%A5AS%E9%94%99%E8%AF%AF1.png" alt=""></p>
<a id="more"></a>
<p><strong>引发原因：</strong><br>这个引发的原因主要是没有通过正规的途径修改图片的格式，比如原来的有张图片名字为<code>icon.jpg</code>,而你没有用图片编辑器，直接修改了图片的后缀名，改为了<code>icon.png</code>,虽然图片能正常打开，但是AndroidStudio对图片资源文件的检查比较严格。一般引起的原因要么是自己作死，自己改了后缀名;另一种是你盗用别人的资源文件，反编译的时候图片文件出错（一般发生在<code>.9</code>图片）</p>
<p><strong>解决方案：</strong>有时候Log中会标出是哪张图片出了问题，这种比较好解决，直接找到这个图片，然后进行修改或者重新做一张图就好了。还有一种就是像我这个一样的错误，没有标出到底是哪个图片出错了。这时候比较麻烦了，项目是自己的还好，你可以大体猜测一下这个项目的哪些图片可能出错。如果不是自己的只能逐个排查。</p>
<p><strong>错误图片排查方式：</strong><br>在studio中依次点开每个后缀名为png（因为我的错误是说某个图片不是png，从这个意思可以推测说的是某个以png为后缀的图片其真实格式不是png，所以我们队png图片进行排查）的图片（如图）。打开后在AndroidStudio的图片编辑器中的右上角会显示出图片的真实格式，查看这个格式是否和图片的后缀名一样，找到不一样的，进行修改。</p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/04/09/09-AndroidStudio%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E6%9F%A5%E7%9C%8B.png" alt="09-AndroidStudio图片格式查看"></p>
<h1 id="2、我也不知道这是个什么错"><a href="#2、我也不知道这是个什么错" class="headerlink" title="2、我也不知道这是个什么错"></a>2、我也不知道这是个什么错</h1><p><strong>错误Log</strong>：</p>
<font color="red"><code>Error:Dependency tasksystem:SlidingMenu:unspecified on project app resolves to an APK archive which is not supported as a compilation dependency. File: /Users/xxxx/Downloads/tasksystem/SlidingMenu/build/outputs/apk/SlidingMenu-release-unsigned.apk</code></font>

<p><strong>出现原因：</strong><br>出现该问题unspecified on project app resolves to an APK archive which is not supported as a compilation dependency的情形可能是：创建了两个Module，其中一个Module依赖另一个Module而导致了出现该问题；</p>
<p>如果在Android Studio中，有ModuleA和ModuleB，我们希望ModuleA依赖ModuleB，运行时候可能会出现该问题。</p>
<p><strong>解决方法：</strong></p>
<p>查看被依赖的ModuleB的build.gradle，里面可以看到：<br><code>apply plugin: &#39;com.android.application&#39;</code></p>
<p>将其修改为<br><code>apply plugin: &#39;com.android.library&#39;</code><br>此时，Gradle将编译称为一个Library，也就是库，运行之后，如果出现这个问题：Error:Library projects cannot set applicationId. applicationId is set to ‘package_name’ in default config.，那是因为一个库不允许设置applicationId，需要将builde.gradle — android — defaultConfig中的applicationId删除；</p>
<p>如果说，我们ModuleB仍然需要生成apk，则我们需要将其中公共的代码放到一个Module，作为一个support的库；<br><a href="http://stackoverflow.com/questions/27536491/how-to-import-android-project-as-library-and-not-compile-it-as-apk-android-stud" target="_blank" rel="external">http://stackoverflow.com/questions/27536491/how-to-import-android-project-as-library-and-not-compile-it-as-apk-android-stud</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[插入排序Java实现]]></title>
      <url>http://febsky.me/2016/04/09/2016-04-09-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="1、算法描述"><a href="#1、算法描述" class="headerlink" title="1、算法描述"></a>1、算法描述</h1><p>假定n是数组的长度，</p>
<p>首先假设第一个元素被放置在正确的位置上，这样仅需从1-n-1范围内对剩余元素进行排序。对于每次遍历，从0-i-1范围内的元素已经被排好序，</p>
<p>每次遍历的任务是：通过扫描前面已排序的子列表，将位置i处的元素定位到从0到i的子列表之内的正确的位置上。</p>
<a id="more"></a>
<p>将arr[i]复制为一个名为target的临时元素。</p>
<p>向下扫描列表，比较这个目标值target与arr[i-1]、arr[i-2]的大小，依次类推。</p>
<p>这个比较过程在小于或等于目标值的第一个元素(arr[j])处停止，或者在列表开始处停止（j=0）。</p>
<p>在arr[i]小于前面任何已排序元素时，后一个条件（j=0）为真，</p>
<p>因此，这个元素会占用新排序子列表的第一个位置。</p>
<p>在扫描期间，大于目标值target的每个元素都会向右滑动一个位置（arr[j]=arr[j-1]）。</p>
<p>一旦确定了正确位置j，</p>
<p>目标值target（即原始的arr[i]）就会被复制到这个位置。</p>
<p>与选择排序不同的是，插入排序将数据向右滑动，并且不会执行交换。</p>
<h1 id="2、举例描述"><a href="#2、举例描述" class="headerlink" title="2、举例描述"></a>2、举例描述</h1><p><code>10 3 8 0 6 9 2</code></p>
<p>当使用插入排序进行升序排序时，排序的步骤是这样的：</p>
<p><code>10 3 8 0 6 9 2</code> // 取元素3，去和10进行对比</p>
<p><code>3 10 8 0 6 9 2</code> // 由于10比3大，将10向后移动，将3放置在原来10的位置；再取8与前一个元素10进行对比</p>
<p><code>3 8 10 0 6 9 2</code> // 同理移动10；然后8再和3比，8大于3，所以不再移动；如此重复下去</p>
<p>……</p>
<p><code>0 2 3 6 8 9 10</code></p>
<p>也就是说，我们每一次取一个元素，都要将该元素与之前已经排序好的元素进行比较。</p>
<p>插入排序的最差时间复杂度为O(n^2)。同时，该算法不需要开辟额外的空间，都是在原空间上进行移动操作。</p>
<h1 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by liuqiang on 16/4/8.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StraightInsertionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"排序前："</span>, arr);</span><br><span class="line">        straightInsertionSort(arr);</span><br><span class="line">        print(<span class="string">"排序后："</span>, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 思想：将一个记录插入到已经排序好的有序表中，从而得到一个新的、记录数增1的有序表</span><br><span class="line">     * 左侧有序</span><br><span class="line">     * 这个算法原理挺简单，主要下标的运算比较烦人。画个图就容易理解了</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args 待排序的数组</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">straightInsertionSort</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp, i, j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; args.length; i++) &#123;    <span class="comment">//假设数组左侧第一个元素（下标为0）已经有序，</span></span><br><span class="line">            <span class="keyword">if</span> (args[i] &lt; args[i - <span class="number">1</span>]) &#123;    <span class="comment">//让当前元素和有序表的最后一个元素比较</span></span><br><span class="line">                temp = args[i];    <span class="comment">//记录当前元素</span></span><br><span class="line">                <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; args[j] &gt; temp; j--) &#123;</span><br><span class="line">                    args[j + <span class="number">1</span>] = args[j];    <span class="comment">//有序集合中大于当前元素的都后移</span></span><br><span class="line">                &#125;</span><br><span class="line">                args[j + <span class="number">1</span>] = temp;    <span class="comment">//插入到正确位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 交换数组args 中的下标为 i 和 j 的元素</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     * <span class="doctag">@param</span> i</span><br><span class="line">     * <span class="doctag">@param</span> j</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 数组打印辅助方法</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args 要打印的数组</span><br><span class="line">     * <span class="doctag">@param</span> tag  打印数组的标签</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String tag, <span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(tag == <span class="keyword">null</span> ? <span class="string">""</span> : tag + <span class="string">"数组的值: ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m : args) &#123;</span><br><span class="line">            System.out.print(m + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[选择排序Java实现]]></title>
      <url>http://febsky.me/2016/04/09/2016-04-09-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>选择排序的基本思想是每一趟在 n-i+i(i=1,2,3,…,n-1)个记录中选取关键字最小的记录作为有序序列的第i个记录。</p>
<a id="more"></a>
<h1 id="1、简单的选择排序"><a href="#1、简单的选择排序" class="headerlink" title="1、简单的选择排序"></a>1、简单的选择排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by liuqiang on 16/4/8.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSelectionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"排序前："</span>, arr);</span><br><span class="line">        simpleSelectionSort(arr);</span><br><span class="line">        print(<span class="string">"排序后："</span>, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> args 待排序的数组</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simpleSelectionSort</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            min = i;    <span class="comment">//假设当前位置的下标为最小值的下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; args.length; j++) &#123;    <span class="comment">//循环当前下标之后的数据</span></span><br><span class="line">                <span class="keyword">if</span> (args[min] &gt; args[j]) &#123;    <span class="comment">//如果有小于当前最小值的关键字</span></span><br><span class="line">                    min = j;    <span class="comment">//保存最小值的关键字</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (min != i) &#123;    <span class="comment">//如果找到了最小值进行交换</span></span><br><span class="line">                swap(args, min, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 交换数组args 中的下标为 i 和 j 的元素</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     * <span class="doctag">@param</span> i</span><br><span class="line">     * <span class="doctag">@param</span> j</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 数组打印辅助方法</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args 要打印的数组</span><br><span class="line">     * <span class="doctag">@param</span> tag  打印数组的标签</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String tag, <span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(tag == <span class="keyword">null</span> ? <span class="string">""</span> : tag + <span class="string">"数组的值: ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m : args) &#123;</span><br><span class="line">            System.out.print(m + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong>尽管与冒泡排序同为O(n²)，但简单的选择排序在性能上还是要略优于冒泡排序的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[冒泡排序Java实现]]></title>
      <url>http://febsky.me/2016/04/08/2016-04-08-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，知道没有反序的记录为止。冒泡的实现上有很多种变化，我们主要介绍3中。</p>
<a id="more"></a>
<h1 id="1、最简单的冒泡排序"><a href="#1、最简单的冒泡排序" class="headerlink" title="1、最简单的冒泡排序"></a>1、最简单的冒泡排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by liuqiang on 16/4/8.</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        print(arr);</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> args 待排序的数组</span><br><span class="line">     * 思路：让每一个关键字都和他后面的每一个关键字比较，</span><br><span class="line">     * 如果大则交换，这样第一个位置的关键字就在一次循环</span><br><span class="line">     * 之后变成了最小值</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; args.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] &gt; args[j]) &#123;</span><br><span class="line">                    swap(args, i, j);    <span class="comment">//交换数组中的两个元素的位置</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 交换数组args 中的下标为 i 和 j 的元素</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     * <span class="doctag">@param</span> i</span><br><span class="line">     * <span class="doctag">@param</span> j</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 数组打印辅助方法</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"数组的值: ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m : args) &#123;</span><br><span class="line">            System.out.print(m + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实以上代码严格意义上来说不算是冒泡排序算法，因为他不满足“<font color="red">两两比较相邻记录</font>”的冒泡思想。它应该算是最简单的交换排序而已。</p>
<h1 id="2、真正的冒泡"><a href="#2、真正的冒泡" class="headerlink" title="2、真正的冒泡"></a>2、真正的冒泡</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 真正的冒泡排序算法</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> args 待排序的数组</span><br><span class="line">     * </span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = args.length - <span class="number">2</span>; j &gt;= i; j--) &#123;    <span class="comment">//从后往前循环</span></span><br><span class="line">                <span class="keyword">if</span> (args[j] &gt; args[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(args, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort3</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;    <span class="comment">//趟数</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; args.length - <span class="number">1</span> - i; j++) &#123;  <span class="comment">//比较次数</span></span><br><span class="line">               <span class="keyword">if</span> (args[j] &gt; args[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                   swap(args, j, j + <span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="3、冒泡排序的优化"><a href="#3、冒泡排序的优化" class="headerlink" title="3、冒泡排序的优化"></a>3、冒泡排序的优化</h1><p>我们来看这个序列的排序<code>{2,1,3,4,5,6,7,8,9}</code>如果用上面的排序算法，当i=0的时候交换一次之后，这个序列已经有序，但是程序依然会从i=0 遍历到i=args.length 。所以当i=1的时候没有进行任何的数据交换，就说明这个序列有序了，可以不用进行后面的循环操作了。为了实现这个想法，我没可以设置一个标志位，flag来控制循环的结束。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">    * 冒泡排序的优化</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@param</span> args</span><br><span class="line">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort4</span><span class="params">(<span class="keyword">int</span>[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;    <span class="comment">//用flag来做标记为，用来标识当前序列是否发生了数据交换</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length &amp;&amp; flag; i++) &#123;</span><br><span class="line">           flag = <span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = args.length - <span class="number">2</span>; j &gt;= i; j--) &#123;    <span class="comment">//从后往前循环</span></span><br><span class="line">               <span class="keyword">if</span> (args[j] &gt; args[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                   swap(args, j, j + <span class="number">1</span>);</span><br><span class="line">                   flag = <span class="keyword">true</span>;    <span class="comment">//发生了数据交换设置为true</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio中常用的插件]]></title>
      <url>http://febsky.me/2016/03/23/2016-03-23-AndroidStudio%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>为什么要插件，很多时候不必手撸代码</p>
<h2 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h2><p><a href="https://plugins.jetbrains.com/plugin/7654?pr=idea" target="_blank" rel="external">GsonFormat</a>更加给定的json字符串，生成对应的java bean的插件，个人非常喜欢，安装后要重启</p>
<h2 id="Android-Parcelable-Code-Generator"><a href="#Android-Parcelable-Code-Generator" class="headerlink" title="Android Parcelable Code Generator"></a>Android Parcelable Code Generator</h2><p> 这里用的mac版本的AndroidStudio 执行组合快捷键command+”,”，打开AS偏好设置页面，找到plugin选项，输入Parcelable搜索，搜索出来的第一个五颗星的就是，点击右边的install plugin,等装完后会提示你重启as</p>
<h2 id="ButterKnifeZelezny"><a href="#ButterKnifeZelezny" class="headerlink" title="ButterKnifeZelezny"></a>ButterKnifeZelezny</h2><p>作用：ButterKnife注解想必都用过，安装ButterKnife插件，快速生成findViewById。</p>
<p>安装步骤：Android studio-Settings-Plugins-搜: ButterKnifeZelezny 星级最高的就是了</p>
<p><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">GitHub地址</a></p>
<p><strong>使用方式：</strong></p>
<ul>
<li>首先项目中要引入ButterKnife库（这不是废话吗）</li>
<li>在Activity的onCreate()方法中，ButterKnife  bind之后，光标放到<code>setContentView(R.layout.xxx);</code> 的R.layout.xxx上</li>
<li>然后 <code>Comand + N</code> (mac快捷键，win上好像是Ctrl+o吧？)</li>
<li>然后选择 <code>Generate ButterKnife Injections</code> </li>
<li>ok 剩下的自己搞吧</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天干地支计时推算歌诀]]></title>
      <url>http://febsky.me/2016/03/19/2016-03-19-%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF%E8%AE%A1%E6%97%B6%E6%8E%A8%E7%AE%97%E6%AD%8C%E8%AF%80/</url>
      <content type="html"><![CDATA[<h1 id="一、年上起月法—《五虎遁歌诀》"><a href="#一、年上起月法—《五虎遁歌诀》" class="headerlink" title="一、年上起月法—《五虎遁歌诀》"></a>一、年上起月法—《五虎遁歌诀》</h1><p>甲已之年丙作首，乙庚之年戊为头。<br>丙辛之岁寻庚上，丁壬壬寅顺水流。<br>若问戊癸何处发，甲寅之上好追求。  </p>
<a id="more"></a>
<h1 id="二、日上起时法-《五鼠遁歌诀》"><a href="#二、日上起时法-《五鼠遁歌诀》" class="headerlink" title="二、日上起时法-《五鼠遁歌诀》"></a>二、日上起时法-《五鼠遁歌诀》</h1><p>甲已还生甲，乙庚丙作初。<br>丙辛从戊起，丁壬庚子居。<br>戊癸何方发，壬子是真途。  </p>
<h1 id="三、-盲师月上起日法"><a href="#三、-盲师月上起日法" class="headerlink" title="三、 盲师月上起日法"></a>三、 盲师月上起日法</h1><p>甲子青虎初一善    虎蛇金戌子牛献<br>乙丑戊申十二猴    送位前已九鼠楼<br>丙寅癸酉念三江    寅宋初未九牛香<br>丁卯红兔初四寅    宋龙马金九月旬<br>戊辰壬戌十四蛇    寅龙后二五六八<br>己丙戌念五 羊    寅龙蛇羊七九藏<br>庚午白龙初六猪    火局后六金牛初<br>辛未登卯十八天    壬马金鸡十牛先<br>壬申丁酉念九刚    鸡狗蛇羊鼠上仓<br>癸酉壬辰初十羊    正四后五燕八江<br>甲戌丙辰念一狗    龙虎骑著鸡羊走<br>乙亥白猪初二天    送初羊狗牛开山<br>丙子青蛇十三交    金局前三兔火烧<br>丁丑黄蛇念三卯    二三入六八牛旬<br>戊寅癸亥初五戌    龙蛇六八子前七<br>已卯丁亥十七牛    青蛇原玉上羊楼<br>康辰白蛇念八辰    辰午金猪照天门<br>辛已乙亥初九暗    辰七前六八十天<br>壬午黄猪十九狗    二五七九鼠上走<br>癸未青马初一天    报刚周刀江牛翻<br>甲申戊子十二卯    送江前堂五七小<br>乙酉癸丑念二章    寅卯堂章七子乡<br>丙戌红羊初三鸡    二三入六八子一<br>丁亥辛丑十四鼠    壬安后送西周猪<br>戊子乙丑念六卯    二四六七狗上咬<br>己丑黄羊初七章    二五双七子一良<br>庚寅癸未十八酉    寅辰原迎猪西丑<br>辛卯丁丑念八子    二五七九鼠上起<br>壬辰黑猴初十寅    子报前五六九辰<br>癸巳红猴念一蛇    寅辰唐迎猪牛霞<br>甲午庚寅初二营    林堂马猴猪十程<br>乙未乙酉十二亥    火局前三蛇猴在<br>丙申黄鸡念四虎    理玉琴章鸡合猪<br>丁酉癸卯初五印    木局出果后八进<br>戊戌红虑十六金    蛇羊金狗鼠上分<br>已亥白鸡念七猪    牛形八裏未月初<br>庚子乙卯初九寅    化刀后六初牛林<br>辛丑黄兔十九初    送堂未狼十一鼠<br>壬寅甲戊三十猴    正三四六九月牛<br>癸卯戊辰十一亥    秦送双蛇酉牛在<br>甲辰壬辰念二寅    送迎初马九月旬<br>乙巳丁亥初三堂    报刚羊马酉牛良<br>丙午庚辰十五猴    后龙周刀安九牛<br>丁未青龙念五形    玉子六九在长营<br>戊申己亥初七寅    勤虎后七上九辰<br>己酉癸亥十八堂    龙马虎鸡猪牛房<br>庚戌红蛇念八申    送玉周马十一飞<br>辛亥壬子初九江    子报后五玉猴堂<br>壬子红鼠念一天    龙虎蛇羊鸡上山<br>癸丑白马初二刚    子送己鸡五营乡<br>甲寅青鼠十三羊    玉子五七刀后堂<br>乙卯戊子念四戌    琴玉周刀才子西<br>丙辰壬午初六丑    玉马金子后八九<br>丁巳丙午十七刚    林周进国才子乡<br>戊午庚子念七羊    送刀长江马牛王<br>乙未忆未初八良    送龙马金猪过双大羊<br>庚申黄羊十九牛    林刚化章金黄猴<br>辛酉甲寅三十龙    正三四六猪猴行<br>壬戌戊申十一章    琴送双蛇七九良<br>癸亥壬申念二鸡    送蛇章元鸡子西<br>甲子丙寅初三延    送章未行鸡戌见<br>乙丑庚寅十五卯    寅蛇羊鸡戌淹好<br>丙寅甲申念六章    寅蛇申青淹国乡<br>丁卯戊寅初七酉    送堂后勤延国九<br>戊辰壬寅十七鼠    二四六九腊月牛<br>乙巳丁酉念八林    二三入五七九辰<br>庚午壬辰初九章    寅龙羊鸡后五堂<br>辛未丙辰二十金    正三四六七九申<br>壬申庚戌初一亥    寅蛇申章酉花开<br>癸酉甲辰十三寅    正五后三申酉形国人<br>甲戌红兔念四蛇    蛇羊鸡戌延来查<br>乙亥壬戌初五申    正四六九后鸡鼠延新<br>丙子丙戌十六化    寅龙羊鸡十一腊<br>丁丑庚辰念七寅    二四六九腊月神<br>戊寅青猪初八辰    二龙双马鸡鼠人<br>己卯己亥十九未    二龙羊马鸡国贵<br>庚辰癸巳念九良    玉堂琴英青国长<br>辛巳红猪十二天    玉良琴迎后蛇延<br>壬午白猪念三辰    玉马金鸡化天门<br>癸未青蛇初四未    玉琴鸡戌子延会  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发中常用的库]]></title>
      <url>http://febsky.me/2016/03/18/2016-03-18-Android%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="1、网络请求库"><a href="#1、网络请求库" class="headerlink" title="1、网络请求库"></a>1、网络请求库</h1><ol>
<li><del>HttpClient</del> Apache 中HttpClient库的简单封装，在Android中已经弃用。</li>
<li><a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">AsyncHttpClient</a> <em>An asynchronous, callback-based Http client for Android built on top of Apache’s HttpClient libraries.</em>（好像是最早的一个吧。我以前用过后来不用了）与volley一样是异步网络库，但volley是封装的httpUrlConnection，它是封装的httpClient，而android平台不推荐用HttpClient了，所以这个库已经不适合android平台了。</li>
<li><a href="https://github.com/square/okhttp" target="_blank" rel="external">Okhttp</a>这货出身好啊。square公司，这个公司开源了好多Android的框架。这个偏底层。据说很快。在AndroidStudio能搜到。okhttp是高性能的http库，支持同步、异步，而且实现了spdy、http2、websocket协议，api很简洁易用，和volley一样实现了http协议的缓存。picasso就是利用okhttp的缓存机制实现其文件缓存，实现的很优雅，很正确，反例就是UIL（universal image loader），自己做的文件缓存，而且不遵守http缓存机制。</li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>高层封装，底层使用okhttp。也是square公司提供。其实它更像一个restful 请求客户端。</li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a> Google提供，高层封装。底层使用<code>HttpURLConnection</code>或者<code>HttpClient</code>（HttpClient在2.x之后弃用了）volley是一个简单的异步http库，仅此而已。缺点是不支持同步，这点会限制开发模式；不能post大数据，所以不适合用来上传文件。</li>
<li><a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="external">https://github.com/kevinsawicki/http-request</a>据说还有个这玩意，没用过，真心一次都没用过，上面那几个都试用过了。</li>
</ol>
<p>P.S. 所谓的偏底层是指，这个库的网络请求是在子线程中完成的，它的回调接口中不能直接更新UI。即库的内部没有封装Android 中的Handler。</p>
<h1 id="2、网络图片加载库"><a href="#2、网络图片加载库" class="headerlink" title="2、网络图片加载库"></a>2、网络图片加载库</h1><ol>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a> 应该是最早的一个吧</li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a> 他爹是Facebook，有完善的中文文档</li>
<li><a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a> 他爹是square，底层应该是用的okhttp，而且是注解的方式</li>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a> 据说是Google推荐使用的，用法和<code>Picasso</code>很相似</li>
</ol>
<h1 id="3、-gif-图片展示"><a href="#3、-gif-图片展示" class="headerlink" title="3、(gif)图片展示"></a>3、(gif)图片展示</h1><ol>
<li><a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">android-gif-drawable</a> 和前面不同的是这个是个gif图片展示的库</li>
<li><a href="http://code.google.com/p/gifview/" target="_blank" rel="external">GifView</a> 顾名思义这也是个gif图片播放的view，github上也有个同名的不知道是不是同一个。我没用过。</li>
</ol>
<h1 id="4、SQLite-ORM"><a href="#4、SQLite-ORM" class="headerlink" title="4、SQLite ORM"></a>4、SQLite ORM</h1><ol>
<li><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">greenDAO</a> Orm框架</li>
<li><a href="https://github.com/realm/realm-java" target="_blank" rel="external">Realm</a> Realm is a mobile database: a replacement for SQLite &amp; ORMs(一个据说能跨平台的数据库可以替换SQLite)</li>
</ol>
<h1 id="5、开发框架"><a href="#5、开发框架" class="headerlink" title="5、开发框架"></a>5、开发框架</h1><p>所谓的开发框架，就是包含了Android开发中常用的基本的库，像什么网络请求了，图片异步加载，文件上传，json数据解析了，文件下载，数据库的管理了，等等一系列工具的合集~~~前两个试用过。后两个几乎没见过。</p>
<ol>
<li><a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">Afinal框架</a></li>
<li><a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">xUtils框架</a></li>
<li><a href="https://github.com/white-cat/ThinkAndroid" target="_blank" rel="external">ThinkAndroid</a></li>
<li><a href="https://github.com/gdpancheng/LoonAndroid" target="_blank" rel="external">LoonAndroid</a></li>
</ol>
<h1 id="6、消息通信"><a href="#6、消息通信" class="headerlink" title="6、消息通信"></a>6、消息通信</h1><p>为了简化android应用内组件通信</p>
<ol>
<li><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a> 和<code>greenDAO</code>同一家公司开源的,翻译过来事件总线</li>
<li><a href="https://github.com/square/otto" target="_blank" rel="external">Otto</a> 么也别说了，这货又是square公司开源的，这货依然使用的注解</li>
</ol>
<h1 id="7、依赖注入"><a href="#7、依赖注入" class="headerlink" title="7、依赖注入"></a>7、依赖注入</h1><ol>
<li><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>  <a href="http://google.github.io/dagger/users-guide.html" target="_blank" rel="external">文档中心</a></li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a></li>
</ol>
<h1 id="8、一个log库"><a href="#8、一个log库" class="headerlink" title="8、一个log库"></a>8、一个log库</h1><p>打印的log很是漂亮，并且有一个我非常喜欢的功能，打印当前线程名</p>
<p><code>compile &#39;com.orhanobut:logger:1.4&#39;</code></p>
<p><a href="https://github.com/orhanobut/logger" target="_blank" rel="external">github 地址</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">左右滑动返回上一页 SwipeBackLayout</a></li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a> 是一个响应式编程框架</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法概要]]></title>
      <url>http://febsky.me/2016/03/15/2016-03-15-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A6%82%E8%A6%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>首先盗图一张</p>
</blockquote>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A6%82%E8%A6%81.jpg" alt=""></p>
<ul>
<li><a href="http://febsky.me/2016/04/08/2016-04-08-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/">冒泡排序</a></li>
<li><a href="http://febsky.me/2016/04/09/2016-04-09-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/">快速排序</a></li>
<li><a href="http://febsky.me/2016/04/09/2016-04-09-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8FJava%E5%AE%9E%E7%8E%B0/">简单选择排序</a></li>
</ul>
<p>【参考文章】   </p>
<p><a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="external">八大排序算法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java初始化顺序]]></title>
      <url>http://febsky.me/2016/03/14/2016-03-14-Java%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>Java初始化顺序：</p>
<ol>
<li>继承体系的所有静态成员初始化（先父类，后子类）</li>
<li>父类初始化完成（普通成员的初始化–&gt;构造函数的调用）</li>
<li>子类初始化（普通成员–&gt;构造函数)</li>
</ol>
<p>(按出现的先后顺序)<br>父类–静态变量<br>父类–静态初始化块 </p>
<p> (按出现的先后顺序)<br>子类–静态变量<br>子类–静态初始化块 </p>
<p>(按出现的先后顺序)<br>父类–变量<br>父类–初始化块<br>父类–构造器  </p>
<p>(按出现的先后顺序)<br>子类–变量<br>子类–初始化块<br>子类–构造器  </p>
<p>【参考文章】<br><a href="http://www.cnblogs.com/miniwiki/archive/2011/03/25/1995615.html" target="_blank" rel="external">Java初始化顺序</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一刹那是多久]]></title>
      <url>http://febsky.me/2016/03/13/2016-03-13-%E4%B8%80%E5%88%B9%E9%82%A3%E6%98%AF%E5%A4%9A%E4%B9%85/</url>
      <content type="html"><![CDATA[<p>　　在日常生活中，在阅读报章杂志中，我们经常会看到、用到一个词：一刹那。  </p>
<p>　　字典上对于一刹那的解释是：极短的时间，一瞬间。我们也都知道那是一个表示非常快、非常短的概念。那么，一刹那究竟是多长时间呢？</p>
<p>　　一刹那这个词来源于佛典，在《僧只律》中记载着这样一段：</p>
<p>　　“一剎那者为一念，二十念为一瞬，二十瞬为一弹指，二十弹指为一罗预，二十罗预为一须臾，一日一夜有三十须臾。”</p>
<p>　　根据这段文字的描述，我们计算了一下，一昼夜有86400秒，一须臾就是2880秒，一弹指是7.2秒，一瞬间是0.36秒，一刹那只有0.018秒。</p>
<p>　　我们觉得眨眼之间也是一个很快的概念，但和一刹那比起来已经算很长的了，医学上计算人眨一下眼需要0.6秒钟，是一刹那的33倍多哪。</p>
<p>　　所以，一刹那真的是非常非常短暂呀。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java数字签名概述]]></title>
      <url>http://febsky.me/2016/03/10/2016-03-11-Java%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java消息摘要算法]]></title>
      <url>http://febsky.me/2016/03/10/2016-03-10-Java%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="消息摘要算法"><a href="#消息摘要算法" class="headerlink" title="消息摘要算法"></a>消息摘要算法</h1><font color="red"><strong>大概分为以下三类：</strong></font>

<ul>
<li>MD（Message Digest）</li>
<li>SHA（Secure Hash Algorithm）</li>
<li>MAC（Message Authentication Code）</li>
</ul>
<p>消息摘要算法是为了验证数据的完整性，数字签名的核心算法。</p>
<a id="more"></a>
<h1 id="MD算法-128位摘要算法"><a href="#MD算法-128位摘要算法" class="headerlink" title="MD算法(128位摘要算法)"></a>MD算法(128位摘要算法)</h1><p><strong>包括</strong> <code>MD2</code>,<code>MD4</code>,<code>MD5</code></p>
<table>
<thead>
<tr>
<th>算法</th>
<th style="text-align:center">摘要长度</th>
<th style="text-align:right">实现方</th>
</tr>
</thead>
<tbody>
<tr>
<td>MD2</td>
<td style="text-align:center">128</td>
<td style="text-align:right">JDK</td>
</tr>
<tr>
<td>MD4</td>
<td style="text-align:center">128</td>
<td style="text-align:right">Bouncy Castle</td>
</tr>
<tr>
<td>MD5</td>
<td style="text-align:center">128</td>
<td style="text-align:right">JDK</td>
</tr>
</tbody>
</table>
<p><strong>用途</strong></p>
<p>在用户登录系统中可以对密码做MD5运算，数据库保存运算后的16进制字符串表示。</p>
<p>Jdk中的使用列子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String str = <span class="string">"www.febsky.me"</span>;</span><br><span class="line">        MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] md5bytes = messageDigest.digest(str.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//至于byte数组如何打印可以借助于Apache的commons-codec.jar中的工具类</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="SHA-（安全散列）算法"><a href="#SHA-（安全散列）算法" class="headerlink" title="SHA （安全散列）算法"></a>SHA （安全散列）算法</h1><ul>
<li>固定长度摘要信息</li>
<li>SHA-1、SHA-2（SHA-224，SHA-256、SHA-384、SHA-512）</li>
</ul>
<table>
<thead>
<tr>
<th>算法</th>
<th style="text-align:center">摘要长度</th>
<th style="text-align:right">实现方</th>
</tr>
</thead>
<tbody>
<tr>
<td>SHA-1</td>
<td style="text-align:center">160</td>
<td style="text-align:right">JDK</td>
</tr>
<tr>
<td>SHA-224</td>
<td style="text-align:center">224</td>
<td style="text-align:right">Bouncy Castle</td>
</tr>
<tr>
<td>SHA-256</td>
<td style="text-align:center">256</td>
<td style="text-align:right">JDK</td>
</tr>
<tr>
<td>SHA-384</td>
<td style="text-align:center">384</td>
<td style="text-align:right">JDK</td>
</tr>
<tr>
<td>SHA-512</td>
<td style="text-align:center">512</td>
<td style="text-align:right">JDK</td>
</tr>
</tbody>
</table>
<p>代码实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSHA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String str = <span class="string">"www.febsky.me"</span>;</span><br><span class="line">        MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA"</span>);</span><br><span class="line"></span><br><span class="line">        messageDigest.update(str.getBytes());</span><br><span class="line">        <span class="keyword">byte</span>[] md5bytes = messageDigest.digest();</span><br><span class="line">        <span class="comment">//至于byte数组如何打印可以借助于Apache的commons-codec.jar中的工具类</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="MAC-算法"><a href="#MAC-算法" class="headerlink" title="MAC 算法"></a>MAC 算法</h1><p>没用过，貌似和加密密钥有关</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java使用Base64(加密)]]></title>
      <url>http://febsky.me/2016/03/10/2016-03-10-Java%E5%AE%9E%E7%8E%B0Base64-%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="密码学常用术语"><a href="#密码学常用术语" class="headerlink" title="密码学常用术语"></a>密码学常用术语</h1><ul>
<li><strong>明文</strong>：待加密的信息</li>
<li><strong>密文</strong>：经过加密后的明文</li>
<li><strong>加密</strong>：明文转为密文的过程</li>
<li><strong>加密算法</strong>：明文转为密文的转换算法</li>
<li><strong>加密秘钥</strong>：通过加密算法进行加密操作的秘钥</li>
<li><strong>解密</strong>：将密文转为明文的过程</li>
<li><strong>解密算法</strong>：密文转为明文的算法</li>
<li><strong>解密密钥</strong>：通过解密算法进行解密操作的密钥</li>
<li><strong>密码分析</strong>：截获密文者试图通过分析截获的密文从而推断出原来的明文或者密钥的过程</li>
<li><strong>主动攻击</strong>：攻击者非法入侵密码系统，采用伪造、修改、删除等手段向系统注入假消息进行欺   骗。（对密文具有破坏作用）</li>
<li><strong>被动攻击</strong>：对一个保密系统采取截获密文并对其进行分析和攻击。（对密文没有破坏作用）</li>
<li><strong>密码体制</strong>：由明文空间、密文空间、密钥空间、加密算法和解密算法五部分组成。</li>
<li><strong>密码协议</strong>：也称为安全协议，指以密码学为基础的消息交互的通信协议，目的是在网络环境中提供安全的服务。</li>
<li><strong>密码系统</strong>：指用于加密、解密的系统</li>
<li><strong>柯克霍夫原则</strong>：数据的安全基于密钥而不是算法的保密。即系统的安全取决于密钥，对密钥保密，对算法公开。—现代密码学设计的基本原则。</li>
</ul>
<h1 id="Java安全组成"><a href="#Java安全组成" class="headerlink" title="Java安全组成"></a>Java安全组成</h1><ul>
<li>JCA（Java Cryptography Architecture）</li>
<li>JCE（Java Cryptography Extension） 这是个扩展包，像一些DES、AES、RSA等加密算法由它提供。</li>
<li>JSSE（Java Secure Socket Extension）提供基于SSL的加密算法，主要用于网络传输</li>
<li>JAAS（Java Authentication and Authentication Service）</li>
</ul>
<h1 id="相关的java包和类"><a href="#相关的java包和类" class="headerlink" title="相关的java包和类"></a>相关的java包和类</h1><ul>
<li><code>java.security</code>  消息摘要</li>
<li><code>javax.crypto</code>  安全消息摘要，消息认证（鉴别）码</li>
<li><code>java.net.ssl</code> 安全套接字，基于网咯的加解密 例如：HttpsURLConnection、SSLContext</li>
</ul>
<h1 id="第三方java扩展"><a href="#第三方java扩展" class="headerlink" title="第三方java扩展"></a>第三方java扩展</h1><ol>
<li>Bouncy Castle 两种支持（使用）方案：<ul>
<li>配置（修改配置文件）</li>
<li>调用（代码里面动态加载）</li>
</ul>
</li>
<li>Commons Codec<ul>
<li>Apache 提供的</li>
<li>Base64、二进制、十六进制、字符集编码</li>
<li>Url编码/解码</li>
</ul>
</li>
</ol>
<h1 id="Base64算法"><a href="#Base64算法" class="headerlink" title="Base64算法"></a>Base64算法</h1><ul>
<li><p><strong>定义</strong> ： 基于64个字符的编码算法</p>
</li>
<li><p>算法实现</p>
<ol>
<li>JDK的实现</li>
<li>Commons Codec的实现</li>
<li>Bouncy Castle 实现</li>
</ol>
</li>
</ul>
<p>Base64是一种用64个字符来表示任意二进制数据的方法。</p>
<p>用记事本打开exe、jpg、pdf这些文件时，我们都会看到一大堆乱码，因为二进制文件包含很多无法显示和打印的字符，所以，如果要让记事本这样的文本处理软件能处理二进制数据，就需要一个二进制到字符串的转换方法。Base64是一种最常见的二进制编码方法。</p>
<p>Base64的原理很简单，首先，准备一个包含64个字符的数组：</p>
<p><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, ... &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, ... &#39;0&#39;, &#39;1&#39;, ... &#39;+&#39;, &#39;/&#39;]</code><br>然后，对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit.</p>
<p>这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。</p>
<p>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。</p>
<p>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。</p>
<font color="red">jdk自带的实现</font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"www.febsky.me"</span>;</span><br><span class="line">BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line"></span><br><span class="line">String base64Str = encoder.encode(str.getBytes());</span><br><span class="line">System.out.println(base64Str);</span><br></pre></td></tr></table></figure>
<h1 id="Base64用途"><a href="#Base64用途" class="headerlink" title="Base64用途"></a>Base64用途</h1><ul>
<li>Base64是一种通过查表的编码方法，不能用于加密，即使使用自定义的编码表也不行。</li>
<li>Base64适用于小段内容的编码，比如数字证书签名、Cookie的内容等。</li>
</ul>
<p><strong>【参考文献】</strong><br><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001399413803339f4bbda5c01fc479cbea98b1387390748000" target="_blank" rel="external">base64</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" target="_blank" rel="external">阮一峰</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出java多线程]]></title>
      <url>http://febsky.me/2016/03/08/2016-03-08-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1、进程和线程概念"><a href="#1、进程和线程概念" class="headerlink" title="1、进程和线程概念"></a>1、进程和线程概念</h1><hr>
<p><strong>进程的特征</strong></p>
<ol>
<li>程序（任务）的执行过程 <font color="red">是动态的</font></li>
<li>持有资源，这里的资源是指内存（共享内存，共享文件）和线程<font color="red">是资源的载体</font></li>
<li>所以进程是资源的载体，也是线程的载体</li>
</ol>
<p><strong>线程的特征</strong></p>
<ol>
<li>线程是系统中最小的执行单元</li>
<li>同一个进程中可以有多个线程</li>
<li>多个线程共享同一个进程的资源</li>
<li>线程的交互包括<strong><code>互斥</code></strong>和<strong><code>同步</code></strong></li>
</ol>
<h1 id="2、线程详解"><a href="#2、线程详解" class="headerlink" title="2、线程详解"></a>2、线程详解</h1><hr>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/08/Thread%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png" alt="线程中常用的方法"></p>
<blockquote>
<p>历史是人民群众创造的但是英雄人物可以推动历史的发展</p>
</blockquote>
<p>和线程相关的两个类：  </p>
<ul>
<li>实现<code>Runnable</code>接口  </li>
<li>继承<code>Thread</code> 类</li>
</ul>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class ThreadTesterA implements Runnable &#123;&#10; &#10;    private int counter;&#10; &#10;    @Override&#10;    public void run() &#123;&#10;        while (counter &#60;= 10) &#123;&#10;            System.out.print(&#34;Counter = &#34; + counter + &#34; &#34;);&#10;            counter++;&#10;        &#125;&#10;        System.out.println();&#10;    &#125;&#10;&#125;&#10;&#10;class ThreadTesterB implements Runnable &#123;&#10; &#10;    private int i;&#10; &#10;    @Override&#10;    public void run() &#123;&#10;        while (i &#60;= 10) &#123;&#10;            System.out.print(&#34;i = &#34; + i + &#34; &#34;);&#10;            i++;&#10;        &#125;&#10;        System.out.println();&#10;    &#125;&#10;&#125;&#10; &#10;public class ThreadTester &#123;&#10;    public static void main(String[] args) throws InterruptedException &#123;&#10;        Thread t1 = new Thread(new ThreadTesterA());&#10;        Thread t2 = new Thread(new ThreadTesterB());&#10;        t1.start();&#10;        t1.join(); // wait t1 to be finished&#10;        t2.start();&#10;        t2.join(); // in this program, this may be removed&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<font color="red">Runnable的方式</font>可以避免Thread方式由于Java但继承特性带来的缺陷；并且<code>Runnable</code>的代码可以被多个线程（Thread实例共享），适合于多个线程处理同一资源的情况。<br><br><br># 3、如何正确停止线程<br><br>1. <del>thread.stop()</del> 这个方法是jdk1.1引入的，但是它会使线程戛然而止。已经废弃。<br>2. thread.interrupt();条件受限，不一定管用<br>3. 正确的方式是使用停止标志 flag：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//军队线程</span></span><br><span class="line"><span class="comment">//模拟作战双方的行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//volatile保证了线程可以正确的读取其他线程写入的值</span></span><br><span class="line">	<span class="comment">//可见性 ref JMM， happens-before原则</span></span><br><span class="line">	<span class="keyword">volatile</span> <span class="keyword">boolean</span> keepRunning = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(keepRunning)&#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName());</span><br><span class="line">				<span class="comment">//让出了处理器时间，重新抢占资源</span></span><br><span class="line">				Thread.yield();</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"结束了战斗！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br># 4、<strong>关于中断的一点点小补充：</strong><br><br>如果该线程处在可中断状态下，（调用了xx.wait()，或者Selector.select(),Thread.sleep()等特定会发生阻塞的api），那么该线程会立即被唤醒，同时会受到一个InterruptedException，同时，如果是阻塞在io上，对应的资源会被关闭。如果该线程接下来不执行“Thread.interrupted()方法（不是interrupt），那么该线程处理任何io资源的时候，都会导致这些资源关闭。当然，解决的办法就是调用一下interrupted()，不过这里需要程序员自行根据代码的逻辑来设定，根据自己的需求确认是否可以直接忽略该中断，还是应该马上退出。<br><br>如果该线程处在不可中断状态下，就是没有调用上述api，那么java只是设置一下该线程的interrupt状态，其他事情都不会发生，如果该线程之后会调用行数阻塞API，那到时候线程会马会上跳出，并抛出InterruptedException，接下来的事情就跟第一种状况一致了。如果不会调用阻塞API，那么这个线程就会一直执行下去。除非你就是要实现这样的线程，一般高性能的代码中肯定会有wait()，yield()之类出让cpu的函数，不会发生后者的情况。<br><br><br><font color="red">Thread的interrupt处理的几个方法： </font> 

<ul>
<li>public void interrupt() :  执行线程interrupt事件  </li>
<li>public boolean isInterrupted() : 检查当前线程是否处于interrupt</li>
<li>public static boolean interrupted() ： check当前线程是否处于interrupt，并重置interrupt信息。类似于resetAndGet()</li>
</ul>
<p>其中，interrupt方法是唯一能将中断状态设置为true的方法。静态方法interrupted会将当前线程的中断状态清除，但这个方法的命名极不直观，很容易造成误解，需要特别注意。</p>
<font color="red">理解： </font> 

<ol>
<li>每个线程都有一个interrupt status标志位，用于表明当前线程是否处于中断状态  </li>
<li>一般调用Thread.interrupt()会有两种处理方式<br>遇到一个低优先级的block状态时，比如object.wait(),object.sleep(),object.join()。它会立马触发一个unblock解除阻塞，并throw一个InterruptedException。<br>其他情况，Thread.interrupt()仅仅只是更新了status标志位。然后你的工作线程通过Thread.isInterrrupted()进行检查，可以做相应的处理，比如也throw InterruptedException或者是清理状态，取消task等。  </li>
</ol>
<hr>
<ol>
<li><p>一般Thread编程需要关注interrupt中断不？一般怎么处理？可以用来做什么？<br>答： interrupt用途： unBlock操作，支持任务cancel， 数据清理等。</p>
</li>
<li><p>Thread.interrupt()方法和InterruptedException异常的关系？是由interrupt触发产生了InterruptedException异常？<br>答： Thread.interrupt()只是在Object.wait() .Object.join(), Object.sleep()几个方法会主动抛出InterruptedException异常。而在其他的的block常见，只是通过设置了Thread的一个标志位信息，需要程序自我进行处理。</p>
</li>
<li>Thread.interrupt()会中断线程什么状态的工作？ RUNNING or BLOCKING？<br>答：Thread.interrupt设计的目的主要是用于处理线程处于block状态，比如wait(),sleep()状态就是个例子。但可以在程序设计时为支持task cancel，同样可以支持RUNNING状态。比如Object.join()和一些支持interrupt的一些nio channel设计。</li>
</ol>
<p>#5、争用条件（RaceCondition）</p>
<p><font color="red">概念：  </font><br>当多个线程同事共享访问同一数据（内存区域）时，每个线程都尝试操作该数据，从而导致数据被破坏（corrupted），这种现象称为争用条件。</p>
<p><strong>线程之间的关系大致可以分为两类  </strong></p>
<ol>
<li>线程之间通过对资源的竞争，包括共享的数据和硬件资源，所产生的相互制约关系，这类线程间的主要问题是互斥和死锁问题，这类关系被称为<code>互斥关系</code>。</li>
<li>线程之间的相互协同合作，彼此之间直接知道对方的存在，并了解对方的名字，这类进程常常需要通过“进程间通信”方法来协同工作，这类关系被称为<code>同步关系</code>。</li>
</ol>
<p><code>wait()</code>休眠自身线程，等待被唤醒。这个方法是<code>Object</code>类的方法。</p>
<h1 id="6、线程的生命周期"><a href="#6、线程的生命周期" class="headerlink" title="6、线程的生命周期"></a>6、线程的生命周期</h1><p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/11/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.png" alt="线程生命周期图"></p>
<p><font color="red"><strong>就绪</strong>：</font>创建了线程对象之后，调用了线程的start()方法（此时线程只是进入了线程队列，等待获取CPU服务，具备了运行的条件，但并不一定已经开始运行。）</p>
<p><font color="red"><strong>运行</strong>：</font>处于就绪状态的线程，一旦获取了CPU资源，便进入到了运行状态，开始执行run()方法里面的逻辑。</p>
<p><font color="red"><strong>终止</strong>：</font>线程的run()方法执行完毕。</p>
<p><font color="red"><strong>阻塞</strong>：</font>一个正在执行的线程在某些情况下，由于某种原因而暂时让出了CPU资源，暂停了自己的执行，便进入了阻塞状态，如调用sleep()方法。</p>
<h1 id="7、守护线程"><a href="#7、守护线程" class="headerlink" title="7、守护线程"></a>7、守护线程</h1><p><strong>概念</strong>：运行在后台，为其他前台线程服务<br><strong>特点</strong>：一旦所有的用户线程都结束运行守护线程会随JVM一起结束工作<br><strong>应用</strong>：数据库连接池中的检测线程；JVM虚拟机启动后的检测线程;垃圾回收线程<br><strong>运用方式</strong> ：通过调用Thread类的setDaemon(true)方法来设置当前线程为守护线程。</p>
<blockquote>
<p>注意：<code>setDaemon(true)</code>必须在<code>start()</code>方法之前调用；在守护线程中开启的线程也是守护线程；守护线程中不能处理读写操作；</p>
</blockquote>
<h1 id="8、Java线程查看工具"><a href="#8、Java线程查看工具" class="headerlink" title="8、Java线程查看工具"></a>8、Java线程查看工具</h1><p><code>jstack</code>:位于jdk安装目录下的bin目录下</p>
<p><strong>作用</strong>：生成当前时刻线程的快照（threaddump，即当前进程中所有线程的信息）</p>
<p><strong>参考文献</strong><br><a href="http://agapple.iteye.com/blog/970055" target="_blank" rel="external">java线程阻塞中断和LockSupport的常见问题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MacOS中的tree命令]]></title>
      <url>http://febsky.me/2016/03/06/2016-03-06-MacOS%E4%B8%AD%E7%9A%84tree%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="最简单的方式"><a href="#最简单的方式" class="headerlink" title="最简单的方式"></a>最简单的方式</h1><hr>
<p>安装<code>homebrew</code></p>
<p>然后<code>brew install tree</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bt种子和磁力链接]]></title>
      <url>http://febsky.me/2016/03/06/2016-03-06-Bt%E7%A7%8D%E5%AD%90%E5%92%8C%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="什么事Bt下载"><a href="#什么事Bt下载" class="headerlink" title="什么事Bt下载"></a>什么事Bt下载</h1><hr>
<p>BT是目前最热门的下载方式之一，它的全称为“BitTorrent”简称“BT”，中文全称“比特流”。BT服务器是通过一种传销的方式来实现文件共享的，它的工作原理。举个例子来说吧，例如BT服务器将一个文件分成了N个部分，有甲、乙、丙、丁四位用户同时下载，那么BT并不会完全从服务器下载这个文件的所有部分，而是根据实际情况有选择地从其他用户的机器中下载已下载完成的部分。例如甲已经下载了第1部分，乙已经下载了第2部分，那么丙就会从甲的机器中下载第1部分，从乙的机器中下载第2部分，当然甲、乙、丁三位用户也在同时从丙的机器中下载相应的部分，这就大大减轻了BT服务器的负荷，也同时加快了丙的下载速度，也就是说每台参加下载的计算机既从其他用户的计算机上下载文件，同时自身也向其他用户提供下载，因此参与下载的用户数量越多，下载速度也越高。 </p>
<p>那BT的“命门”在哪呢？也许你听说过BT Traker服务器。而这个BT Traker服务器也就是目前我朝有司大力打击BT下载站的重要和主要罪证之一，因为这个服务器的存在，且不管技术手段如何，从表面特征上看来，这些网站如同直接提供视频内容一样。</p>
<p>用户是怎样通过BT下载文件的？基本过程应该是这样：一、找到Torrent文件，二、使用BT下载客户端软件打开这个文件。三、对于用户来讲，只要花时间去等就可以了。而对于客户端软件来讲，它会根据Torrent文件中的网址自动连接Tracker服务器，从它那里接收到其他正在下载该文件的人的网址名单。下一步，软件就一一与名单上的网址取得联系，从它们那里获取文件的片段，直到整个下载完成。从整个过程不难看出，BT Tracker服务器是一个中央节点，任何客户端都可以在其上找到“同伴”——只要其他人也在下载或分享同一个文件。所以MPAA和RIAA盯上了BT Tracker，因为消灭所有Torrent文件几乎是不可能的，但通过一些“努力”，消灭BT Tracker服务器则完全有可能实现。官司赢了，一个时代结束了，我们不妨称其为是BT1.0时代，BT1.0时代致命的缺点是因为其存在中央节点，也就是BTTracker服务器。然而，官司输了，并不代表整个BT时代的终结，一个新的时代已经悄然开始，我们可以称其为BT2.0时代。</p>
<h1 id="什么是磁力链接？"><a href="#什么是磁力链接？" class="headerlink" title="什么是磁力链接？"></a>什么是磁力链接？</h1><hr>
<p>  简单地说，磁力链接是一种特殊链接，但是它与传统基于文件的位置或名称的普通链接不一样，它只是通过不同文件内容的Hash结果生成一个纯文本的“数字指纹”，并用它来识别文件。它类似于生活消费品包装上常见的条码，不同的是这个“数字指纹”可以被任何人从任何文件上生成，这也就注定了“磁力链接”不需要任何“中心机构”的支持（例如：BT Tracker服务器），且识别准确度极高。因此任何人都可以生成一个Magnet链接并确保通过该链接下载的文件准确无误。更简单地说：类似【magnet:xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C】这样以“magnet:?”开头的字符串，就是一条“磁力链接”，其在网页上的图标像一块磁铁，很容易辨别。</p>
<p>　　在BT2.0时代，Magnet（意译：磁铁、吸铁石）成为未来BT的发展方向，Magnet真的可以挽救BT吗？经笔者亲身试用，在支持Magnet URI之后，海盗湾似乎获得了新生，下载速度并非越来越慢，相反，速度表现让人满意。最关键的是，Magnet不需要Tracker服务器，也不需要Torrent文件，仅需要一串字符就可以进行文件下载。海盗湾LOGO与未来BT的“图腾”，海盗湾上的BT资源已经加入了Magnet下载方式Worlds most resilient tracking——节选自海盗湾博客博文的题目是“世界上最稳定的tracking”，文中提到：“随着DHT+ PEX技术的不断成熟，发现对端（Peer）并协调通信已经变得容易实现，而Tracker服务器变得不再重要，甚至显得有些多余，所以我们将关闭服务器。”文中还说服务器现在被安置在了一家博物馆中。看来，关闭Tracker服务器是计划之内的事情。一切尽在掌握？Tracker服务器和“BT种子”即将双双退役，取而代之的是DHT+ PEX网络和Magnet Link，DHT网络是分布式存在的，所以不存在“被拔线”的问题，而Magnet Link仅是一串字符，所以也不再需要Torrent文件。<br>　　<br>　　这里出现了三个关键词：DHT、PEX和Magnet Link，这三点是未来BT的核心，下面我们就来说一说它们都可以实现怎样的功能。<br>　　<br>　　DHT：2002年，纽约大学的两个教授Petar Maymounkov和David Mazières发表了一篇论文，提出了一种真正<code>去中心化</code>的“点对点”下载模型，他们将其称为Kademlia方法。2005年，BT软件开始引入这种技术，在BT中被称为DHT协议（Distributed HashTable，分布式哈希表）。DHT是一种分布式存储方法。DHT的作用是找到那些与本机正在下载（上传）相同文件的对端主机（Peer），当然，实现这一过程并不依赖Tracker服务器。在DHT网络中的每个客户端负责一个小范围的路由，并负责存储一小部分数据，从而实现整个DHT网络的寻址和存储。这种信息获取方式保证了整个网络没有单个的中心，即使一个节点下线，依然可以通过其他节点来获取文件，因此也就不需要Tracker服务器来告诉你，其他节点在什么地方。<br>　　<br>　　PEX：是Peer Exchange的简写，我们可以将其理解为“节点信息交换”。虽然DHT解决了去中心化的问题，但要在没有“中心协调员”（Tracker）的情况下实现高效寻址，就要借助PEX。PEX所提供的功能有点类似于以前的Tracker服务器，但工作方式却非常不同，我们可以打个比方来说明。小赵在A班，她不认识B班的小何，也不认识C班的小温，但小赵认识同班的小王，而小王认识B班的小何，也可能还认识C班的小温，或者小王仅认识B班的小何，但小何认识C班的小温，而小温又认识同班的所有同学，结果就是小赵可以“无限”地延伸自己的关系网，不管怎样，总有一条沟通途径可以将这些同学联系在一起，待小赵“认识”了小温后，他们就可以直接沟通了，在P2P世界里，就是进行上传与下载。</p>
<p>Magnet links：有网友将其称为磁链。DHT+ PEX解决了BT“寻址”的问题，但是如何告诉BT客户端找（寻）什么又是另外一个问题。在Torrent文件中包含的内容就是用户真正要下载的文件的特征信息，或称为“电子指纹”，BT客户端知道了要找什么，也知道如何去找，于是P2P方式的下载、上传就实现了。以前BT客户端通过Torrent文件得知“要找什么”，现在，文件的“电子指纹”不再存放于Torrent中，而被放在了Magnetlinks中。 magnet:?xt=urn:btih:36684b463ca2aa2f9347b18e9f6b1a9090bdb073上面是笔者打算下载的一个文件，Microsoft iSCSI Initiator，按照以前的方式，我们需要下载它的Torrent文件，然后才能下载这个文件本身。但是，在新的模式下，我们不需要下载Torrent文件，只需知道它的Magnet URI，一个资源定位信息，其他都不需要(其实是其输入magnet 后，其不会直接下载文件，而还是先下载其种子，然后软件自动下载文件)。只要把这个地址告诉下载软件，软件就会开始自动下载。我们来分解一下这个地址：magnet：协议名。xt:exact topic的缩写，表示资源定位点。BTIH（BitTorrent Info Hash）表示哈希方法名，这里还可以使用SHA1和MD5。这个值是文件的标识符，是不可缺少的。dn：display name的缩写，表示向用户显示的文件名。这是一个可选项。tr：tracker的缩写，表示tracker服务器的地址。这是一个可选项，本例中并未出现。精简一下上例，仅需要magnet:?xt=urn:btih:36684b463ca2aa2f9347b18e9f6b1a9090bdb073就够用了，如果附加dn(displayname)，在使用上会更加方便一些。MagnetLink的好处就不用笔者多说了，至少包括两点：网络的可靠性得到了极大的增强；不存在“被拔线”的风险。由于不存在所谓的中央节点，审查将变得更加困难，“单点失效”的问题也就不存在了。此外，MagnetURI只是一个字符串，非常容易传播，根本无法禁止。因此，Magnet URI取代Tracker模式将是大势所趋，迟早会成为主流BT下载方式。　</p>
<h1 id="bencode-编码"><a href="#bencode-编码" class="headerlink" title="bencode 编码"></a>bencode 编码</h1><hr>
<p>在解析bt文件之前，我们先介绍 bencode 这种编码格式，因为 bt 种子文件，包括以后的 DHT 网络中，都是用这种编码的。网上有很多介绍，这里简单再重复一遍。bencode 有 4 种数据类型: string, integer, list 和 dictionary。整数以i标记开头以e标记结尾，中间是整数数字，字符串以：标记开头然后根接字符串的长度，最后是字符串内容，列表以l标记开头，以e结尾，字典以d开头以e结尾。列表可以包含任何的BT元素，字典也可以包含任何的BT元素，不过字典的Key必须是字符串。</p>
<p>如此以来分析，整数和字符串是两种单元的元素，可以很好的解析，基本上不用分析就能搞定，而列表和字典，则就需要根据给定的字符串进行分析处理了，这个分析实际上也简单，先碰到开头的标记，然后不断的往下判断读取，碰到结尾标记e结束，如果在碰到结尾标记之前还又碰到其他的标记，则可进行递归处理，所以，处理起来也方便了。</p>
<ol>
<li><p><strong>string</strong></p>
<p> 字符是以这种方式编码的: &lt;字符串长度&gt;:&lt;字符串&gt;。</p>
<p> 如 hell: <code>4:hell</code></p>
</li>
<li><p><strong>integer</strong></p>
<p> 整数是一这种方式编码的: i&lt;整数&gt;e。</p>
<p> 如 1999: <code>i1999e</code></p>
</li>
<li><p><strong>list</strong></p>
<p> 列表是一这种方式编码的: l[数据1][数据2][数据3][…]e。</p>
<p> 如列表 [hello, world, 101]：<code>l5:hello5:worldi101ee</code></p>
</li>
<li><p><strong>dictionary</strong></p>
<p> 字典是一这种方式编码的: <code>d[key1][value1][key2][value2][…]e</code>，其中 key 必须是 string 而且按照字母顺序排序。</p>
<p> 如字典 {aa:100, bb:bb, cc:200}： <code>d2:aai100e2:bb2:bb2:cci200ee</code></p>
</li>
</ol>
<p>很多语言都有 bencode 的实现，Python 版本可在 pypi 里面找到: <a href="https://pypi.python.org/pypi/bencode/1.0" target="_blank" rel="external">bencode</a></p>
<h1 id="bt文件结构"><a href="#bt文件结构" class="headerlink" title="bt文件结构"></a>bt文件结构</h1><hr>
<blockquote>
<p>根据BitTorrent协议，文件发布者会根据要发布的文件生成提供一个.torrent文件，即种子文件，也简称为“种子”。 种子文件本质上是文本文件，包含Tracker信息和文件信息两部分。Tracker信息主要是BT下载中需要用到的Tracker服务器的地址和针对Tracker服务器的设置，文件信息是根据对目标文件的计算生成的，计算结果根据BitTorrent协议内的Bencode规则进行编码。它的主要原理是需要把提供下载的文件虚拟分成大小相等的块，块大小必须为2k的整数次方（由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和Hash验证码写入种子文件中；所以，种子文件就是被下载文件的“索引”。 下载者要下载文件内容，需要先得到相应的种子文件，然后使用BT客户端软件进行下载。 下载时，BT客户端首先解析种子文件得到Tracker地址，然后连接Tracker服务器。Tracker服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的IP。下载者再连接其他下载者，根据种子文件，两者分别告知对方自己已经有的块，然后交换对方所没有的数据。此时不需要其他服务器参与，分散了单个线路上的数据流量，因此减轻了服务器负担。 下载者每得到一个块，需要算出下载块的Hash验证码与种子文件中的对比，如果一样则说明块正确，不一样则需要重新下载这个块。这种规定是为了解决下载内容准确性的问题。 一般的HTTP/FTP下载，发布文件仅在某个或某几个服务器，下载的人太多，服务器的带宽很易不胜负荷，变得很慢。而BitTorrent协议下载的特点是，下载的人越多，提供的带宽也越多，下载速度就越快。同时，拥有完整文件的用户也会越来越多，使文件的“寿命”不断延长。</p>
</blockquote>
<ol>
<li><p>bt 种子文件是使用 bencode 编码的，整个文件就 dictionary</p>
<ul>
<li><p>文件信息包括文件的公共部分</p>
<p>  piece length, integer, 必选, 每一数据块的长度</p>
<p>  pieces, string, 必选, 所有数据块的 SHA1 校验值</p>
<p>  publisher, string, 可选, 发布者</p>
<p>  publisher.utf-8, string, 可选, 发布者的 UTF-8 编码</p>
<p>  publisher-url, string, 可选, 发布者的 URL</p>
<p>  publisher-url.utf-8, string, 可选, 发布者的 URL 的 UTF-8 编码</p>
</li>
<li><p>如果 bt 种子包含的是单个文件，包含以下内容</p>
<p>  name, string, 必选, 推荐的文件名称</p>
<p>  name.utf-8, string, 可选, 推荐的文件名称的 UTF-8 编码</p>
<p>  length, int, 必选， 文件的长度单位是字节</p>
</li>
<li><p>如果是多文件，则包含以下部分:</p>
<p>  name, string, 必选, 推荐的文件夹名称</p>
<p>  name.utf-8, string, 可选, 推荐的文件名称的 UTF-8 编码</p>
<p>  files, list, 必选, 文件列表，每个文件列表下面是包括每一个文件的信息，文件信息是个字典。</p>
</li>
<li><p>文件字典</p>
<p>  length, int, 必选， 文件的长度单位是字节</p>
<p>  path, string, 必选， 文件名称，包含文件夹在内</p>
<p>  path.utf-8, string, 必选， 文件名称 UTF-8 表示，包含文件夹在内</p>
<p>  filehash，string, 可选， 文件 hash。</p>
<p>  ed2k, string, 可选, ed2k 信息。</p>
</li>
</ul>
</li>
<li><p>info, dictinary, 必选, 表示该bt种子文件的文件信息。</p>
</li>
<li>announce, string, 必选, tracker 服务器的地址</li>
<li>announce-list, list, 可选, 可选的 tracker 服务器地址</li>
<li>creation date， interger， 必选, 文件创建时间</li>
<li>comment， string, 可选, bt 文件注释</li>
<li>created by， string， 可选， 文件创建者。</li>
</ol>
<p>综上，多文件Torrent的结构的树形图为：</p>
<p>Multi-file Torrent<br>├─announce<br>├─announce-list<br>├─comment<br>├─comment.utf-8<br>├─creation date<br>├─encoding<br>├─info<br>│ ├─files<br>│ │ ├─length<br>│ │ ├─path<br>│ │ └─path.utf-8<br>│ ├─name<br>│ ├─name.utf-8<br>│ ├─piece length<br>│ ├─pieces<br>│ ├─publisher<br>│ ├─publisher-url<br>│ ├─publisher-url.utf-8<br>│ └─publisher.utf-8<br>└─nodes</p>
<p>单文件Torrent的结构的树形图为：</p>
<p>Single-File Torrent<br>├─announce<br>├─announce-list<br>├─comment<br>├─comment.utf-8<br>├─creation date<br>├─encoding<br>├─info<br>│ ├─length<br>│ ├─name<br>│ ├─name.utf-8<br>│ ├─piece length<br>│ ├─pieces<br>│ ├─publisher<br>│ ├─publisher-url<br>│ ├─publisher-url.utf-8<br>│ └─publisher.utf-8<br>└─nodes</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中MVC的使用]]></title>
      <url>http://febsky.me/2016/03/04/2016-03-04-Android%E4%B8%ADMVC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在本文中看到如何创建一个Android MVC框架(模型-视图-控制器),从而提高了在这个平台上开发水平。<a href="http://mrbool.com/android-mvc-creating-a-model-view-controller-framework-for-android/32335 # ixzz41v9e5mYU" target="_blank" rel="external">原文地址</a></p>
</blockquote>
<p>今天,移动应用程序开发的需求是非常高的。为了让app能有好的竞争力，需要使app有合适的花费和好的质量。</p>
<p>而好的架构的选择是减少开发时间和延长运行时间的保障。</p>
<p>IOS的开发是基于MVC的，这种架构对IOS的开发非常有利。安卓系统不需要任何模型：体系结构的选择和应用程序的质量很大程度上取决于开发人员的经验。</p>
<p>（）</p>
<p>MVC(模型-视图-控制器)是一个标准的软件项目,分离用户界面(View)和业务规则和数据(Model)模型使用一个中介(Controller)连接到视图。</p>
<p>对我们来说最大的好处是MVC的关注点隔离。在MVC模型中的每部分只关注自己的工作：View只关注用户接口（UI），Model只关注数据，controller 在这两者之间发送消息。</p>
<p>controller 为和UI相关的View提供数据模型，controller的任何变化对View来说是透明的，并且UI的改变不会影响到业务逻辑，反之亦然。</p>
<p>设计模式有助于强制开发者使用结构化代码,这样代码变得越来越可控和不易被淘汰。MVC的好处是的分离使得它更容易添加单元测试。</p>
<p>虽然Android中已经使用了MVC的设计模式，比如用xml来写View的方式。但是这种分离并不是我们所真正关心的分离。</p>
<p>为了演示Android中的MVC框架，我们创建一个界面，其中包含一个logo 如Figure 1所示；第二个界面包含一个输入框和一个Button，输入框输入要执行的任务，当点击按钮的时候，任务的值将被添加到数据库中，上面显示任务列表。当从列表中选中一个任务的时候，我们将从数据库中删除这个任务，如Figure2所示。</p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/SplashScreen.jpg" alt="Figure 1 Splash Screen"><br><em>Figure 1 Splash Screen</em></p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/MainScreen.jpg" alt="Figure 2 Main Screen"><br><em>Figure 2 Main Screen</em></p>
<p>下面我们可以看到这个app中的Model的实现，如Listing 1 所示。</p>
<blockquote>
<p><em>Note: The Android has integration with SQLite, a lightweight and powerful database, allowing you to use database normally and its application. A database is only visible to the application that created it. The SQLiteHelper class encapsulates all the creation of a database logic. The onCreate and onUpgrade methods are called automatically by Android when the database needs to be created for the first time or to be updated due to a new version.</em></p>
</blockquote>
<p><strong>Listing 1 MVCModel.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"tasks_db"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"task"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_CREATE_QUERY = <span class="string">"CREATE TABLE "</span> + MVCModel.TABLE_NAME + <span class="string">" (id integer primary key autoincrement, title text not null);"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLiteDatabase database;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLiteOpenHelper helper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MVCModel</span><span class="params">(<span class="keyword">final</span> Context ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helper = <span class="keyword">new</span> SQLiteOpenHelper(ctx, MVCModel.DB_NAME, <span class="keyword">null</span>, MVCModel.DB_VERSION) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="keyword">final</span> SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">                db.execSQL(MVCModel.DB_CREATE_QUERY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(<span class="keyword">final</span> SQLiteDatabase db, <span class="keyword">final</span> <span class="keyword">int</span> oldVersion, <span class="keyword">final</span> <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">                db.execSQL(<span class="string">"DROP TABLE IF EXISTS "</span> + MVCModel.TABLE_NAME);</span><br><span class="line">                <span class="keyword">this</span>.onCreate(db);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.database = <span class="keyword">this</span>.helper.getWritableDatabase();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(ContentValues data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.database.insert(MVCModel.TABLE_NAME, <span class="keyword">null</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(<span class="keyword">final</span> String field_params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.database.delete(MVCModel.TABLE_NAME, field_params, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">loadAllTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(mvcView.APP_TAG, <span class="string">"loadAllTasks()"</span>);</span><br><span class="line">        <span class="keyword">final</span> Cursor c = <span class="keyword">this</span>.database.query(MVCModel.TABLE_NAME, <span class="keyword">new</span> String[]&#123;<span class="string">"title"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面这个类是这个app中的View 如Listing2所示：</p>
<p><strong>Listing 2.MVCView.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mrbool.mvc.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCView</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_TAG = <span class="string">"com.mrbool.mvc"</span>;</span><br><span class="line">    <span class="keyword">private</span> ListView lvTask;</span><br><span class="line">    <span class="keyword">private</span> Button btNewTask;</span><br><span class="line">    <span class="keyword">private</span> EditText etNewTask;</span><br><span class="line">    <span class="keyword">private</span> mvcController controller;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="keyword">final</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(R.layout.ui_main);</span><br><span class="line">        <span class="keyword">this</span>.controller = <span class="keyword">new</span> mvcController(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.lvTask = (ListView) <span class="keyword">this</span>.findViewById(R.id.lvTask);</span><br><span class="line">        <span class="keyword">this</span>.btNewTask = (Button) <span class="keyword">this</span>.findViewById(R.id.btNewTask);</span><br><span class="line">        <span class="keyword">this</span>.etNewTask = (EditText) <span class="keyword">this</span>.findViewById(R.id.etNewTask);</span><br><span class="line">        <span class="keyword">this</span>.btNewTask.setOnClickListener(<span class="keyword">this</span>.handleNewTaskEvent);</span><br><span class="line">        <span class="keyword">this</span>.populateTasks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">populateTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; tasks = <span class="keyword">this</span>.controller.getTasks();</span><br><span class="line">        Log.d(MVCView.APP_TAG, String.format(<span class="string">"%d found tasks "</span>, tasks.size()));</span><br><span class="line">        <span class="keyword">this</span>.lvTask.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, tasks.toArray(<span class="keyword">new</span> String[]&#123;&#125;)));</span><br><span class="line">        <span class="keyword">this</span>.lvTask.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">final</span> AdapterView&lt;?&gt; parent, <span class="keyword">final</span> View view, <span class="keyword">final</span> <span class="keyword">int</span> position, <span class="keyword">final</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                Log.d(MVCView.APP_TAG, String.format(<span class="string">"task id: %d and position: %d"</span>, id, position));</span><br><span class="line">                <span class="keyword">final</span> TextView v = (TextView) view;</span><br><span class="line">                MVCView.<span class="keyword">this</span>.controller.deleteTask(v.getText().toString());</span><br><span class="line">                MVCView.<span class="keyword">this</span>.populateTasks();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OnClickListener handleNewTaskEvent = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</span><br><span class="line">            Log.d(APP_TAG, <span class="string">"New Task button added"</span>);</span><br><span class="line">            MVCView.<span class="keyword">this</span>.controller.addTask(MVCView.<span class="keyword">this</span>.etNewTask.getText().toString());</span><br><span class="line">            MVCView.<span class="keyword">this</span>.populateTasks();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样下面的代码是App中的controller 如Listing 3所示：</p>
<p><strong> Listing 3 MVCController.java</strong> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MVCModel model;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tasks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MVCController</span><span class="params">(Context app_context)</span> </span>&#123;</span><br><span class="line">        tasks = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        model = <span class="keyword">new</span> MVCModel(app_context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(<span class="keyword">final</span> String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ContentValues data = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        data.put(<span class="string">"title"</span>, title);</span><br><span class="line">        model.addTask(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(<span class="keyword">final</span> String title)</span> </span>&#123;</span><br><span class="line">        model.deleteTask(<span class="string">"title='"</span> + title + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        model.deleteTask(<span class="string">"id='"</span> + id + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        model.deleteTask(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cursor c = model.loadAllTasks();</span><br><span class="line">        tasks.clear();</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            c.moveToFirst();</span><br><span class="line">            <span class="keyword">while</span> (c.isAfterLast() == <span class="keyword">false</span>) &#123;</span><br><span class="line">                tasks.add(c.getString(<span class="number">0</span>));</span><br><span class="line">                c.moveToNext();</span><br><span class="line">            &#125;</span><br><span class="line">            c.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tasks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个APP的Splash 会停留一段时间，在这段时间内app会做一些初始化操作，与此同时用户屏幕上会有图片和提示信息。</p>
<p>下面是我们app中的Splash页面，也就是启动界面，代码如Listing 4所示<br><strong>Listing 4 MVCSplash.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCSplash</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.ui_splash);</span><br><span class="line"></span><br><span class="line">        Thread timer = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent</span><br><span class="line">                            (<span class="string">"com.mrbool.MVC.MVCView"</span>);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AndroidManifest.xml 是Android应用中最基础的，很多项目的配置都在这个文件中。如下是我们app的AndroidManifest.xml 文件，代码如Listing5所示：</p>
<p><strong>Listing 5 AndroidManifest.xml </strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">manifest</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span> <span class="attribute">package</span>=<span class="value">"com.mrbool.mvc"</span></span><br><span class="line">    <span class="attribute">android:versionCode</span>=<span class="value">"1"</span> <span class="attribute">android:versionName</span>=<span class="value">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">uses-sdk</span> <span class="attribute">android:minSdkVersion</span>=<span class="value">"8"</span> <span class="attribute">android:targetSdkVersion</span>=<span class="value">"19"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">application</span> <span class="attribute">android:allowBackup</span>=<span class="value">"true"</span> <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_launcher"</span></span><br><span class="line">        <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">"com.mrbool.mvc.MVCView"</span> <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.mrbool.mvc.MVCView"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MVCSplash"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Android 图形界面创建非常的灵活，既可以用XML的方式也可以直接用JavaAPI在代码中创建，推荐使用XMl这种方式创建的界面更干净，我们app中用到的布局XML如下所示Listing 6 和7：</p>
<p><strong>Listing 6.ui_main.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=</span><br><span class="line">    "<span class="attribute">http:</span>//<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res</span>/<span class="attribute">android</span>"</span><br><span class="line"></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/widget31"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TableRow</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/row"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_alignParentLeft</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:layout_below</span>=<span class="value">"@+id/lvTask"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/etNewTask"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"200dp"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">""</span></span><br><span class="line">            <span class="attribute">android:textSize</span>=<span class="value">"18sp"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/btNewTask"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@string/add_button_name"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">TableRow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ListView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/lvTask"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_alignParentLeft</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:layout_alignParentTop</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Listing 7 ui_splash.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span> <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:id</span>=<span class="value">"@+id/placekitten"</span> <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span> <span class="attribute">android:src</span>=<span class="value">"@drawable/splash"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后呢，把app中用到的字符串常量放到string.xml 中是个良好的编程习惯。我们的string.xml 如下所示：</p>
<p><strong>Listing 8 strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"app_name"</span>&gt;</span>Creating an MVC (Model-View-Controller) framework for Android<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"action_settings"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"add_button_name"</span>&gt;</span>New Task<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java注解(慕课网)]]></title>
      <url>http://febsky.me/2016/03/04/2016-03-04-Java%E6%B3%A8%E8%A7%A3%EF%BC%88%E6%85%95%E8%AF%BE%E7%BD%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><hr>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_221615.png" alt="注解的概念"></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><hr>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222935.png" alt="语法概要"></p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222742.png" alt="语法要求"><br><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222634.png" alt="语法要求"></p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><hr>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222446.png" alt="分类方式"></p>
<ul>
<li><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222315.png" alt=""></li>
<li><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222308.png" alt=""></li>
<li><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_222407.png" alt=""></li>
</ul>
<h1 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h1><hr>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2016/03/04/20160303_221615.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的注解]]></title>
      <url>http://febsky.me/2016/03/02/2016-03-02-Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<h1 id="一、什么东西"><a href="#一、什么东西" class="headerlink" title="一、什么东西"></a>一、什么东西</h1></blockquote>
<p>注解是Java 1.5引入的，目前已被广泛应用于各种Java框架，如Hibernate，Jersey，Spring。注解相当于是一种嵌入在程序中的元数据，可以使用注解解析工具或编译器对其进行解析，也可以指定注解在编译期或运行期有效。好吧没看懂~~~</p>
<blockquote>
<h1 id="二、一般干什么用"><a href="#二、一般干什么用" class="headerlink" title="二、一般干什么用"></a>二、一般干什么用</h1></blockquote>
<ul>
<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@see @param @return 等</li>
<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量。</li>
<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>
</ul>
<blockquote>
<h1 id="三、四种元注解"><a href="#三、四种元注解" class="headerlink" title="三、四种元注解"></a>三、四种元注解</h1></blockquote>
<p>元注解主要负责注解其他注解的。</p>
<h2 id="1-Target：表示该注解可以用什么地方"><a href="#1-Target：表示该注解可以用什么地方" class="headerlink" title="1. @Target：表示该注解可以用什么地方"></a>1. @Target：表示该注解可以用什么地方</h2><p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<p><strong>作用</strong>：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>
<p><strong>取值(ElementType)有</strong>：</p>
<ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
</ol>
<h2 id="2-Retention-表示在什么级别保存该注解信息"><a href="#2-Retention-表示在什么级别保存该注解信息" class="headerlink" title="2. @Retention:表示在什么级别保存该注解信息"></a>2. @Retention:表示在什么级别保存该注解信息</h2><p>可选的参数值在枚举类型 RetentionPolicy 中，包括：</p>
<ol>
<li>RetentionPolicy.SOURCE 注解将被编译器丢弃 </li>
<li>RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢</li>
<li>RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。 </li>
</ol>
<h2 id="3-Documented-将此注解包含到Javadoc中"><a href="#3-Documented-将此注解包含到Javadoc中" class="headerlink" title="3. @Documented:将此注解包含到Javadoc中"></a>3. @Documented:将此注解包含到Javadoc中</h2><p><code>@Documented</code>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<h2 id="4-Inherited：允许子类继承父类的注解"><a href="#4-Inherited：允许子类继承父类的注解" class="headerlink" title="4. @Inherited：允许子类继承父类的注解"></a>4. @Inherited：允许子类继承父类的注解</h2><ul>
<li>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</li>
<li><strong>注意</strong>：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</li>
<li>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</li>
</ul>
<blockquote>
<h1 id="四、三种Java内置注解"><a href="#四、三种Java内置注解" class="headerlink" title="四、三种Java内置注解"></a>四、三种Java内置注解</h1></blockquote>
<ol>
<li>@Override – 当我们想要覆盖父类的一个方法时，需要使用该注解告知编译器我们正在覆盖一个方法。这样的话，当父类的方法被删除或修改了，编译器会提示错误信息。大家可以学习一下为什么我们总是应该在覆盖方法时使用Java覆盖注解。</li>
<li>@Deprecated – 当我们想要让编译器知道一个方法已经被弃用(deprecate)时，应该使用这个注解。Java推荐在javadoc中提供信息，告知用户为什么这个方法被弃用了，以及替代方法是什么。</li>
<li>@SuppressWarnings – 这个注解仅仅是告知编译器，忽略它们产生了特殊警告，比如：在java泛型中使用原始类型。它的保持性策略(retention policy)是SOURCE，在编译器中将被丢弃。</li>
</ol>
<blockquote>
<h1 id="五、自定义注解"><a href="#五、自定义注解" class="headerlink" title="五、自定义注解"></a>五、自定义注解</h1></blockquote>
<p> 使用<code>@interface</code>自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。<code>@interface</code>用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<p><strong>定义注解格式：</strong></p>
<p>　　<code>public @interface 注解名 {定义体}</code></p>
<p><strong>注解参数的可支持数据类型：</strong></p>
<ol>
<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>
<li>String类型</li>
<li>Class类型</li>
<li>enum类型</li>
<li>Annotation类型　　　　</li>
<li>以上所有类型的数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)<span class="comment">//定义该注解将应用于什么地方，方法或者域</span></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//定义该注解在哪一个级别可用</span></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> UseCase &#123;</span><br><span class="line">    <span class="comment">//注解元素，可以指定默认值，在使用注解的时候，可以直接给元素赋值如id=5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</span><br><span class="line">     <span class="comment">//利用枚举来设置参数类型</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">enum</span> ParameterType &#123; STRING, SHORT, INT, BOOL, LONG, OBJECT &#125;;</span><br><span class="line">     <span class="comment">// 默认值,在使用注解的时候，只需要为元素赋值</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> ParameterType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> ParameterType.STRING</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
<p><a href="http://www.cnblogs.com/peida/archive/2013/04/23/3036035.html" target="_blank" rel="external">参考文章</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的多线程之内存可见性]]></title>
      <url>http://febsky.me/2016/02/28/2016-02-28-Java%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a>Java内存模型（JMM）</h1><hr>
<p>Java 内存模型（<font color="#f01400">Java Memory Model</font>）描述了Java程序中各种变量（<strong>线程共享变量</strong>）的访问规则，以及在JVM中将变量存储到内存和从内存中读取出变量的底层细节。</p>
<a id="more"></a>
<ul>
<li>所有的变量都存储在主内存中</li>
<li>每个线程都有自己独立的工作内存，里面保存该线程使用到的变量副本（<font color="red">主内存中该变量的一份拷贝</font>）</li>
<li>通常称被多个线程访问的变量为共享变量。</li>
</ul>
<h2 id="1、Java内存模型的两条规定"><a href="#1、Java内存模型的两条规定" class="headerlink" title="1、Java内存模型的两条规定"></a>1、Java内存模型的两条规定</h2><ul>
<li>线程对共享变量的所有操作都必须在自己的工作内存中进行，而不能直接从主内存中读写</li>
<li>不同线程之间无法直接访问其他线程<em>工作内存</em>中的变量，线程之间变量值的传递需要通过主内存来完成。</li>
</ul>
<h2 id="2、共享变量可见性实现的原理"><a href="#2、共享变量可见性实现的原理" class="headerlink" title="2、共享变量可见性实现的原理"></a>2、共享变量可见性实现的原理</h2><p>线程1对共享变量的修改要想被线程2及时看到，必须经过下列两个步骤：</p>
<ul>
<li>把工作内存1中更新过的共享变量刷新到主内存中</li>
<li>将主内存中最新的共享变量的值更新到工作内存2中</li>
</ul>
<h2 id="3、实现可见性的要求："><a href="#3、实现可见性的要求：" class="headerlink" title="3、实现可见性的要求："></a>3、实现可见性的要求：</h2><p>要实现共享变量的可见性，必须保证两点：</p>
<ul>
<li>线程修改后的共享变量值能够及时从工作内存刷新到主内存中</li>
<li>其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中</li>
</ul>
<h2 id="4、java语言层面支持的可见性实现方式"><a href="#4、java语言层面支持的可见性实现方式" class="headerlink" title="4、java语言层面支持的可见性实现方式"></a>4、java语言层面支持的可见性实现方式</h2><ul>
<li>synchronized能够实现：<ul>
<li>原子性（同步）</li>
<li>可见性（JMM中的规定）：<ul>
<li>线程解锁前，必须把共享变量的最新值刷新到主内存中</li>
<li>线程加锁是，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重写读取最新的值（<font color="red">注意加锁和解锁需要是同一把锁</font>）</li>
</ul>
</li>
</ul>
</li>
<li>volatile<ul>
<li>能够保证volatile变量的可见性</li>
<li>不能保证volatile变量符合操作的原子性</li>
</ul>
</li>
</ul>
<h3 id="4-1、synchronize实现可见性的过程："><a href="#4-1、synchronize实现可见性的过程：" class="headerlink" title="4.1、synchronize实现可见性的过程："></a>4.1、synchronize实现可见性的过程：</h3><ol>
<li>获取互斥锁</li>
<li>清空工作内存</li>
<li>从主内存拷贝变量的最新副本到工作内存</li>
<li>执行代码</li>
<li>将更改后的共享变量的值刷新到主内存</li>
<li>释放互斥锁</li>
</ol>
<blockquote>
<p><em>Tips:<strong>重排序</strong>： 代码书写的顺序与实际执行的顺序不同，指令重排序是编译器或者处理器为了提高城乡性能而做的优化。</em></p>
<ol>
<li>编译器优化重排序（编译器优化）</li>
<li>指令级并行重排序（处理器优化，多核）</li>
<li>内存系统的重排序（处理器优化）</li>
</ol>
<p>as-if-serial: 无论如何重排序，程序执行的结果应该与代码顺序执行的结果一致（PS.我感觉这特么就是废话，如果不一致这代码写出来还能玩~）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;    <span class="comment">//①</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;    <span class="comment">//②</span></span><br><span class="line"><span class="keyword">int</span> sum = a+b;    <span class="comment">//③</span></span><br><span class="line"><span class="comment">//编译器不能保证 ① ②的顺序，但是③一定能保证在①②之后。</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2、volatile实现可见性"><a href="#4-2、volatile实现可见性" class="headerlink" title="4.2、volatile实现可见性"></a>4.2、volatile实现可见性</h3><ul>
<li>深入来说：通过加入内存屏障和禁止重排序优化来实现的。强制缓存区缓存失效</li>
<li>对volatile变量执行写操作时，会在写操作后加入一条store屏障指令</li>
<li>对volatile变量执行读操作的时候，会在读操作前加入一条load屏障指令</li>
</ul>
<hr>
<p>通俗来说：volatile变量在每次被线程访问的时候，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存。这样任何时刻，不同的线程总能看到该变量的最新值。</p>
<p>线程写volatile变量的过程：</p>
<ol>
<li>改变线程工作内存中volatile变量副本的值</li>
<li>将改变后的副本的值从工作内存刷新到主内存</li>
</ol>
<p>线程读volatile变量的过程：</p>
<ol>
<li>从主内存中读取volatile变量的最新值到线程的工作内存中</li>
<li>从工作内存中读取volatile变量的副本</li>
</ol>
<hr>
<p>volatile不能保证变量符合操作的原子性</p>
<p>比如<code>number ++</code>这货不是原子操作，这货其实是三步操作的。</p>
<p>那么如何保证它的原子性，有以下三种方式：</p>
<ul>
<li>使用<code>synchronized</code>关键字</li>
<li>使用<code>ReentrantLock</code>,(在java.util.concurrent.locks包下面)</li>
<li>使用<code>AtomicInterger</code>(java.util.concurrent.atomic包下面)</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.number ++;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-3、Volatile和synchronized比较"><a href="#4-3、Volatile和synchronized比较" class="headerlink" title="4.3、Volatile和synchronized比较"></a>4.3、Volatile和synchronized比较</h3><ul>
<li>volatile不需要加锁，比synchronized轻，不会阻塞线程</li>
<li><p>volatile 不能保证原子性</p>
<p> 对于可见性，Java提供了volatile关键字来保证可见性。</p>
</li>
</ul>
<p>　　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>
<p>　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>
<p>　　另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
<h2 id="5、导致共享变量在线程间不可见的原因："><a href="#5、导致共享变量在线程间不可见的原因：" class="headerlink" title="5、导致共享变量在线程间不可见的原因："></a>5、导致共享变量在线程间不可见的原因：</h2><ul>
<li>线程的交叉执行</li>
<li>重排序结合线程的交叉执行</li>
<li>共享变量更新后的值没有在工作内存与主内存间及时更新</li>
</ul>
<p><strong>相关文献</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">Java并发编程：volatile关键字解析</a></li>
<li><a href="http://www.imooc.com/learn/352" target="_blank" rel="external">细说Java多线程之内存可见性</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今天我23岁生日了]]></title>
      <url>http://febsky.me/2016/02/24/2016-02-24-%E4%BB%8A%E5%A4%A9%E6%88%9123%E5%B2%81%E7%94%9F%E6%97%A5%E4%BA%86/</url>
      <content type="html"><![CDATA[<p><img src="/images/my_self_photo.jpeg" alt="我自己哦"></p>
<p>今天是我23岁生日，哈哈hexo的博客终于搭建完成了。她比我小了整整23岁哦。今天还是蛮高兴的。入职Android也有一年了吧。去年忍痛从Java转行到了Android。人说23窜一窜，要是今年还能长个心愿就满足了。哈哈~~ <a id="more"></a></p>
<p>一时兴起在QQ空间上爆了张照，收到的大多数是不认识了的评论。毕业后时间一晃好多人真的是从此不再相见。没有时间没有机会。</p>
<p>今天还收到了好多红包哦~虽然都已经23了，但是能收到红包还是蛮高兴的(<em>^__^</em>) 嘻嘻……</p>
<p>总算有点计划的做东西了。博客是今年的第一步，然后接下来是做自己APP（一个古文词典）了，包括APP后台的搭建。</p>
<p>在很多地方搭建过博客，虽然自己写的不是高深的东西，但是也不想丢弃~~~新浪云，自己买服务器，阿里云的免费服务器，感觉管理成本太大，可定制性也太小，我想做个介绍自己app的主页，还要用到乱七八糟的文件传输客户端。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[调用Android的Dialog的show()方法dialog并没有显示]]></title>
      <url>http://febsky.me/2015/09/30/2015-09-30-%E8%B0%83%E7%94%A8Android%E7%9A%84Dialog%E7%9A%84show()%E6%96%B9%E6%B3%95dialog%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>需求：在删除文件的时候显示Dialog，删除完成后，Dialog消失</p>
<p>问题：在删除按钮的点击事件开始是调用show()方法，但是并没有显示</p>
<p>原因：在调用show的时候，主线程正在被其操作（本地文件删除操作）占用，把那个占用主线程的操作放到子线程上，后来把它放在new Thread（new runnable）上就解决了。</p>
<p>[code lang=”java”]</p>
<p>new Thread(){</p>
<p>public void run(){</p>
<p>//文件删除操作</p>
<p>}</p>
<p>}.start();</p>
<p>[/code]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PS（PhotoShop）基础知识（一）]]></title>
      <url>http://febsky.me/2015/09/16/2015-09-16-PS%EF%BC%88PhotoShop%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="窗口菜单"><a href="#窗口菜单" class="headerlink" title="窗口菜单"></a>窗口菜单</h2><p>调板 （Palette）  ps中个每个功能的控制面板，比如通道，图层。。。</p>
<p>工作区（WorkSpace）ps中的所有调板的摆放位置构成一个工作区。</p>
<p>Tab 和 Tab+shift  可以控制调板的显示和隐藏，</p>
<p>导航器  在window 中得Navigator</p>
<h2 id="视图菜单"><a href="#视图菜单" class="headerlink" title="视图菜单"></a>视图菜单</h2><p>标尺 cmd + R  拉出标尺后，可以双击标尺进行标尺的属性配置</p>
<p>标尺有个很好用的功能，就是自动吸附功能</p>
<p>F键，全屏显示图片</p>
<p>按住空格可以开启抓手工具</p>
<p>按住 Alt  点击 缩小</p>
<p>按住cmd键  点击  放大</p>
<p>CMD 组合 “+” 和 “-” 可以放大和缩小图片(放大和导航器配套使用)</p>
<h2 id="图像-Image-菜单"><a href="#图像-Image-菜单" class="headerlink" title="图像 Image(菜单)"></a>图像 Image(菜单)</h2><p>调整图像大小  可以保持长宽比调整</p>
<p>调整画布大小  可以选择相对大小，和绝对大小</p>
<p>Alt + 鼠标托动  可以复制照片</p>
<p>打印的照片  5吋 * 7吋  分辨率为300</p>
<p>cmd  + t 编辑变形</p>
<p>可以旋转   如果不知道调整的角度，可以通过工具箱中得ruler tool 量出角度</p>
<p>再根据Image中得旋转，自由角度。进行变换</p>
<h2 id="4-工具栏tool"><a href="#4-工具栏tool" class="headerlink" title="4 工具栏tool"></a>4 工具栏tool</h2><p>吸管工具  和信息调板（window —&gt;info ）配套使用，信息调板快捷键是F8</p>
<p>裁剪工具  可以透视裁剪  比如墙上的照片；还可以旋转裁剪，裁剪的时候选择框是可以旋转的。</p>
<p>图片拼合：首先要调整画布大小—通过图层调板（F7），调整要拼合的图片的透明度，根据透明度可以很好的拼合。</p>
<p>cmd  + t 缩放</p>
<p>cmd + e 合并图层</p>
<p>选区：可编辑的范围,cmd+shift +i 反选    cmd + d 取消选区</p>
<p>复制选区：cmd +c ，cmd+v 或者alt + 移动  前者产生新的图层，后者不产生</p>
<p>【cmd +c ，cmd +v ，cmd +t】</p>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>填充颜色</p>
<p>alt + shift + delete 前景填充</p>
<p>cmd + shift + delete 背景填充</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac Pro Mounty挂载NTFS硬盘报错]]></title>
      <url>http://febsky.me/2015/09/01/2015-09-01-Mac%20Pro%20Mounty%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<p>原来用的是Linux或者Win系统，后来鸟枪换炮整了个MacPro结果发现移动硬盘，只能读不能写。</p>
<p>原来Mac不能直接读取NTFS格式化的硬盘，卧槽。后来发现有个软件可以解决叫做Mounty。恩，好。</p>
<p>可是我把移动硬盘插上，然后地接确认挂载。</p>
<p>靠！告诉我~</p>
<p>The volume 电影 is not re-mountable in read/write mode .Probably it was not clean unmounted before.</p>
<p>什么吊意思，说什么不能被重新挂载，因为以前没有clean 卸载。</p>
<p>好吧，我英语不好。意思是说磁盘在win下面没有安全删除就拔出来了，导致文件系统中有错误区块，所以在MAC中不能挂载成读写模式。到win下面chkdsk /f一下就好了.</p>
<ol>
<li><p>插入移动硬盘到win下面</p>
</li>
<li><p>打开dos命令行。输入<code>chkdsk /f</code>,然后回车</p>
</li>
<li><p>Y</p>
</li>
<li><p>好吧，下次拔出移动硬盘之前，记得，右下角的安全删除。。。。</p>
</li>
</ol>
<p>然后再插到mac上就OK了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MAC 上的软件]]></title>
      <url>http://febsky.me/2015/08/13/2015-08-13-MAC%20%E4%B8%8A%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h2><p> <a href="https://itunes.apple.com/app/the-unarchiver/id425424353" target="_blank" rel="external">The Unarchiver</a></p>
<p>1、The Unarchiver</p>
<p>若想要免费的解压缩工具，这个几乎是必备的，原因是使用 Windows 资源管理器创建的 zip 压缩包不保存文件名编码信息，在 Mac OS X 上使用有些解压缩工具可能会遇到文件名乱码。The Unarchiver 支持文件名编码检测，可最大程度解决文件名乱码问题。</p>
<p>但作为免费应用，有功能限制：该应用无法预览压缩包内容，无法单独对压缩包内的部分文件进行解压缩。可以配合使用 BetterZip 家免费的 BetterZip Quick Look Generator 这款 Finder 插件来预览压缩包内容。</p>
<p>2、The Archive Browser</p>
<p>The Archive Browser 是上面推荐的 The Unarchiver 的收费扩展版，除 The Unarchiver 的全部功能外，还可预览压缩包内容，可单独对压缩包内的部分文件进行解压缩。原价 3.99 美元，可在官方网站也可在 Mac App Store 购买。其中 Mac App Store 版经常降价促销（0.99 - 1.99 美元），喜欢的朋友可以关注一下。</p>
<p>3、Keka</p>
<p>官方网站下载版免费，Mac App Store 版收费 1.99 美元。该应用支持在创建压缩包时将 Mac OS X 在文件夹下自动生成的隐藏系统文件排除，且压缩包包含文件名编码信息，不会造成文件在 Windows 下解压缩时文件名乱码。</p>
<p>以上推荐的应用中，建议 Keka 为必备，日常创建压缩包都用这个应用；The Unarchiver 和 The Archive Browser 中按个人需求二选一作为解压缩工具。</p>
<h2 id="数据库图形化界面"><a href="#数据库图形化界面" class="headerlink" title="数据库图形化界面"></a>数据库图形化界面</h2><p>Navicate    收费，但是~~~呵呵，破解的有很多、如果不会破解。。某宝上有很多卖号的、</p>
<h2 id="播放gif图片"><a href="#播放gif图片" class="headerlink" title="播放gif图片"></a>播放gif图片</h2><p>一开始的时候，我发现MAC自带的图片浏览器会把gif图片分解成多张静态图，</p>
<p>然后为了看gif图我把它拖到浏览器中，</p>
<p>后来发现，直接选中图片按键盘空格键。就可以播放gif了，挺方便的。</p>
<h2 id="虚拟机（都收费）"><a href="#虚拟机（都收费）" class="headerlink" title="虚拟机（都收费）"></a>虚拟机（都收费）</h2><ol>
<li>VMware-Fusion <a href="https://download3.vmware.com/software/fusion/file/VMware-Fusion-8.0.0-2985594.dmg" target="_blank" rel="external">下载地址</a></li>
</ol>
<p>注册码：</p>
<p>FA3RK-FHGD5-M88TZ-V4WEZ-MVAW0</p>
<p>FU75U-4KD5L-0845Z-JEXNZ-MLKD8</p>
<p>UV7XK-4PXEJ-080WY-4WXQT-NC0ZF</p>
<p>VC79R-6NF81-M84XZ-VNW5G-NKUW8</p>
<p>GC1HA-01Z14-H8D2P-04NNZ-Z6RY0</p>
<ol>
<li>Parallels Desktop </li>
</ol>
<p>据说不错，但是太贵了，没找到免费破解方式</p>
<ol>
<li>Virtual Box 呵呵，免费开源，太low</li>
</ol>
<h2 id="挂载移动硬盘NTFS格式的"><a href="#挂载移动硬盘NTFS格式的" class="headerlink" title="挂载移动硬盘NTFS格式的"></a>挂载移动硬盘NTFS格式的</h2><p>mounty</p>
<h2 id="屏幕截取"><a href="#屏幕截取" class="headerlink" title="屏幕截取"></a>屏幕截取</h2><p>shift + command + 4 截取任意位置，保存图片到桌面</p>
<p>shift  + command + 3 截取整个桌面</p>
<p>Mac 还自带了一个叫做，抓图的软件 英文名字叫做：Grab   ，打开这个软件后，菜单栏有四个截屏命令。</p>
<p>QQ也可以截图的。</p>
<h2 id="屏幕录制"><a href="#屏幕录制" class="headerlink" title="屏幕录制"></a>屏幕录制</h2><p>在windows中我们用<a href="http://blog.bahraniapps.com/gifcam/" target="_blank" rel="external">GifCam</a>挺爽的，可惜这个玩意貌似没有mac版的，不知道为啥</p>
<p>在Mac中我用的是<strong><a href="http://www.cockos.com/licecap/" target="_blank" rel="external">cockos</a></strong>和GifCam长的差不多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 远程分支版本回退]]></title>
      <url>http://febsky.me/2015/08/10/2015-08-10-git%20%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
      <content type="html"><![CDATA[<p>方法: </p>
<pre><code>`git reset --hard commit_id`(可用 git log --oneline 查看)     ###本地代码回退

`git push origin HEAD --force`    ###远程提交回退
</code></pre><p>或者</p>
<p><code>git reset --hard HEAD~1</code></p>
<p><code>git push --force</code></p>
<p>PS.</p>
<h2 id="git-revert-和-git-reset的区别"><a href="#git-revert-和-git-reset的区别" class="headerlink" title="git revert 和 git reset的区别"></a>git revert 和 git reset的区别</h2><ol>
<li><p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。 </p>
</li>
<li><p>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。 </p>
</li>
<li><p>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p>
</li>
</ol>
<p>git reset + commit号</p>
<p>git reset命令后面是需要加2种参数的：”–hard”和”–soft”。这条命令默认情况下是”–soft”。执行上述命令时，这该条commit号之后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用git status命令可以在缓冲区中看到这些修改。而如果加上”–hard”参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。但需要注意的一个问题是：由于这样的重置是直接在本地的修改，无法提交到远程服务器，如果直接丢弃的内容已经被推到远程服务器上了，则会造成本地和服务器无法同步的问题。即git reset –hard只能针对本地操作，不能针对远程服务器进行同样操作。如果从本地删掉的内容没有推到服务器上，则不会有副作用；如果被推到服务器，则下次本地和服务器进行同步时，这部分删掉的内容仍然会回来。</p>
<p>而上面注意中提到的问题则可以很好的被git revert 命令解决。</p>
<p>git revert + commit 号</p>
<p>该命令撤销对某个commit的提交，这一撤销动作会作为一个新的修改存储起来，这样，当你和服务器同步时，就不会产生什么副作用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSL 和 TLS]]></title>
      <url>http://febsky.me/2015/08/03/2015-08-03-SSL%20%E5%92%8C%20TLS/</url>
      <content type="html"><![CDATA[<p>SSL协议，是一种安全传输协议，最初是由 Netscape 在1996年发布，由于一些安全的原因SSL v1.0和SSL v2.0都没有公开，直到1996年的SSL v3.0。</p>
<p>TLS是SSL v3.0的升级版，目前市面上所有的Https都是用的是TLS，而不是SSL。</p>
<p>SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。</p>
<p>SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。</p>
<p>该协议由两层组成：SSL记录协议和ＳＳＬ握手协议。</p>
<p>TLS：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。</p>
<p>该协议由两层组成：TLS记录协议和TLS握手协议。</p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2015/08/03/ssl_tsl_1.png" alt=""></p>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2015/08/03/ssl_tsl_2.png" alt=""></p>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ul>
<li><p>对于开发人员来讲，使用tls与ssl，只是一个配置不同而已？openssl同时实现了这两个协议</p>
</li>
<li><p>使用tls或ssl，在访问的时候，是不是都是https的方式调用</p>
</li>
<li><p>使用与不使用https，时间上面的差距有多大</p>
</li>
<li><p>如果在代理服务器上面做配置，后面挂 N个tomcat，那瓶颈会不会出现在代理服务器上？如果分别在tomcat上面配置呢</p>
</li>
</ul>
<p><strong>解答：</strong></p>
<p><code>TLS</code>是<code>SSL</code>的新名字，<code>SSL</code>的版本号从1.0到3.0，<code>TLS 1.0</code>=<code>SSL 3.1</code>。</p>
<p>OpenSSL实现了SSL1.0~3.0和TLS1.0协议。</p>
<p>HTTP over SSL/TLS就是HTTPS</p>
<p>除非是大型文件下载网站，否则使用HTTP和HTTPS的性能差别不大</p>
<p>一般来说Tomcat很慢，如果代理服务器使用Nginx或Apache，1拖10的时候瓶颈一般不会出现在代理服务器上，但再多就不好说了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android WebView三步解决微信公众号文章不能加载视频的问题]]></title>
      <url>http://febsky.me/2015/07/24/2015-07-24-WebView%E4%B8%89%E6%AD%A5%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E8%A7%86%E9%A2%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>问题描述：想在自己的应用中通过WebView加载微信公众号中的一些文章，因为有些文章带有视频，所以必须要有播放功能，ISO能播放，Android怎么能说不能。。。</p>
<p>测试机型：小米，华为，摩托</p>
<p>Android系统：4.x~~~5.0</p>
<h2 id="1-如果是Android4-0以上的系统在manifest中设置Activity的hardwareAccelerated为true，开启硬件加速"><a href="#1-如果是Android4-0以上的系统在manifest中设置Activity的hardwareAccelerated为true，开启硬件加速" class="headerlink" title="1. 如果是Android4.0以上的系统在manifest中设置Activity的hardwareAccelerated为true，开启硬件加速"></a>1. 如果是Android4.0以上的系统在manifest中设置Activity的hardwareAccelerated为true，开启硬件加速</h2><p><code>android:hardwareAccelerated=&quot;true&quot;</code></p>
<h2 id="2-如果是Android4-0以上的系统在layout中设置WebView的layerType为hardware"><a href="#2-如果是Android4-0以上的系统在layout中设置WebView的layerType为hardware" class="headerlink" title="2.如果是Android4.0以上的系统在layout中设置WebView的layerType为hardware"></a>2.如果是Android4.0以上的系统在layout中设置<code>WebView</code>的layerType为hardware</h2><p><code>android:layerType=&quot;hardware&quot;</code></p>
<h2 id="3-最重要的部分给WebView设置settings信息"><a href="#3-最重要的部分给WebView设置settings信息" class="headerlink" title="3. 最重要的部分给WebView设置settings信息"></a>3. 最重要的部分给WebView设置settings信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;settings = webview_video.getSettings();&#10;&#10;        settings.setJavaScriptEnabled(true);&#10;&#10;        settings.setAllowFileAccess(true);&#10;&#10;        settings.setDatabaseEnabled(true);&#10;&#10;        settings.setDomStorageEnabled(true);&#10;&#10;        settings.setSaveFormData(false);&#10;&#10;        settings.setAppCacheEnabled(true);&#10;&#10;       settings.setCacheMode(WebSettings.LOAD_DEFAULT);&#10;&#10;        settings.setLoadWithOverviewMode(false);&#10;&#10;        settings.setUseWideViewPort(true);</span><br></pre></td></tr></table></figure>
<p>这行是最重要的<code>settings.setDomStorageEnabled(true);</code></p>
<hr>
<h2 id="PS-Activity-最小化的时候停止播放视频："><a href="#PS-Activity-最小化的时候停止播放视频：" class="headerlink" title="PS .Activity 最小化的时候停止播放视频："></a>PS .Activity 最小化的时候停止播放视频：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;@Override&#10;&#10; public boolean onKeyDown(int keyCode, KeyEvent event) &#123;&#10;&#10;     if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;&#10;&#10;         webview_video.loadData(&#38;quot;&#38;quot;, &#38;quot;text/html; charset=UTF-8&#38;quot;, null);&#10;&#10;     &#125;&#10;&#10;     return super.onKeyDown(keyCode, event);&#10;&#10; &#125;&#10;&#10; @Override&#10;&#10; public void onPause() &#123;&#10;&#10;     super.onPause();&#10;&#10;     webview_video.onPause();&#10;&#10; &#125;&#10;&#10; @Override&#10;&#10; public void onResume() &#123;&#10;&#10;     super.onResume();&#10;&#10;     webview_video.onResume();&#10;&#10; &#125;</span><br></pre></td></tr></table></figure>
<h1 id="关于webview-setting-的注释"><a href="#关于webview-setting-的注释" class="headerlink" title="关于webview setting 的注释"></a>关于webview setting 的注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setJavaScriptEnabled(true);  //&#25903;&#25345;js&#10;setPluginsEnabled(true);  //&#25903;&#25345;&#25554;&#20214; &#10;setUseWideViewPort(false);  //&#23558;&#22270;&#29255;&#35843;&#25972;&#21040;&#36866;&#21512;webview&#30340;&#22823;&#23567; &#10;setSupportZoom(true);  //&#25903;&#25345;&#32553;&#25918; &#10;setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //&#25903;&#25345;&#20869;&#23481;&#37325;&#26032;&#24067;&#23616;  &#10;supportMultipleWindows();  //&#22810;&#31383;&#21475; &#10;setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  //&#20851;&#38381;webview&#20013;&#32531;&#23384; &#10;setAllowFileAccess(true);  //&#35774;&#32622;&#21487;&#20197;&#35775;&#38382;&#25991;&#20214; &#10;setNeedInitialFocus(true); //&#24403;webview&#35843;&#29992;requestFocus&#26102;&#20026;webview&#35774;&#32622;&#33410;&#28857;&#10;webview webSettings.setBuiltInZoomControls(true); //&#35774;&#32622;&#25903;&#25345;&#32553;&#25918; &#10;setJavaScriptCanOpenWindowsAutomatically(true); //&#25903;&#25345;&#36890;&#36807;JS&#25171;&#24320;&#26032;&#31383;&#21475; &#10;setLoadWithOverviewMode(true); // &#32553;&#25918;&#33267;&#23631;&#24149;&#30340;&#22823;&#23567;&#10;setLoadsImagesAutomatically(true);  //&#25903;&#25345;&#33258;&#21160;&#21152;&#36733;&#22270;&#29255;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql中授权命令]]></title>
      <url>http://febsky.me/2015/05/25/2015-05-25-MySQL%E4%B8%AD%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql中授权命令<span class="operator"><span class="keyword">grant</span>用法详解: </span><br><span class="line"></span><br><span class="line">mysql中可以给你一个用户授予如<span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span>等其中的一个或者多个权限,主要使用<span class="keyword">grant</span>命令,用法格式为： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">on</span> 数据库对象 <span class="keyword">to</span> 用户 </span><br><span class="line"></span><br><span class="line">一、<span class="keyword">grant</span> 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> common_user@’%’ </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> common_user@’%’ </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">update</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> common_user@’%’ </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">delete</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> common_user@’%’ </span><br><span class="line"></span><br><span class="line">或者，用一条 MySQL 命令来替代： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> common_user@’%’ </span><br><span class="line"></span><br><span class="line">二、<span class="keyword">grant</span> 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> 创建、修改、删除 MySQL 数据表结构权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">alter</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">drop</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> 操作 MySQL 外键权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">references</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> 操作 MySQL 临时表权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tables</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> 操作 MySQL 索引权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">index</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> 操作 MySQL 视图、查看视图源代码 权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">show</span> <span class="keyword">view</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> 操作 MySQL 存储过程、函数 权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> routine <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> <span class="comment">-- now, can show procedure status </span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">alter</span> routine <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> <span class="comment">-- now, you can drop a procedure </span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> developer@’<span class="number">192.168</span><span class="number">.0</span>.%’;</span> </span><br><span class="line"></span><br><span class="line">三、<span class="operator"><span class="keyword">grant</span> 普通 DBA 管理某个 MySQL 数据库的权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> testdb <span class="keyword">to</span> dba@’localhost’ </span><br><span class="line"></span><br><span class="line">其中，关键字 “<span class="keyword">privileges</span>” 可以省略。 </span><br><span class="line"></span><br><span class="line">四、<span class="keyword">grant</span> 高级 DBA 管理 MySQL 中所有数据库的权限。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> dba@’localhost’ </span><br><span class="line"></span><br><span class="line">五、MySQL <span class="keyword">grant</span> 权限，分别可以作用在多个层次上。 </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">grant</span> 作用在整个 MySQL 服务器上： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> dba@localhost;</span> <span class="comment">-- dba 可以查询 MySQL 中所有数据库中的表。 </span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> dba@localhost;</span> <span class="comment">-- dba 可以管理 MySQL 中的所有数据库 </span></span><br><span class="line"></span><br><span class="line">2. <span class="operator"><span class="keyword">grant</span> 作用在单个数据库上： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> dba@localhost;</span> <span class="comment">-- dba 可以查询 testdb 中的表。 </span></span><br><span class="line"></span><br><span class="line">3. <span class="operator"><span class="keyword">grant</span> 作用在单个数据表上： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span> <span class="keyword">on</span> testdb.orders <span class="keyword">to</span> dba@localhost;</span> </span><br><span class="line"></span><br><span class="line">4. <span class="operator"><span class="keyword">grant</span> 作用在表中的列上： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>(<span class="keyword">id</span>, se, <span class="keyword">rank</span>) <span class="keyword">on</span> testdb.apache_log <span class="keyword">to</span> dba@localhost;</span> </span><br><span class="line"></span><br><span class="line">5. <span class="operator"><span class="keyword">grant</span> 作用在存储过程、函数上： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> <span class="keyword">procedure</span> testdb.pr_add <span class="keyword">to</span> ’dba’@’localhost’ </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> <span class="keyword">function</span> testdb.fn_add <span class="keyword">to</span> ’dba’@’localhost’ </span><br><span class="line"></span><br><span class="line">六、查看 MySQL 用户权限 </span><br><span class="line"></span><br><span class="line">查看当前用户（自己）权限： </span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;</span> </span><br><span class="line"></span><br><span class="line">查看其他 MySQL 用户权限： </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> dba@localhost;</span> </span><br><span class="line"></span><br><span class="line">七、撤销已经赋予给 MySQL 用户权限的权限。 </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">revoke</span> 跟 <span class="keyword">grant</span> 的语法差不多，只需要把关键字 “<span class="keyword">to</span>” 换成 “<span class="keyword">from</span>” 即可： </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> dba@localhost;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">revoke</span> all <span class="keyword">on</span> *.* <span class="keyword">from</span> dba@localhost;</span> </span><br><span class="line"></span><br><span class="line">八、MySQL <span class="operator"><span class="keyword">grant</span>、<span class="keyword">revoke</span> 用户权限注意事项 </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">grant</span>, <span class="keyword">revoke</span> 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 如果想让授权的用户，也可以将这些权限 <span class="keyword">grant</span> 给其他用户，需要选项 “<span class="keyword">grant</span> <span class="keyword">option</span>“ </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> testdb.* <span class="keyword">to</span> dba@localhost <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span> </span><br><span class="line"></span><br><span class="line">这个特性一般用不到。实际中，数据库权限最好由 DBA 来统一管理。</span><br></pre></td></tr></table></figure>
<h2 id="还有一组我常用的"><a href="#还有一组我常用的" class="headerlink" title="还有一组我常用的"></a>还有一组我常用的</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">向表中插入数据</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span> (<span class="keyword">id</span>,S_name) <span class="keyword">VALUE</span>(<span class="number">1234</span>,&amp;quot;</span>yantai&amp;quot;);</span><br><span class="line"></span><br><span class="line">把一张表中的数据插入另一张表</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2 (id2) </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">test</span> ;</span></span><br><span class="line"></span><br><span class="line">修改表数据</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">UPDATE</span> test2 <span class="keyword">SET</span> age=<span class="number">2</span>;</span>		<span class="comment">-- 修改所有的元组</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">UPDATE</span> test2 <span class="keyword">SET</span> age=<span class="number">22</span> <span class="keyword">WHERE</span> id2=<span class="number">1234</span>;</span>  <span class="comment">-- 修改一行</span></span><br><span class="line"></span><br><span class="line">创建用户</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">USER</span> liuqiang <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">USER</span> liuqiang@localhost <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span></span><br><span class="line"></span><br><span class="line">给某个用户授权</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> userinfo <span class="keyword">TO</span> liuqiang;</span></span><br><span class="line"></span><br><span class="line">把名为test的数据库的所有权限授权个某个用户</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> <span class="keyword">test</span>.* <span class="keyword">TO</span> <span class="string">'liuqiang'</span>;</span></span><br></pre></td></tr></table></figure>
<h1 id="修改root-密码"><a href="#修改root-密码" class="headerlink" title="修改root 密码"></a>修改root 密码</h1><p><code>mysql&gt; SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;newpass&#39;);</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我比价中意的几款WordPress主题]]></title>
      <url>http://febsky.me/2015/05/05/2015-05-05-%E6%88%91%E6%AF%94%E4%BB%B7%E4%B8%AD%E6%84%8F%E7%9A%84%E5%87%A0%E6%AC%BEWordPress%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="以下这几个都能直接在WordPress市场上搜到，都是免费的"><a href="#以下这几个都能直接在WordPress市场上搜到，都是免费的" class="headerlink" title="以下这几个都能直接在WordPress市场上搜到，都是免费的"></a>以下这几个都能直接在WordPress市场上搜到，都是免费的</h2><p>EverBox也不错，这个还是比较简洁的，稍微修改下就可以了，以蓝色调为主比较干净</p>
<ul>
<li><p>FlatBox做少许修改也行</p>
</li>
<li><p>Iconic One评论界面有点问题</p>
</li>
<li><p>Icy 这个怎么说呢，他有收费版，所以免费版的还是有少许缺陷</p>
</li>
<li><p>NewPersonal大气但是问题也挺大的</p>
</li>
<li><p>Swell Lite也还凑合</p>
</li>
<li><p>Hexa这个是时间轴样式的，配色如果不是技术类型的文章的话，还是不错的</p>
</li>
<li><p>Roda这个也是挺大气的，不过要想使用，需要自己做一些调节，太大气了、</p>
</li>
</ul>
<h2 id="还有几款在WordPress市场之外也不错"><a href="#还有几款在WordPress市场之外也不错" class="headerlink" title="还有几款在WordPress市场之外也不错"></a>还有几款在WordPress市场之外也不错</h2><ul>
<li><p>YuSi，就是颜色太重了，不太喜欢他的1.x版本的绿色，如果换个绿色就好了</p>
</li>
<li><p>Nucleare这个比较简洁，这个也是绿色调的</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git (github)的基本使用]]></title>
      <url>http://febsky.me/2015/04/20/2015-04-20-git%20(github)%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ol>
<li><p>用 git init 来在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p>
</li>
<li><p>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p>
</li>
<li><p>使用 git add 添加需要追踪的新文件和待提交的更改到暂存区， 然后使用 git status 和 git diff 查看有何改动， 最后用 git commit 将你的快照记录。这就是你要用的基本流程，绝大部分时候都是这样的。</p>
</li>
<li><p>在当前工作目录执行命令：<code>git add .</code> Git 会递归地将你执行命令时所在的目录中的所有文件添加上去.</p>
</li>
<li><p>执行 <code>git status</code> 以查看在你上次提交之后有啥被修改或者临时提交了， 从而决定自己是否需要提交一次快照，同时也能知道有什么改变被记录进去了。</p>
</li>
<li><p>git diff 显示已写入缓存与已修改但尚未写入缓存的改动的区别,执行 <code>git diff</code> 来查看执行 <code>git status</code> 的结果的详细信息 —— 一行一行地显示这些文件是如何被修改或写入缓存的。<br><code>git diff HEAD</code> —— 显示的是工作目录与上一次提交的更新的区别，无视缓存。</p>
</li>
<li><p>git commit -a 自动将在提交前将已记录、修改的文件放入缓存区,基本上这句话的意思就是，为任何已有记录的文件执行 <code>git add,</code>不过你仍然需要执行 <code>git add</code> 来添加新文件</p>
</li>
<li>git 对本地文件的文件名的大小写是不敏感额，如果修改文件名的大小写不会添加修改，命令行运行下列代码，强制git对大小写敏感<br><code>$ git config core.ignorecase false</code></li>
</ol>
<h2 id="git-branch【-origin-指的是主机名-master-指的是分支名】"><a href="#git-branch【-origin-指的是主机名-master-指的是分支名】" class="headerlink" title="git branch【  origin 指的是主机名    master 指的是分支名】"></a>git branch【  origin 指的是主机名    master 指的是分支名】</h2><p><code>git branch -r</code> 查看远程分支</p>
<p><code>git branch -a</code>    查看所有分支</p>
<p><code>git branch -d （branch name）</code>    删除分支</p>
<p><code>git  branch (new-branch -name)</code>    创建分支</p>
<p><code>git branch -v</code>  查看各个分支最后一个提交对象的信息</p>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p><code>git log   --oneline</code>  显示log一行摘要</p>
<p><code>git log --author=&quot;author-name&quot;</code>   显示某个用户提交的log</p>
<p><code>git log -p (file-name)</code>   某个文件的提交log</p>
<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p><strong>$ git push  :</strong></p>
<p> 执行 git push [alias 远程仓库名] [branch 远程分支名]，就会将你的当前 分支推送成为 [alias] 远端上的 [branch] 分支。 让我们试试推送我们的主分支到先前添加的“github”远端仓库上去</p>
<p><code>$ git push origin master</code></p>
<p><code>git push origin 本地分支名:远程分支名</code></p>
<h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><p><strong>$ git pull</strong></p>
<p>比如，取回origin主机的dev分支，与本地的master分支合并，需要写成下面这样。</p>
<p><code>$ git pull origin dev:master</code></p>
<p>上面命令表示，取回origin/dev分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>
<p><strong>$ git fetch</strong></p>
<p><code>$ git fetch origin dev</code></p>
<p><code>$ git merge origin/dev</code>   合并fetch下来的远程dev分支数据到当前分支上</p>
<p><code>git fetch origin 远程分支名:本地分支名</code></p>
<p>上面命令表示，取回origin/next分支，再与<code>当前分支</code>合并。实质上，这等同于先做git fetch，再做git merge。</p>
<h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><p><code>git checkout -b [分支名] [远程主机名]/[分支名]</code></p>
<h1 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h1><p><code>$ git push origin :you_branch_name</code></p>
<h1 id="git-追踪关系"><a href="#git-追踪关系" class="headerlink" title="git 追踪关系"></a>git 追踪关系</h1><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>
<p>Git也允许手动建立追踪关系。</p>
<p>git branch –set-upstream master origin/dev</p>
<p>上面命令指定本地master分支追踪远程  origin/dev分支。</p>
<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>
<p>$ git pull origin</p>
<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。</p>
<h1 id="如何查看本地跟踪分支对应的远程分支"><a href="#如何查看本地跟踪分支对应的远程分支" class="headerlink" title="如何查看本地跟踪分支对应的远程分支"></a>如何查看本地跟踪分支对应的远程分支</h1><p><code>git branch -vv（两个v），就能够看到本地分支跟踪的远程分支。</code></p>
<h1 id="获取远程服务器上某个分支"><a href="#获取远程服务器上某个分支" class="headerlink" title="获取远程服务器上某个分支"></a>获取远程服务器上某个分支</h1><p>加入服务器上被合作的伙伴新创建了一个分支，我们可以通过如下方式来获取：</p>
<p><code>$ git fetch origin</code></p>
<p>然后我门会获取到新的分支的名字</p>
<p>值得注意的是，在 <code>fetch</code>操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的<code>new_added_branch</code>分支，有的只是一个你无法移动的 <code>origin/new_added_branch</code> 指针。</p>
<p>如果要把该内容合并到当前分支，可以运行 <code>git merge origin/new_added_branch</code>。如果想要一份自己的 <code>new_added_branch</code> 来开发，可以在远程分支的基础上分化出一个新的分支来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b new_added_branch origin/new_added_branch&#10;Branch new_added_branch set up to track remote branch refs/remotes/origin/new_added_branch.&#10;Switched to a new branch &#34;new_added_branch&#34;</span><br></pre></td></tr></table></figure>
<p>这会切换到新建的 <code>new_added_branch</code> 本地分支，其内容同远程分支 <code>origin/new_added_branch</code> 一致，这样你就可以在里面继续开发了。</p>
<h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>如果没有冲突的话，merge完成。有冲突的话，git会提示那个文件中有冲突，比如有如下冲突：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;&#60;&#60;&#60;&#60;&#60;&#60; HEAD:test.c&#10;&#10;printf (&#8220;test1&#8243;);&#10;&#10;=======&#10;&#10;printf (&#8220;test2&#8243;);&#10;&#10;&#62;&#62;&#62;&#62;&#62;&#62;&#62; issueFix:test.c</span><br></pre></td></tr></table></figure>
<p>可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时检出的分支）中的内容，下半部分是在 issueFix 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：</p>
<p>printf (“test2″);</p>
<p>这个解决方案各采纳了两个分支中的一部分内容，而且删除了 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，和&gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行。</p>
<p>在解决了所有文件里的所有冲突后，运行git add 将把它们标记为已解决（resolved）。</p>
<p>然后使用git commit命令进行提交，merge就算完成了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[想要去做的东西]]></title>
      <url>http://febsky.me/2015/04/10/2015-04-10-%E6%83%B3%E8%A6%81%E5%8E%BB%E5%81%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      <content type="html"><![CDATA[<p>1. 古汉语词典—个人非常喜欢古文</p>
<p>2.狗尾续貂—多人微小说平台</p>
<p>3.仿ios桌面悬浮控制图标【比上面两个简单】</p>
<p>4.图片处理程序</p>
<p>5.知识百科</p>
<ol>
<li>更新我的手电筒应用，使其能支持4.0以下的版本，增加崩溃统计，甚至增加摇一摇功能，能在某个设置的时间后，摇动手机</li>
</ol>
<p>点亮屏幕或者闪光灯、</p>
<hr>
<h2 id="Java操作网络"><a href="#Java操作网络" class="headerlink" title="Java操作网络"></a>Java操作网络</h2><p>网络请求：HttpURLConnection <code>okhttp</code></p>
<p>HTML 分析： <code>jsoup</code> htmlparser</p>
<p>ORM ： <code>mybatis</code>只是ibatis的第二个名字而已，建议使用mybatis，轻量级的orm框架，执行效率高，便于书写各种sql</p>
<p>orm工具的基本思想</p>
<p>无论是用过的hibernate,mybatis,你都可以法相他们有一个共同点：</p>
<ol>
<li><p>从配置文件(通常是XML配置文件中)得到 sessionfactory.</p>
</li>
<li><p>由sessionfactory  产生 session</p>
</li>
<li><p>在session 中完成对数据的增删改查和事务提交等.</p>
</li>
<li><p>在用完之后关闭session 。</p>
</li>
<li><p>在java 对象和 数据库之间有做mapping 的配置文件，也通常是xml 文件。</p>
</li>
</ol>
<p>其实JSON 是可以传输图片的，所以我决定为了方便保存把图片保存到数据库中。</p>
<h2 id="Python-操作网络"><a href="#Python-操作网络" class="headerlink" title="Python 操作网络"></a>Python 操作网络</h2><p>网络请求：urlib urlib2</p>
<p>HTML 分析：<code>pyquery</code> BeautifulSoup lxml</p>
<p>ORM ：<code>sqlalchemy</code> SQLObject</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI Android NDK开发（一）]]></title>
      <url>http://febsky.me/2015/03/12/2015-03-12-JNI%20Android%20NDK%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. Java本地接口</span><br><span class="line"></span><br><span class="line">    是一个中间件，沟通java和本地的C函数库的中间件。</span><br><span class="line"></span><br><span class="line">2. 为什么用JNI</span><br><span class="line"></span><br><span class="line">    Java是不能进行驱动开发的，所谓的驱动开发是指，直接的操纵硬件。</span><br><span class="line"></span><br><span class="line">    从而JNI扩展了Java虚拟机的能力。</span><br><span class="line"></span><br><span class="line">    可以提高效率，增强音视频的处理，</span><br><span class="line"></span><br><span class="line">    代码复用，直接用Java调用C函数库</span><br><span class="line"></span><br><span class="line">3.  C语言基础</span><br><span class="line"></span><br><span class="line">    typedef int INT ;  //给int类型起个别名，这个关键字是给某个类型起个别名</span><br><span class="line"></span><br><span class="line">    #define PI 3.14    //这个在编译的时候会用3.14直接替换代码中的PI这个字符</span><br><span class="line"></span><br><span class="line">    C代码在不同的CPU上运行的结果也是不一样的。</span><br><span class="line"></span><br><span class="line">4.  NDK  Native developer kits</span><br><span class="line"></span><br><span class="line">    Android提供的一个交叉编译的工具链</span><br><span class="line"></span><br><span class="line">    交叉编译：把weindows平台下写好的C代码，打包编译成Linux下可以用的函数库。</span><br><span class="line"></span><br><span class="line">    （Windows下的函数库是以.dll结尾，Linux下的函数库以.so结尾）</span><br><span class="line"></span><br><span class="line">5.  Ndk目录结构</span><br><span class="line"></span><br><span class="line">	Build     NDK搭建环境</span><br><span class="line"></span><br><span class="line">	Docs     ndk开发的文档 </span><br><span class="line"></span><br><span class="line">	Platforms  ndk支持的平台 </span><br><span class="line"></span><br><span class="line">	Arm  平台  英国arm公司设计出来  靠专利赚钱市场占有率非常高 功耗比较低</span><br><span class="line"></span><br><span class="line">	Mips  cpu架构  龙芯    cos   copy other system</span><br><span class="line"></span><br><span class="line">	x86  intel公司  没有明显的优势   k900</span><br><span class="line"></span><br><span class="line">	Samples  提供了示例代码 </span><br><span class="line"></span><br><span class="line">	Sources  ndk是开源, ndk的源码 </span><br><span class="line"></span><br><span class="line">	Tests    测试的工具链 </span><br><span class="line"></span><br><span class="line">	Toolchains 提供了交叉编译的工具链 </span><br><span class="line"></span><br><span class="line">	ndk-build.cmd  批处理指令 ,交叉编译</span><br><span class="line"></span><br><span class="line">	把ndk-build 配置到环境变量中</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 的屏幕适配（包括字体适配）]]></title>
      <url>http://febsky.me/2015/03/08/2015-03-08-Android%E7%9A%84%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%EF%BC%88%E5%8C%85%E6%8B%AC%E5%AD%97%E4%BD%93%E9%80%82%E9%85%8D%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> //</span><br><span class="line"></span><br><span class="line">多套图，有多少个分辨率就切多少套图，</span><br><span class="line"></span><br><span class="line"><span class="number">800</span>*<span class="number">480</span> <span class="number">1280</span>*<span class="number">720</span> <span class="number">1920</span>*<span class="number">1080</span></span><br><span class="line"></span><br><span class="line">一般小应用只是一套图的话用（<span class="number">800</span>*<span class="number">480</span>）</span><br><span class="line"></span><br><span class="line">适配方式：(这些屏幕都是<span class="number">16</span>:<span class="number">9</span>的长宽比)</span><br><span class="line"></span><br><span class="line">a) 图片适配(和手机的像素密度有关，这个像素密度可以用勾股定理来计算)</span><br><span class="line"></span><br><span class="line">    ldpi  ---&amp;gt;  <span class="number">320</span>*<span class="number">240</span>   <span class="number">1</span>dp = <span class="number">0.75</span>px      ~<span class="number">120</span></span><br><span class="line"></span><br><span class="line">    mdpi  ---&amp;gt;  <span class="number">480</span>*<span class="number">320</span>   <span class="number">1</span>dp = <span class="number">1</span>px    如果没有，加载hdpi里面的图片     ~<span class="number">160</span></span><br><span class="line"></span><br><span class="line">    hdpi  ---&amp;gt;  <span class="number">800</span>*<span class="number">480</span>   <span class="number">1</span>dp = <span class="number">1.5</span>px   <span class="number">3.7</span>-<span class="number">4.3</span>寸左右     ~<span class="number">240</span></span><br><span class="line"></span><br><span class="line">    xhdpi ---&amp;gt;  <span class="number">1280</span>*<span class="number">720</span>  <span class="number">1</span>dp = <span class="number">2</span>px(可以以这个为标准设计和切图)       ~<span class="number">320</span></span><br><span class="line"></span><br><span class="line">    xxhdpi  ---&amp;gt; <span class="number">1920</span>*<span class="number">1080</span>  <span class="number">1</span>dp = <span class="number">3</span>px     ~<span class="number">480</span></span><br><span class="line"></span><br><span class="line">    xxxhdpi ---&amp;gt; <span class="number">1440</span> * <span class="number">2560</span> <span class="number">1</span>dp = <span class="number">4</span>px     ~<span class="number">640</span></span><br><span class="line"></span><br><span class="line">    综上来看dp是达不到完全适配的 </span><br><span class="line"></span><br><span class="line">   //注意，Android手机会自动缩放图片，比如，你的手机是xxhdpi的，但是只有一张图片，假设这张图片</span><br><span class="line"></span><br><span class="line">   //的大小是<span class="number">512</span>*<span class="number">512</span> 的，你把这张图片放大xxxhdpi的文件夹下，那么你的手机也会找到这张图片的的，</span><br><span class="line"></span><br><span class="line">   //不过，他会把这张图片尺寸缩小，缩成<span class="number">384</span>*<span class="number">384</span>尺寸的放到你的ImageView中，假设你的ImageView的宽高</span><br><span class="line"></span><br><span class="line">   //设置的是自适应。那这个<span class="number">384</span>是怎么来的那，就是按照上面的dp和px的比例算出来的。<span class="number">512</span> * (<span class="number">3</span>/<span class="number">4</span>) = <span class="number">384</span></span><br><span class="line"></span><br><span class="line">  //下面是当面流行的安卓手机的屏幕尺寸和分辨率：</span><br><span class="line"></span><br><span class="line">  //小米 <span class="number">3</span>和小米<span class="number">4</span> 屏幕尺寸和分辨率：        <span class="number">5</span>英寸 <span class="number">1920</span>×<span class="number">1080</span>像素</span><br><span class="line"></span><br><span class="line"> //魅族MX2 屏幕尺寸和分辨率：                 <span class="number">4.4</span>英寸 <span class="number">1280</span>×<span class="number">800</span>像</span><br><span class="line"></span><br><span class="line"> //魅族MX3 屏幕尺寸和分辨率：                 <span class="number">5.1</span>英寸 <span class="number">1800</span>×<span class="number">1080</span>像素</span><br><span class="line"></span><br><span class="line"> //HTC  one屏幕尺寸和分辨率：               <span class="number">4.7</span>英寸 <span class="number">1920</span>×<span class="number">1080</span>像素</span><br><span class="line"></span><br><span class="line"> //华为荣耀<span class="number">6</span>屏幕尺寸和分辨率：             <span class="number">5</span>英寸 <span class="number">1920</span>×<span class="number">1080</span>像素</span><br><span class="line"></span><br><span class="line"> //华为p6屏幕尺寸和分辨率：                 <span class="number">4.7</span>英寸 <span class="number">1280</span>×<span class="number">720</span>像素</span><br><span class="line"></span><br><span class="line"> //华为p7屏幕尺寸和分辨率：                  <span class="number">5</span>英寸 <span class="number">1920</span>×<span class="number">1080</span>像素</span><br><span class="line"></span><br><span class="line">b) dimens.xml 适配(放置了一些宽高的尺寸信息)</span><br><span class="line"></span><br><span class="line">   为了适配不同像素密度的手机，我们创建适配的value文件夹，命名为：value-<span class="number">1280</span>x720</span><br><span class="line"></span><br><span class="line">   然后在里面创建dimens.xml ,不过这个xml里面有的数据，都要在value文件夹下的dimens.xml</span><br><span class="line"></span><br><span class="line">   中存在一份，只是值不一样而已。</span><br><span class="line"></span><br><span class="line">c) 布局适配 layout/文件夹</span><br><span class="line"></span><br><span class="line">   和上面一样，为了适配特别像素的手机，我们同样正在res目录下创建一个名为：</span><br><span class="line"></span><br><span class="line">   layout-<span class="number">1280</span>x720的文件夹。</span><br><span class="line"></span><br><span class="line">d) java代码适配</span><br><span class="line"></span><br><span class="line">   给当前的控件设置宽高为屏幕的宽高的百分比</span><br><span class="line"></span><br><span class="line">   //创建一个存储屏幕相关信息的对象</span><br><span class="line"></span><br><span class="line">   DisplayMetrics displayMetrics = new DisplayMetrics();</span><br><span class="line"></span><br><span class="line">   //通过下面的方式把屏幕信息存储到displayMetrics对象中</span><br><span class="line"></span><br><span class="line">   getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);</span><br><span class="line"></span><br><span class="line">   //获取宽高</span><br><span class="line"></span><br><span class="line">   int width = displayMetrics.widthPixels;</span><br><span class="line"></span><br><span class="line">  int height = displayMetrics.heightPixels;</span><br><span class="line"></span><br><span class="line">   //将对应的宽高设置在其父控件上，然后作用在子控件上</span><br><span class="line"></span><br><span class="line">   //假设这个layout为一本RelativeLayout中包含一个TextView</span><br><span class="line"></span><br><span class="line">   //我们想要这个TextView为RelativeLayout的一半。</span><br><span class="line"></span><br><span class="line"> RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(</span><br><span class="line"></span><br><span class="line">(int)(width*<span class="number">0.5</span>+<span class="number">0.5</span>),    //从数学角度进行四舍五入，取屏幕宽带的一半</span><br><span class="line"></span><br><span class="line">(int)(height*<span class="number">0.5</span>+<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> TextView tv = (TextView)findViewById(R.id.tv);</span><br><span class="line"></span><br><span class="line"> tv.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">e) 权重适配</span><br><span class="line"></span><br><span class="line">    剩余空间的分配规则，首先要设置android:layout_width=&amp;quot;<span class="number">0</span>dp&amp;quot;或者</span><br><span class="line"></span><br><span class="line">    android:layout_height=&amp;quot;<span class="number">0</span>dp&amp;quot;然后设置android:layout_weight=&amp;quot;<span class="number">1</span>&amp;quot;</span><br><span class="line"></span><br><span class="line">    只能在LinearLayout中使用</span><br></pre></td></tr></table></figure>
<h2 id="网上别人的代码-用于px和dp相互转换"><a href="#网上别人的代码-用于px和dp相互转换" class="headerlink" title="网上别人的代码 用于px和dp相互转换"></a>网上别人的代码 用于px和dp相互转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DensityUtil</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span><br><span class="line"></span><br><span class="line">     * 根据手机的分辨率从 dp 的单位 转成为 px(像素) </span><br><span class="line"></span><br><span class="line">     */</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dip2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * scale + <span class="number">0.5f</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span><br><span class="line"></span><br><span class="line">     * 根据手机的分辨率从 px(像素) 的单位 转成为 dp </span><br><span class="line"></span><br><span class="line">     */</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dip</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / scale + <span class="number">0.5f</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字体适配"><a href="#字体适配" class="headerlink" title="字体适配"></a>字体适配</h2><p>安卓4.0之后用的字体是Roboto。中文字体：方正兰亭黑体</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以在在<span class="number">720</span>*<span class="number">1280</span>的基础上的字体设计大小。</span><br><span class="line"></span><br><span class="line">注释最小字体：               <span class="number">12</span>sp  ==  <span class="number">24</span>px</span><br><span class="line"></span><br><span class="line">文本字体：                       <span class="number">14</span>sp  ==  <span class="number">28</span>px</span><br><span class="line"></span><br><span class="line">文章标题或图标名称：   <span class="number">16</span>sp  ==   <span class="number">32</span>px</span><br><span class="line"></span><br><span class="line">导航标题：                       <span class="number">18</span>sp  ==   <span class="number">36</span>px</span><br></pre></td></tr></table></figure>
<p>Android 界面设计的一片文章</p>
<p><a href="http://www.25xt.com/appdesign/6536.html" target="_blank" rel="external">http://www.25xt.com/appdesign/6536.html</a></p>
<h2 id="图标设计"><a href="#图标设计" class="headerlink" title="图标设计"></a>图标设计</h2><p>应用程序图标 （Icon）应当是一个 Alpha 通道透明的32位 PNG 图片。由于安卓设备众多，一个应用程序图标需要设计几种不同大小，如：</p>
<p>LDPI (Low Density Screen，120 DPI)，其图标大小为 36 x 36 px。</p>
<p>MDPI (Medium Density Screen, 160 DPI)，其图标大小为 48 x 48 px。</p>
<p>HDPI (High Density Screen, 240 DPI)，其图标大小为 72 x 72 px。</p>
<p>xhdpi (Extra-high density screen, 320 DPI)，其图标大小为 96 x 96 px。</p>
<p> 建议在设计过程中，在四周空出几个像素点使得设计的图标与其他图标在视觉上一致，例如，</p>
<p>96 x 96 px 图标可以画图区域大小可以设为 88 x 88 px， 四周留出4个像素用于填充（无底色）。</p>
<p>72 x 72 px 图标可以画图区域大小可以设为 68 x 68 px， 四周留出2个像素用于填充（无底色）。</p>
<p>48 x 48 px 图标可以画图区域大小可以设为 46 x 46 px， 四周留出1个像素用于填充（无底色）。</p>
<p>36 x 36 px 图标可以画图区域大小可以设为 34 x 34 px， 四周留出1个像素用于填充（无底色）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python中获取某天是某个月中的第几周]]></title>
      <url>http://febsky.me/2015/02/09/2015-02-25-Python%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9F%90%E5%A4%A9%E6%98%AF%E6%9F%90%E4%B8%AA%E6%9C%88%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%91%A8/</url>
      <content type="html"><![CDATA[<p>找了半天竟然没找到，如何在Python的datetime处理上，获取某年某月某日，是属于这个月的第几周。</p>
<p>无奈之下求助同学，同学给写了一个模块。【如果你知道Python有这个原生的库，请不吝赐教】</p>
<p>我稍作整理记录在下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'####'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_week_of_month</span><span class="params">(year, month, day)</span>:</span></span><br><span class="line"></span><br><span class="line">    &amp;quot;&amp;quot;&amp;quot;</span><br><span class="line"></span><br><span class="line">    获取指定的某天是某个月中的第几周</span><br><span class="line"></span><br><span class="line">    周一作为一周的开始</span><br><span class="line"></span><br><span class="line">    &amp;quot;&amp;quot;&amp;quot;</span><br><span class="line"></span><br><span class="line">    end = int(datetime.datetime(year, month, day).strftime(&amp;quot;%W&amp;quot;))</span><br><span class="line"></span><br><span class="line">    begin = int(datetime.datetime(year, month, <span class="number">1</span>).strftime(&amp;quot;%W&amp;quot;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> end - begin + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> get_week_of_month(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> get_week_of_month(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> get_week_of_month(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> get_week_of_month(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 中其实已经自带了easy_install和pip]]></title>
      <url>http://febsky.me/2015/02/09/2015-02-25-Python%20%E4%B8%AD%E5%85%B6%E5%AE%9E%E5%B7%B2%E7%BB%8F%E8%87%AA%E5%B8%A6%E4%BA%86easy_install%E5%92%8Cpip/</url>
      <content type="html"><![CDATA[<p>以前每次安装Python的时候为了能更快的下载第三方插件都要先安装easy_install或者pip</p>
<p>但是后来发现，Python的安装文件中其实已经安装了这两个东西，只是没有放到环境变量中所以无法直接在命令行引用</p>
<p>假设我的Python直接安装在C盘的根目录下，win7上的路径为：C:\Python27\Scripts，只要把这个路径配置到win7的path下面就能直接在命令行使用了。</p>
<p>至于Linux也是一样，只是配置环境变量的方式不同而已。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio 中我的常用的快捷键]]></title>
      <url>http://febsky.me/2015/02/08/2015-02-08-AndroidStudio%E4%B8%AD%E6%88%91%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="MAC下的快捷键"><a href="#MAC下的快捷键" class="headerlink" title="MAC下的快捷键"></a>MAC下的快捷键</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line"></span><br><span class="line">ctrl + space 代码提示</span><br><span class="line"></span><br><span class="line">ctrl + t   显示重构的快捷操作</span><br><span class="line"></span><br><span class="line">ctrl + H 显示类的集成关系</span><br><span class="line"></span><br><span class="line">ctrl + o重写父类中的方法</span><br><span class="line"></span><br><span class="line">alt + enter  智能修改提示（类似Eclipse中的ctrl + <span class="number">1</span>）</span><br><span class="line"></span><br><span class="line">shift + 鼠标滚轮   水平滑动滚动条</span><br><span class="line"></span><br><span class="line">F1查看类或者方法或者变量的注释</span><br><span class="line"></span><br><span class="line">command + / 注释一行</span><br><span class="line"></span><br><span class="line">command + E 查看最近访问过的文件</span><br><span class="line"></span><br><span class="line">command + J 一个提示代码模板的快捷键，像在Eclipse中输入syso就能完成一个打印语句一样</span><br><span class="line"></span><br><span class="line">command + N 生成get/set方法或者构造方法</span><br><span class="line"></span><br><span class="line">command + B 跳到类声明处，或者一个方法或字段被引用的地方（和command + 鼠标左键一个效果）</span><br><span class="line"></span><br><span class="line">command + D 复制粘贴上一行</span><br><span class="line"></span><br><span class="line">command + X 剪切一行</span><br><span class="line"></span><br><span class="line">command + delete 删除一行</span><br><span class="line"></span><br><span class="line">command + o 类名查找</span><br><span class="line"></span><br><span class="line">command + r 查找和替换</span><br><span class="line"></span><br><span class="line">command + l 跳到某一行（跳到指定行）</span><br><span class="line"></span><br><span class="line">command + 鼠标左键 跟踪方法到定义（接口中的定义）</span><br><span class="line"></span><br><span class="line">option + command + 鼠标左键    跟踪方法到实习类中的定义</span><br><span class="line"></span><br><span class="line">Cmd + Shift + U  大小写转换</span><br><span class="line"></span><br><span class="line">option + command + F 局部变量提取成成员变量</span><br><span class="line"></span><br><span class="line">command + option（alt）+ T 生成<span class="keyword">try</span>/catch代码块</span><br><span class="line"></span><br><span class="line">Ctrl+ option（alt）+O   优化导入的类和包</span><br><span class="line"></span><br><span class="line">shift + command + delete （backspace）回到最近修改的位置</span><br><span class="line"></span><br><span class="line">shift + command + F7 高亮显示某个变量在本文件中的应用位置，command + G 在各个使用位置中移动（esc退出高亮查找）</span><br><span class="line"></span><br><span class="line">ctrl + shift + Q 查看当前所在的方法（就是查看你当前在写哪个方法，在文档的上面显示方法名）</span><br><span class="line"></span><br><span class="line">ctrl + shift + J 把两行弄成一行，貌似没什么用</span><br><span class="line"></span><br><span class="line">alt + shift + c 查看最近改变</span><br></pre></td></tr></table></figure>
<h2 id="win7下的快捷键"><a href="#win7下的快捷键" class="headerlink" title="win7下的快捷键"></a>win7下的快捷键</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">Alt+回车 导入包,自动修正(比如添加强制类型转换,非常有用)</span><br><span class="line"></span><br><span class="line">Shift+F6  重构-重命名</span><br><span class="line"></span><br><span class="line">Alt+ left/right 切换代码视图</span><br><span class="line"></span><br><span class="line">Ctrl+Alt+Space 代码提示</span><br><span class="line"></span><br><span class="line">Ctrl+J  自动代码(代码片段)</span><br><span class="line"></span><br><span class="line">Alt+Insert 生成代码(如get,set方法,构造函数等)</span><br><span class="line"></span><br><span class="line">Ctrl+O：子类想重写父类的方法时，按此组合键可显示所有父类的方法。</span><br><span class="line"></span><br><span class="line">Ctrl+Tab：打开界面切换窗口，保持按住Ctrl键，选中相应的要打开的窗口。</span><br><span class="line"></span><br><span class="line">Ctrl+N   查找类</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+N 查找文件</span><br><span class="line"></span><br><span class="line">Ctrl+Alt+L  格式化代码</span><br><span class="line"></span><br><span class="line">Ctrl+Alt+O 优化导入的类和包</span><br><span class="line"></span><br><span class="line">Ctrl+R 替换文本</span><br><span class="line"></span><br><span class="line">Ctrl+F 查找文本</span><br><span class="line"></span><br><span class="line">Ctrl+H 显示类结构图</span><br><span class="line"></span><br><span class="line">Ctrl+Q 显示注释文档</span><br><span class="line"></span><br><span class="line">Ctrl+B 转到声明处</span><br><span class="line"></span><br><span class="line">Ctrl+W 选择当前的单词</span><br><span class="line"></span><br><span class="line">Ctrl+X 删除行</span><br><span class="line"></span><br><span class="line">Ctrl+D 复制行</span><br><span class="line"></span><br><span class="line">Ctrl+P 方法参数提示</span><br><span class="line"></span><br><span class="line">Alt＋Up <span class="keyword">and</span> Alt＋Down可在方法间快速移动</span><br><span class="line"></span><br><span class="line">Alt+Shift+C 对比最近修改的代码</span><br><span class="line"></span><br><span class="line">Ctrl+E或者Alt+Shift+C  最近更改的代码</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line">搜索这个功能向来非常重要</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、Search &amp;amp; Navigation各种快速查找</span><br><span class="line"></span><br><span class="line">Cmd + O —— 查找Class</span><br><span class="line"></span><br><span class="line"> * 连按两次的技巧</span><br><span class="line"></span><br><span class="line"> * Option的功能</span><br><span class="line"></span><br><span class="line">Cmd + Shift + O —— 查找文件 比如Resource Assets等</span><br><span class="line"></span><br><span class="line">Cmd + Option + O —— 查找方法和变量</span><br><span class="line"></span><br><span class="line">Partial Matching 局部匹配</span><br><span class="line"></span><br><span class="line">MainActivity —&amp;gt; Mi</span><br><span class="line"></span><br><span class="line">Mi:<span class="number">22</span></span><br><span class="line"></span><br><span class="line">Cmd + L不知道命令快捷键时怎么办？</span><br><span class="line"></span><br><span class="line">Cmd + Shift + A —— 查找命令</span><br><span class="line"></span><br><span class="line">Double Shift —— Search everywhere最近文件历史，方便快速切换：</span><br><span class="line"></span><br><span class="line">Cmd + E —— Recently opened files</span><br><span class="line"></span><br><span class="line">Cmd + Shift + E —— Recently edited files</span><br><span class="line"></span><br><span class="line">cmd+alt+left/right —— Navigate Back/Forward</span><br><span class="line"></span><br><span class="line">cmd+shift+backspace —— Last Edit Location关于方法和引用的快捷键：</span><br><span class="line"></span><br><span class="line">Cmd + F12 —— Class Members</span><br><span class="line"></span><br><span class="line">Option + F7 ——查找哪里引用了该方法</span><br><span class="line"></span><br><span class="line">Cmd + Option + F7 —— 列出引用的列表</span><br><span class="line"></span><br><span class="line">Ctrl + H —— 显示层级结构</span><br><span class="line"></span><br><span class="line">Ctrl + Option + H —— 显示所有调用方法的地方强大而方便的全局查找：</span><br><span class="line"></span><br><span class="line">Cmd + F —— 在当前文件内查找</span><br><span class="line"></span><br><span class="line">Cmd + Shift + F —— 在全局内查找（可自定义）一些其它常用快捷键：</span><br><span class="line"></span><br><span class="line">Cmd + B —— 跳转到申明</span><br><span class="line"></span><br><span class="line">Cmd + Option + B —— 跳转到实现</span><br><span class="line"></span><br><span class="line">Cmd + U 跳转到超类</span><br><span class="line"></span><br><span class="line">Cmd +Shift + B —— 类型申明</span><br><span class="line"></span><br><span class="line">Cmd +Ctrl + ↑ —— 相关联的文件</span><br><span class="line"></span><br><span class="line">Cmd + P —— 方法参数</span><br><span class="line"></span><br><span class="line">Ctrl + J —— 方法文档</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Refactor一些基础功能：</span><br><span class="line"></span><br><span class="line">Ctrl + T —— 重构</span><br><span class="line"></span><br><span class="line">Shift + F6 —— 重命名</span><br><span class="line"></span><br><span class="line">F5 copy</span><br><span class="line"></span><br><span class="line">Cmd + D —— 复制当前行在下方</span><br><span class="line"></span><br><span class="line">Cmd + delete —— 安全删除</span><br><span class="line"></span><br><span class="line">Cmd + Shift + ↑ —— 上下移动当前行 或者方法</span><br><span class="line"></span><br><span class="line">Cmd + Shift + Enter —— 补全我比较喜欢的几个功能：</span><br><span class="line"></span><br><span class="line">F6 move</span><br><span class="line"></span><br><span class="line">Ctrl + Shift + J —— 合并行</span><br><span class="line"></span><br><span class="line">Shift + Enter —— 换行</span><br><span class="line"></span><br><span class="line">Option + F1 —— 选择菜单</span><br><span class="line"></span><br><span class="line">非常赞建议必须记住的几个快捷键：</span><br><span class="line"></span><br><span class="line">Cmd + Option + V —— Variable</span><br><span class="line"></span><br><span class="line">Cmd + Option + C —— Constant</span><br><span class="line"></span><br><span class="line">Cmd + Option + F —— Field</span><br><span class="line"></span><br><span class="line">Cmd + Option + P —— Parameter</span><br><span class="line"></span><br><span class="line">Cmd + Option + M —— Member</span><br><span class="line"></span><br><span class="line">Cmd + Option + T —— Surround <span class="keyword">with</span></span><br><span class="line"></span><br><span class="line">其它的一些不错的功能</span><br><span class="line"></span><br><span class="line">Cmd + N New</span><br><span class="line"></span><br><span class="line">Option + Enter</span><br><span class="line"></span><br><span class="line">Find <span class="keyword">and</span> replace code duplicates</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、Debug</span><br><span class="line"></span><br><span class="line">Run / Debug / Step ……（常用功能我就不啰嗦了）</span><br><span class="line"></span><br><span class="line">Attach Debugger 建议自己设定快捷键</span><br><span class="line"></span><br><span class="line">Toggle Breakpoints Cmd+F8</span><br><span class="line"></span><br><span class="line">Conditional Breakpoints</span><br><span class="line"></span><br><span class="line">Logging Breakpoints</span><br><span class="line"></span><br><span class="line">Temporary Breakpoints</span><br><span class="line"></span><br><span class="line">Disable Breakpoints</span><br><span class="line"></span><br><span class="line">Evaluate Expression</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、Other</span><br><span class="line"></span><br><span class="line">a、布局预览</span><br><span class="line"></span><br><span class="line">xmlns:tools=”http://schemas.android.com/tools“</span><br><span class="line"></span><br><span class="line">tools:visibility=“invisible”</span><br><span class="line"></span><br><span class="line">b、自动导入：Preferences -&amp;gt; Editor -&amp;gt; Auto Import -&amp;gt; Java</span><br><span class="line"></span><br><span class="line">c、Navigation Menu</span><br><span class="line"></span><br><span class="line">d、 Setting up the Android Studio Proxy</span><br><span class="line"></span><br><span class="line">Android Studio supports HTTP proxy settings so you can run Android Studio behind a firewall <span class="keyword">or</span> secure network.</span><br><span class="line"></span><br><span class="line">e、use github &amp;amp; gist &amp;amp; sh are project on Github</span><br><span class="line"></span><br><span class="line">f、 Live Templates</span><br><span class="line"></span><br><span class="line">g、生成Doc文档</span><br><span class="line"></span><br><span class="line">h、plugin (eg: .gitignore)</span><br><span class="line"></span><br><span class="line">i、analyze （eg: Inspect code Android lint)</span><br><span class="line"></span><br><span class="line">j、bookmark</span><br><span class="line"></span><br><span class="line">k、Presentation Mode</span><br><span class="line"></span><br><span class="line">Option + F1 —— 选择菜单</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看Python安装位置]]></title>
      <url>http://febsky.me/2015/01/27/2015-02-25-%E6%9F%A5%E7%9C%8BPython%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>有时我们需要查看python的安装位置，好安装第三方库</p>
<p>打开命令行，我们能输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;[node@dev3 ~]$ python &#10;&#10;Python 2.6.6 (r266:84292, Jan 22 2014, 09:42:36) &#10;&#10;[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2&#10;&#10;Type &#38;quot;help&#38;quot;, &#38;quot;copyright&#38;quot;, &#38;quot;credits&#38;quot; or &#38;quot;license&#38;quot; for more information.&#10;&#10;&#38;gt;&#38;gt;&#38;gt; import sys&#10;&#10;&#38;gt;&#38;gt;&#38;gt; sys.path&#10;&#10;[&#39;&#39;, &#39;/usr/lib64/python2.6/site-packages/tornado-4.0.2-py2.6-linux-x86_64.egg&#39;, &#39;/usr/lib64/python2.6/site-packages/backports.ssl_match_hostname-3.4.0.2-py2.6.egg&#39;, &#39;/usr/lib64/python2.6/site-packages/certifi-14.05.14-py2.6.egg&#39;, &#39;/usr/lib/python2.6/site-packages/pip-1.5.5-py2.6.egg&#39;, &#39;/usr/lib/python2.6/site-packages/DBUtils-1.1-py2.6.egg&#39;, &#39;/usr/lib/python2.6/site-packages/redis-2.10.3-py2.6.egg&#39;, &#39;/usr/lib64/python26.zip&#39;, &#39;/usr/lib64/python2.6&#39;, &#39;/usr/lib64/python2.6/plat-linux2&#39;, &#39;/usr/lib64/python2.6/lib-tk&#39;, &#39;/usr/lib64/python2.6/lib-old&#39;, &#39;/usr/lib64/python2.6/lib-dynload&#39;, &#39;/usr/lib64/python2.6/site-packages&#39;, &#39;/usr/lib64/python2.6/site-packages/gtk-2.0&#39;, &#39;/usr/lib/python2.6/site-packages&#39;, &#39;/usr/lib/python2.6/site-packages/setuptools-0.6c11-py2.6.egg-info&#39;]&#10;&#10;&#38;gt;&#38;gt;&#38;gt;</span><br></pre></td></tr></table></figure>
<p>好，<code>/usr/lib64/python2.6/</code>这个就是你的Python的安装路径</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看Python安装位置]]></title>
      <url>http://febsky.me/2015/01/27/2015-02-25-Python%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h2>函数（方法）</h2>


<p></p><h3>help()</h3><br>可以看到详细信息，–More–上回车，滚动信息。q 退出帮助.<p></p>
<pre class="prettyprint linenums">
import sys  
print(help(sys))  
</pre>


<p></p><h3>dir()</h3><br>列出模块定义的标识符(类、函数、变量）<p></p>
<p>列出对象定义的标识符(函数、变量）</p>
<p>列出方法定义的标识符(变量）</p>
<pre class="prettyprint linenums">
import sys  
print(dir(sys))  
</pre>


<p></p><h3>type(object)</h3><br>返回该object的类型<p></p>
<p>len(s)     返回集合长度</p>
<p>locals()     返回当前的变量列表</p>
<p>globals()    返回一个描述当前全局符号表的字典</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime text 3 安装包管理器的代码]]></title>
      <url>http://febsky.me/2015/01/27/2015-01-27-Sublime%20text%203%20%E5%AE%89%E8%A3%85%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="Sublime-text-3-安装包管理器的代码"><a href="#Sublime-text-3-安装包管理器的代码" class="headerlink" title="Sublime text 3 安装包管理器的代码"></a>Sublime text 3 安装包管理器的代码</h2><p>打开控制台：ctrl + ~或者菜单栏选择   view    — &gt; show  console<br>然后输入下面代码，注意不能有回车，下面代码必须在一行中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 的配置文件]]></title>
      <url>http://febsky.me/2015/01/25/2015-01-25-Sublime%20Text%20%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>Sublime 是个很好用的文本编辑器，可以安装后拷贝的U盘或者网盘中在任意的地方使用。但是安装的时候一定要注意配置文件 的存放位置</p>
<p>默认是不和安装文件放在一块的。</p>
<p>安装完sublime text2，在第一次运行的时候，sublime text2 会在%appdata%目录下生成一个Sublime Text 2的文件夹，用于存放配置文件，</p>
<p>以及后面安装的各种插件(所以第一次打开sublime text2时会比较慢)</p>
<p>要做的第一件事情就是把这个文件移动安装目录，便于设置完后打包。</p>
<p>第一步：安装完sublime text2后，不要直接运行。</p>
<pre><code>找到sublime text2的安装目录，并在该目录下新建 Data 文件夹(注意大小写)。如果已经运行了，请先在地址栏输入 %appdata%  然后删除

该目录下的sublime text2文件夹。完成这一步之后再打开sublime text2所有的配置文件都会被生成在Data文件夹中了。
</code></pre><p>第二步：安装你需要的插件</p>
<pre><code>这就没什么好说的了，还是默认的安装方式。安装后的插件可以在sublime text2安装目录下的 Data/Packages下找到。
</code></pre><p>第三步：打包sublime text2文件夹</p>
<pre><code>打包的文件就可以在其他电脑上直接使用了。
</code></pre><h2 id="PS-下面是网友分享的配置文件的具体含义"><a href="#PS-下面是网友分享的配置文件的具体含义" class="headerlink" title="PS.下面是网友分享的配置文件的具体含义"></a>PS.下面是网友分享的配置文件的具体含义</h2><p>Preferences.sublime-settings文件：</p>
<p>[code lang=”java”]</p>
<p>// While you can edit this file, it’s best to put your changes in</p>
<p>// “User/Preferences.sublime-settings”, which overrides the settings in here.</p>
<p>//</p>
<p>// Settings may also be placed in file type specific options files, for</p>
<p>// example, in Packages/Python/Python.sublime-settings for python files.</p>
<p>{</p>
<p>// Sets the colors used within the text area</p>
<p>// 主题文件的路径</p>
<p>“color_scheme”: “Packages/Color Scheme – Default/Monokai.tmTheme”,</p>
<p>// Note that the font_face and font_size are overriden in the platform</p>
<p>// specific settings file, for example, “Preferences (Linux).sublime-settings”.</p>
<p>// Because of this, setting them here will have no effect: you must set them</p>
<p>// in your User File Preferences.</p>
<p>// 设置字体和大小，必须在Settings-User里重写，这里设置没有任何效果</p>
<p>“font_face”: “Consolas”,</p>
<p>“font_size”: 12,</p>
<p>// Valid options are “no_bold”, “no_italic”, “no_antialias”, “gray_antialias”,</p>
<p>// “subpixel_antialias” and “no_round” (OS X only)</p>
<p>// 字体选项：no_bold不显示粗体字，no_italic不显示斜体字，no_antialias和no_antialias关闭反锯齿</p>
<p>// subpixel_antialias和no_round是OS X系统独有的</p>
<p>“font_options”: [],</p>
<p>// Characters that are considered to separate words</p>
<p>// 在文字上双击会全选当前的内容，如果里面出现以下字符，就会被截断</p>
<p>“word_separators”: “./\()\”‘-:,.;&lt;&gt;~!@#$%^&amp;*|+=[]{}`~?”,</p>
<p>// Set to false to prevent line numbers being drawn in the gutter</p>
<p>// 是否显示行号</p>
<p>“line_numbers”: true,</p>
<p>// Set to false to hide the gutter altogether</p>
<p>// 是否显示行号边栏</p>
<p>“gutter”: true,</p>
<p>// Spacing between the gutter and the text</p>
<p>// 行号边栏和文字的间距</p>
<p>“margin”: 4,</p>
<p>// Fold buttons are the triangles shown in the gutter to fold regions of text</p>
<p>// 是否显示代码折叠按钮</p>
<p>“fold_buttons”: true,</p>
<p>// Hides the fold buttons unless the mouse is over the gutter</p>
<p>// 不管鼠标在不在行号边栏，代码折叠按钮一直显示</p>
<p>“fade_fold_buttons”: true,</p>
<p>// Columns in which to display vertical rulers</p>
<p>//列显示垂直标尺，在中括号里填入数字，宽度按字符计算</p>
<p>“rulers”: [],</p>
<p>// Set to true to turn spell checking on by default</p>
<p>// 是否打开拼写检查</p>
<p>“spell_check”: false,</p>
<p>// The number of spaces a tab is considered equal to</p>
<p>// Tab键制表符宽度</p>
<p>“tab_size”: 4,</p>
<p>// Set to true to insert spaces when tab is pressed</p>
<p>// 设为true时，缩进和遇到Tab键时使用空格替代</p>
<p>“translate_tabs_to_spaces”: false,</p>
<p>// If translate_tabs_to_spaces is true, use_tab_stops will make tab and</p>
<p>// backspace insert/delete up to the next tabstop</p>
<p>// translate_tabs_to_spaces设置为true，Tab和Backspace的删除/插入作用于制表符宽度</p>
<p>// 否则作用于单个空格</p>
<p>“use_tab_stops”: true,</p>
<p>// Set to false to disable detection of tabs vs. spaces on load</p>
<p>// false时禁止在载入的时候检测制表符和空格</p>
<p>“detect_indentation”: true,</p>
<p>// Calculates indentation automatically when pressing enter</p>
<p>// 按回车时，自动与制表位对齐</p>
<p>“auto_indent”: true,</p>
<p>// Makes auto indent a little smarter, e.g., by indenting the next line</p>
<p>// after an if statement in C. Requires auto_indent to be enabled.</p>
<p>//针对C语言的</p>
<p>“smart_indent”: false,</p>
<p>// Adds whitespace up to the first open bracket when indenting. Requires</p>
<p>// auto_indent to be enabled.</p>
<p>// 需要启用auto_indent，第一次打开括号缩进时插入空格？（没测试出来效果…）</p>
<p>“indent_to_bracket”: true,</p>
<p>// Trims white space added by auto_indent when moving the caret off the</p>
<p>// line.</p>
<p>// 显示对齐的白线是否根据回车、tab等操作自动填补</p>
<p>“trim_automatic_white_space”: true,</p>
<p>// Disables horizontal scrolling if enabled.</p>
<p>// May be set to true, false, or “auto”, where it will be disabled for</p>
<p>// source code, and otherwise enabled.</p>
<p>// 是否自动换行，如果选auto，需要加双引号</p>
<p>“word_wrap”: false,</p>
<p>// Set to a value other than 0 to force wrapping at that column rather than the</p>
<p>// window width</p>
<p>// 设置窗口内文字区域的宽度</p>
<p>“wrap_width”: 0,</p>
<p>// Set to false to prevent word wrapped lines from being indented to the same</p>
<p>// level</p>
<p>// 防止被缩进到同一级的字换行</p>
<p>“indent_subsequent_lines”: true,</p>
<p>// Draws text centered in the window rather than left aligned</p>
<p>// 如果没有定义过，则文件居中显示（比如新建的文件）</p>
<p>“draw_centered”: false,</p>
<p>// Controls auto pairing of quotes, brackets etc</p>
<p>// 自动匹配引号，括号等</p>
<p>“auto_match_enabled”: true,</p>
<p>// Word list to use for spell checking</p>
<p>// 拼写检查的单词列表路径</p>
<p>“dictionary”: “Packages/Language – English/en_US.dic”,</p>
<p>// Set to true to draw a border around the visible rectangle on the minimap.</p>
<p>// The color of the border will be determined by the “minimapBorder” key in</p>
<p>// the color scheme</p>
<p>// 代码地图的可视区域部分是否加上边框，边框的颜色可在配色方案上加入minimapBorder键</p>
<p>“draw_minimap_border”: false,</p>
<p>// If enabled, will highlight any line with a caret</p>
<p>// 突出显示当前光标所在的行</p>
<p>“highlight_line”: false,</p>
<p>// Valid values are “smooth”, “phase”, “blink”, “wide” and “solid”.</p>
<p>// 设置光标闪动方式</p>
<p>“caret_style”: “smooth”,</p>
<p>// Set to false to disable underlining the brackets surrounding the caret</p>
<p>// 是否特殊显示当前光标所在的括号、代码头尾闭合标记</p>
<p>“match_brackets”: true,</p>
<p>// Set to false if you’d rather only highlight the brackets when the caret is</p>
<p>// next to one</p>
<p>// 设为false时，只有光标在括号或头尾闭合标记的两端时，match_brackets才生效</p>
<p>“match_brackets_content”: true,</p>
<p>// Set to false to not highlight square brackets. This only takes effect if</p>
<p>// match_brackets is true</p>
<p>// 是否突出显示圆括号，match_brackets为true生效</p>
<p>“match_brackets_square”: false,</p>
<p>// Set to false to not highlight curly brackets. This only takes effect if</p>
<p>// match_brackets is true</p>
<p>// 是否突出显示大括号，match_brackets为true生效</p>
<p>“match_brackets_braces”: false,</p>
<p>// Set to false to not highlight angle brackets. This only takes effect if</p>
<p>// match_brackets is true</p>
<p>// 是否突出显示尖括号，match_brackets为true生效</p>
<p>“match_brackets_angle”: false,</p>
<p>// Enable visualization of the matching tag in HTML and XML</p>
<p>// html和xml下突出显示光标所在标签的两端，影响HTML、XML、CSS等</p>
<p>“match_tags”: true,</p>
<p>// Highlights other occurrences of the currently selected text</p>
<p>// 全文突出显示和当前选中字符相同的字符</p>
<p>“match_selection”: true,</p>
<p>// Additional spacing at the top of each line, in pixels</p>
<p>// 设置每一行到顶部，以像素为单位的间距，效果相当于行距</p>
<p>“line_padding_top”: 1,</p>
<p>// Additional spacing at the bottom of each line, in pixels</p>
<p>// 设置每一行到底部，以像素为单位的间距，效果相当于行距</p>
<p>“line_padding_bottom”: 1,</p>
<p>// Set to false to disable scrolling past the end of the buffer.</p>
<p>// On OS X, this value is overridden in the platform specific settings, so</p>
<p>// you’ll need to place this line in your user settings to override it.</p>
<p>// 设置为false时，滚动到文本的最下方时，没有缓冲区</p>
<p>“scroll_past_end”: true,</p>
<p>// This controls what happens when pressing up or down when on the first</p>
<p>// or last line.</p>
<p>// On OS X, this value is overridden in the platform specific settings, so</p>
<p>// you’ll need to place this line in your user settings to override it.</p>
<p>// 控制向上或向下到第一行或最后一行时发生什么（没明白也没试出来）</p>
<p>“move_to_limit_on_up_down”: false,</p>
<p>// Set to “none” to turn off drawing white space, “selection” to draw only the</p>
<p>// white space within the selection, and “all” to draw all white space</p>
<p>// 按space或tab时，实际会产生白色的点（一个空格一个点）或白色的横线（tab_size设置的制表符的宽度），选中状态下才能看到</p>
<p>// 设置为none时，什么情况下都不显示这些点和线</p>
<p>// 设置为selection时，只显示选中状态下的点和线</p>
<p>// 设置为all时，则一直显示</p>
<p>“draw_white_space”: “selection”,</p>
<p>// Set to false to turn off the indentation guides.</p>
<p>// The color and width of the indent guides may be customized by editing</p>
<p>// the corresponding .tmTheme file, and specifying the colors “guide”,</p>
<p>// “activeGuide” and “stackGuide”</p>
<p>// 制表位的对齐白线是否显示，颜色可在主题文件里设置（guide，activeGuide，stackGuide）</p>
<p>“draw_indent_guides”: true,</p>
<p>// Controls how the indent guides are drawn, valid options are</p>
<p>// “draw_normal” and “draw_active”. draw_active will draw the indent</p>
<p>// guides containing the caret in a different color.</p>
<p>// 制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</p>
<p>“indent_guide_options”: [&quot;draw_normal&quot;],</p>
<p>// Set to true to removing trailing white space on save</p>
<p>// 为true时，保存文件时会删除每行结束后多余的空格</p>
<p>“trim_trailing_white_space_on_save”: false,</p>
<p>// Set to true to ensure the last line of the file ends in a newline</p>
<p>// character when saving</p>
<p>// 为true时，保存文件时光标会在文件的最后向下换一行</p>
<p>“ensure_newline_at_eof_on_save”: false,</p>
<p>// Set to true to automatically save files when switching to a different file</p>
<p>// or application</p>
<p>// 切换到其它文件标签或点击其它非本软件区域，文件自动保存</p>
<p>“save_on_focus_lost”: false,</p>
<p>// The encoding to use when the encoding can’t be determined automatically.</p>
<p>// ASCII, UTF-8 and UTF-16 encodings will be automatically detected.</p>
<p>// 编码时不能自动检测编码时，将自动检测ASCII, UTF-8 和 UTF-16</p>
<p>“fallback_encoding”: “Western (Windows 1252)”,</p>
<p>// Encoding used when saving new files, and files opened with an undefined</p>
<p>// encoding (e.g., plain ascii files). If a file is opened with a specific</p>
<p>// encoding (either detected or given explicitly), this setting will be</p>
<p>// ignored, and the file will be saved with the encoding it was opened</p>
<p>// with.</p>
<p>// 默认编码格式</p>
<p>“default_encoding”: “UTF-8″,</p>
<p>// Files containing null bytes are opened as hexadecimal by default</p>
<p>// 包含空字节的文件被打开默认为十六进制</p>
<p>“enable_hexadecimal_encoding”: true,</p>
<p>// Determines what character(s) are used to terminate each line in new files.</p>
<p>// Valid values are ‘system’ (whatever the OS uses), ‘windows’ (CRLF) and</p>
<p>// ‘unix’ (LF only).</p>
<p>// 每一行结束的时候用什么字符做终止符</p>
<p>“default_line_ending”: “system”,</p>
<p>// When enabled, pressing tab will insert the best matching completion.</p>
<p>// When disabled, tab will only trigger snippets or insert a tab.</p>
<p>// Shift+tab can be used to insert an explicit tab when tab_completion is</p>
<p>// enabled.</p>
<p>// 设置为enabled时，在一个字符串间按Tab将插入一个制表符</p>
<p>// 设置为true时，按Tab会根据前后环境进行代码自动匹配填补</p>
<p>“tab_completion”: true,</p>
<p>// Enable auto complete to be triggered automatically when typing.</p>
<p>// 代码提示</p>
<p>“auto_complete”: true,</p>
<p>// The maximum file size where auto complete will be automatically triggered.</p>
<p>// 代码提示的大小限制</p>
<p>“auto_complete_size_limit”: 4194304,</p>
<p>// The delay, in ms, before the auto complete window is shown after typing</p>
<p>// 代码提示延迟显示</p>
<p>“auto_complete_delay”: 50,</p>
<p>// Controls what scopes auto complete will be triggered in</p>
<p>// 代码提示的控制范围</p>
<p>“auto_complete_selector”: “source – comment”,</p>
<p>// Additional situations to trigger auto complete</p>
<p>// 触发代码提示的其他情况</p>
<p>“auto_complete_triggers”: [ {&quot;selector&quot;: &quot;text.html&quot;, &quot;characters&quot;: &quot;&lt;&quot;} ],</p>
<p>// By default, auto complete will commit the current completion on enter.</p>
<p>// This setting can be used to make it complete on tab instead.</p>
<p>// Completing on tab is generally a superior option, as it removes</p>
<p>// ambiguity between committing the completion and inserting a newline.</p>
<p>// 设为false时，选择提示的代码按回车或点击可以输出出来，但选择true时不会输出而是直接换行</p>
<p>“auto_complete_commit_on_tab”: false,</p>
<p>// Controls if auto complete is shown when snippet fields are active.</p>
<p>// Only relevant if auto_complete_commit_on_tab is true.</p>
<p>// auto_complete_commit_on_tab必须为true，控制代码提示的活跃度（没明白…）</p>
<p>“auto_complete_with_fields”: false,</p>
<p>// By default, shift+tab will only unindent if the selection spans</p>
<p>// multiple lines. When pressing shift+tab at other times, it’ll insert a</p>
<p>// tab character – this allows tabs to be inserted when tab_completion is</p>
<p>// enabled. Set this to true to make shift+tab always unindent, instead of</p>
<p>// inserting tabs.</p>
<p>// 设置为false，使用Shift + tab总是插入制表符</p>
<p>“shift_tab_unindent”: true,</p>
<p>// If true, the selected text will be copied into the find panel when it’s</p>
<p>// shown.</p>
<p>// On OS X, this value is overridden in the platform specific settings, so</p>
<p>// you’ll need to place this line in your user settings to override it.</p>
<p>// 选中的文本按Ctrl + f时，自动复制到查找面板的文本框里</p>
<p>“find_selected_text”: true,</p>
<p>//</p>
<p>// User Interface Settings</p>
<p>//</p>
<p>// The theme controls the look of Sublime Text’s UI (buttons, tabs, scroll bars, etc)</p>
<p>// Data\Packages\Theme – Default\Default.sublime-theme控制软件的主题</p>
<p>“theme”: “Default.sublime-theme”,</p>
<p>// Set to 0 to disable smooth scrolling. Set to a value between 0 and 1 to</p>
<p>// scroll slower, or set to larger than 1 to scroll faster</p>
<p>// 滚动的速度</p>
<p>“scroll_speed”: 1.0,</p>
<p>// Controls side bar animation when expanding or collapsing folders</p>
<p>// 左边边栏文件夹动画</p>
<p>“tree_animation_enabled”: true,</p>
<p>// 标签页的关闭按钮</p>
<p>“show_tab_close_buttons”: true,</p>
<p>// OS X 10.7 only: Set to true to disable Lion style full screen support.</p>
<p>// Sublime Text must be restarted for this to take effect.</p>
<p>// 针对OS X</p>
<p>“use_simple_full_screen”: false,</p>
<p>// Valid values are “system”, “enabled” and “disabled”</p>
<p>// 水平垂直滚动条：system和disabled为默认显示方式，enabled为自动隐藏显示</p>
<p>“overlay_scroll_bars”: “system”,</p>
<p>//</p>
<p>// Application Behavior Settings</p>
<p>//</p>
<p>// Exiting the application with hot_exit enabled will cause it to close</p>
<p>// immediately without prompting. Unsaved modifications and open files will</p>
<p>// be preserved and restored when next starting.</p>
<p>//</p>
<p>// Closing a window with an associated project will also close the window</p>
<p>// without prompting, preserving unsaved changes in the workspace file</p>
<p>// alongside the project.</p>
<p>// 热推出功能！退出时不会提示是否保存文件，而是直接退出</p>
<p>// 下次打开软件时，文件保持退出前的状态，没来得及保存的内容都在，但并没有真实的写在原文件里</p>
<p>“hot_exit”: true,</p>
<p>// remember_open_files makes the application start up with the last set of</p>
<p>// open files. Changing this to false will have no effect if hot_exit is</p>
<p>// true</p>
<p>// 软件使用最后的设定打开文件，hot_exit为true时没有效果</p>
<p>“remember_open_files”: true,</p>
<p>// OS X only: When files are opened from finder, or by dragging onto the</p>
<p>// dock icon, this controls if a new window is created or not.</p>
<p>// 针对OS X</p>
<p>“open_files_in_new_window”: true,</p>
<p>// Set to true to close windows as soon as the last file is closed, unless</p>
<p>// there’s a folder open within the window. This is always enabled on OS X,</p>
<p>// changing it here won’t modify the behavior.</p>
<p>// 针对OS X</p>
<p>“close_windows_when_empty”: true,</p>
<p>// 哪些文件会被显示到边栏上</p>
<p>// folder_exclude_patterns and file_exclude_patterns control which files</p>
<p>// are listed in folders on the side bar. These can also be set on a per-</p>
<p>// project basis.</p>
<p>“folder_exclude_patterns”: [&quot;.svn&quot;, &quot;.git&quot;, &quot;.hg&quot;, &quot;CVS&quot;],</p>
<p>“file_exclude_patterns”: [&quot;<em>.pyc&quot;, &quot;</em>.pyo&quot;, &quot;<em>.exe&quot;, &quot;</em>.dll&quot;, &quot;<em>.obj&quot;,&quot;</em>.o&quot;, &quot;<em>.a&quot;, &quot;</em>.lib&quot;, &quot;<em>.so&quot;, &quot;</em>.dylib&quot;, &quot;<em>.ncb&quot;, &quot;</em>.sdf&quot;, &quot;<em>.suo&quot;, &quot;</em>.pdb&quot;, &quot;<em>.idb&quot;, &quot;.DS_Store&quot;, &quot;</em>.class&quot;, &quot;<em>.psd&quot;, &quot;</em>.db&quot;],</p>
<p>// These files will still show up in the side bar, but won’t be included in</p>
<p>// Goto Anything or Find in Files</p>
<p>“binary_file_patterns”: [&quot;<em>.jpg&quot;, &quot;</em>.jpeg&quot;, &quot;<em>.png&quot;, &quot;</em>.gif&quot;, &quot;<em>.ttf&quot;, &quot;</em>.tga&quot;, &quot;<em>.dds&quot;, &quot;</em>.ico&quot;, &quot;<em>.eot&quot;, &quot;</em>.pdf&quot;, &quot;<em>.swf&quot;, &quot;</em>.jar&quot;, &quot;*.zip&quot;],</p>
<p>// List any packages to ignore here. When removing entries from this list,</p>
<p>// a restart may be required if the package contains plugins.</p>
<p>// 删除你想要忽略的插件，需要重启</p>
<p>“ignored_packages”: [&quot;Vintage&quot;]</p>
<p>}</p>
<p>[/code]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符编码简介]]></title>
      <url>http://febsky.me/2015/01/24/2015-02-25-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>首先声明这篇文章是抄的，<a href="http://www.cnblogs.com/huxi/articles/1897271.html" target="_blank" rel="external">原文出处</a></p>
<h2 id="字符编码简介"><a href="#字符编码简介" class="headerlink" title="字符编码简介"></a>字符编码简介</h2><h3 id="1-1-ASCII"><a href="#1-1-ASCII" class="headerlink" title="1.1. ASCII"></a>1.1. ASCII</h3><p>ASCII(American Standard Code for Information Interchange)，是一种单字节的编码。计算机世界里一开始只有英文，而单字节可以表示256个不同的字符，可以表示所有的英文字符和许多的控制符号。不过ASCII只用到了其中的一半（\x80以下），这也是MBCS得以实现的基础。</p>
<h3 id="1-2-MBCS"><a href="#1-2-MBCS" class="headerlink" title="1.2. MBCS"></a>1.2. MBCS</h3><p>然而计算机世界里很快就有了其他语言，单字节的ASCII已无法满足需求。后来每个语言就制定了一套自己的编码，由于单字节能表示的字符太少，而且同时也需要与ASCII编码保持兼容，所以这些编码纷纷使用了多字节来表示字符，如GBxxx、BIGxxx等等，他们的规则是，如果第一个字节是\x80以下，则仍然表示ASCII字符；而如果是\x80以上，则跟下一个字节一起（共两个字节）表示一个字符，然后跳过下一个字节，继续往下判断。</p>
<p>这里，IBM发明了一个叫Code Page的概念，将这些编码都收入囊中并分配页码，GBK是第936页，也就是CP936。所以，也可以使用CP936表示GBK。</p>
<p>MBCS(Multi-Byte Character Set)是这些编码的统称。目前为止大家都是用了双字节，所以有时候也叫做DBCS(Double-Byte Character Set)。必须明确的是，MBCS并不是某一种特定的编码，Windows里根据你设定的区域不同，MBCS指代不同的编码，而Linux里无法使用MBCS作为编码。在Windows中你看不到MBCS这几个字符，因为微软为了更加洋气，使用了ANSI来吓唬人，记事本的另存为对话框里编码ANSI就是MBCS。同时，在简体中文Windows默认的区域设定里，指代GBK。</p>
<h3 id="1-3-Unicode"><a href="#1-3-Unicode" class="headerlink" title="1.3. Unicode"></a>1.3. Unicode</h3><p>后来，有人开始觉得太多编码导致世界变得过于复杂了，让人脑袋疼，于是大家坐在一起拍脑袋想出来一个方法：所有语言的字符都用同一种字符集来表示，这就是Unicode。</p>
<p>最初的Unicode标准UCS-2使用两个字节表示一个字符，所以你常常可以听到Unicode使用两个字节表示一个字符的说法。但过了不久有人觉得256*256太少了，还是不够用，于是出现了UCS-4标准，它使用4个字节表示一个字符，不过我们用的最多的仍然是UCS-2。</p>
<p>UCS(Unicode Character Set)还仅仅是字符对应码位的一张表而已，比如”汉”这个字的码位是6C49。字符具体如何传输和储存则是由UTF(UCS Transformation Format)来负责。</p>
<p>一开始这事很简单，直接使用UCS的码位来保存，这就是UTF-16，比如，”汉”直接使用\x6C\x49保存(UTF-16-BE)，或是倒过来使用\x49\x6C保存(UTF-16-LE)。但用着用着美国人觉得自己吃了大亏，以前英文字母只需要一个字节就能保存了，现在大锅饭一吃变成了两个字节，空间消耗大了一倍……于是UTF-8横空出世。</p>
<p>UTF-8是一种很别扭的编码，具体表现在他是变长的，并且兼容ASCII，ASCII字符使用1字节表示。然而这里省了的必定是从别的地方抠出来的，你肯定也听说过UTF-8里中文字符使用3个字节来保存吧？4个字节保存的字符更是在泪奔……（具体UCS-2是怎么变成UTF-8的请自行搜索）</p>
<p>另外值得一提的是BOM(Byte Order Mark)。我们在储存文件时，文件使用的编码并没有保存，打开时则需要我们记住原先保存时使用的编码并使用这个编码打开，这样一来就产生了许多麻烦。（你可能想说记事本打开文件时并没有让选编码？不妨先打开记事本再使用文件 -&gt; 打开看看）而UTF则引入了BOM来表示自身编码，如果一开始读入的几个字节是其中之一，则代表接下来要读取的文字使用的编码是相应的编码：</p>
<p>BOM_UTF8 ‘\xef\xbb\xbf’ </p>
<p>BOM_UTF16_LE ‘\xff\xfe’ </p>
<p>BOM_UTF16_BE ‘\xfe\xff’</p>
<p>并不是所有的编辑器都会写入BOM，但即使没有BOM，Unicode还是可以读取的，只是像MBCS的编码一样，需要另行指定具体的编码，否则解码将会失败。</p>
<p>你可能听说过UTF-8不需要BOM，这种说法是不对的，只是绝大多数编辑器在没有BOM时都是以UTF-8作为默认编码读取。即使是保存时默认使用ANSI(MBCS)的记事本，在读取文件时也是先使用UTF-8测试编码，如果可以成功解码，则使用UTF-8解码。记事本这个别扭的做法造成了一个BUG：如果你新建文本文件并输入”姹塧”然后使用ANSI(MBCS)保存，再打开就会变成”汉a”，你不妨试试 ：）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Postgres 序列操作]]></title>
      <url>http://febsky.me/2015/01/04/2014-12-11-Postgres%20%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>在用到postgres的时候我们用到这么一个功能：</p>
<ol>
<li>需要一个自增的主键，在postgres中，要增加一列来充当自增主键的话，必须增加一个序列，</li>
</ol>
<p>即使用serial8类型能指定自增，我们也知道系统会默认为我们的这张表添加一个自增序列保存。</p>
<ol>
<li>我们不单单要自增还想在序列号的11开始自增，这就用到了下面的几个函数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#21487;&#29992;&#30340;&#24207;&#21015;&#20989;&#25968;&#26377;&#8758;&#10;&#10;nextval&#10;&#10;&#36882;&#22686;&#24207;&#21015;&#23545;&#35937;&#21040;&#23427;&#30340;&#19979;&#19968;&#20010;&#25968;&#20540;&#24182;&#19988;&#36820;&#22238;&#35813;&#20540;&#12290;&#36825;&#20010;&#21160;&#20316;&#26159;&#33258;&#21160;&#23436;&#25104;&#30340;&#65306; &#10;&#10;&#21363;&#20351;&#22810;&#20010;&#20250;&#35805;&#24182;&#21457;&#36816;&#34892; nextval&#65292;&#27599;&#20010;&#36827;&#31243;&#20063;&#20250;&#23433;&#20840;&#22320;&#25910;&#21040;&#19968;&#20010;&#21807;&#19968;&#30340;&#24207;&#21015;&#20540;&#12290;&#10;&#10;currval&#10;&#10;&#22312;&#24403;&#21069;&#20250;&#35805;&#20013;&#36820;&#22238;&#26368;&#36817;&#19968;&#27425; nextval &#25235;&#21040;&#30340;&#35813;&#24207;&#21015;&#30340;&#25968;&#20540;&#12290; &#10;&#10;&#65288;&#22914;&#26524;&#22312;&#26412;&#20250;&#35805;&#20013;&#20174;&#26410;&#22312;&#35813;&#24207;&#21015;&#19978;&#35843;&#29992;&#36807; nextval&#65292; &#37027;&#20040;&#20250;&#25253;&#21578;&#19968;&#20010;&#38169;&#35823;&#12290;&#65289;&#35831;&#27880;&#24847;&#22240;&#20026;&#27492;&#20989;&#25968;&#36820;&#22238;&#19968;&#20010;&#20250;&#35805;&#33539;&#22260;&#30340;&#25968;&#20540;&#65292; &#23427;&#20063;&#33021;&#32473;&#20986;&#19968;&#20010;&#21487;&#39044;&#35745;&#30340;&#32467;&#26524;&#65292;&#21487;&#20197;&#21028;&#26029;&#20854;&#23427;&#20250;&#35805;&#26159;&#21542;&#25191;&#34892;&#36807; nextval&#12290;&#10;&#10;lastval&#10;&#10;&#36820;&#22238;&#24403;&#21069;&#20250;&#35805;&#37324;&#26368;&#36817;&#19968;&#27425; nextval &#36820;&#22238;&#30340;&#25968;&#20540;&#12290; &#10;&#10;&#36825;&#20010;&#20989;&#25968;&#31561;&#25928;&#20110; currval&#65292;&#21482;&#26159;&#23427;&#19981;&#29992;&#24207;&#21015;&#21517;&#20301;&#21442;&#25968;&#65292; &#23427;&#25235;&#21462;&#24403;&#21069;&#20250;&#35805;&#37324;&#38754;&#26368;&#36817;&#19968;&#27425; nextval &#20351;&#29992;&#30340;&#24207;&#21015;&#12290; &#10;&#10;&#22914;&#26524;&#24403;&#21069;&#20250;&#35805;&#36824;&#27809;&#26377;&#35843;&#29992;&#36807; nextval&#65292;&#37027;&#20040;&#35843;&#29992; lastval &#26159;&#20250;&#25253;&#38169;&#30340;&#12290;&#10;&#10;setval&#10;&#10;&#37325;&#32622;&#24207;&#21015;&#23545;&#35937;&#30340;&#35745;&#25968;&#22120;&#25968;&#20540;&#12290;&#10;&#10;&#21452;&#21442;&#25968;&#30340;&#24418;&#24335;&#35774;&#32622;&#24207;&#21015;&#30340; last_value &#23383;&#27573;&#20026;&#22768;&#26126;&#25968;&#20540;&#24182;&#19988;&#23558;&#20854; is_called &#23383;&#27573;&#35774;&#32622;&#20026; true&#65292;&#10;&#10;&#34920;&#31034;&#19979;&#19968;&#27425; nextval &#23558;&#22312;&#36820;&#22238;&#25968;&#20540;&#20043;&#21069;&#36882;&#22686;&#35813;&#24207;&#21015;&#12290;&#10;&#10;&#22312;&#19977;&#21442;&#25968;&#24418;&#24335;&#37324;&#65292;is_called &#21487;&#20197;&#35774;&#32622;&#20026; true &#25110; false&#12290;&#10;&#10;&#22914;&#26524;&#20320;&#25226;&#23427;&#35774;&#32622;&#20026; false&#65292;&#37027;&#20040;&#19979;&#19968;&#27425; nextval &#23558;&#36820;&#22238;&#36825;&#37324;&#22768;&#26126;&#30340;&#25968;&#20540;&#65292;&#10;&#10;&#32780;&#20174;&#38543;&#21518;&#30340; nextval &#25165;&#24320;&#22987;&#36882;&#22686;&#35813;&#24207;&#21015;&#12290;&#10;&#10;&#27604;&#22914;&#10;&#10;SELECT setval(&#39;&#24207;&#21015;&#21517;&#23383;&#39;, 42);    //&#19979;&#27425;nextval&#23558;&#36820;&#22238; 43&#10;&#10;SELECT setval(&#39;&#24207;&#21015;&#21517;&#23383;&#39;, 42, true);     //&#21644;&#19978;&#38754;&#19968;&#26679;&#10;&#10;SELECT setval(&#39;&#24207;&#21015;&#21517;&#23383;&#39;, 42, false);    //&#19979;&#27425;nextval&#23558;&#36820;&#22238; 42&#10;&#10;setval &#36820;&#22238;&#30340;&#32467;&#26524;&#23601;&#26159;&#23427;&#30340;&#31532;&#20108;&#20010;&#21442;&#25968;&#30340;&#25968;&#20540;&#12290;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Navicat Premium 连接sqlserver2008 提示Client安装失败]]></title>
      <url>http://febsky.me/2014/12/22/2014-12-22-Navicat%20Premium%20%E8%BF%9E%E6%8E%A5sqlserver2008%20%E6%8F%90%E7%A4%BAClient%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
      <content type="html"><![CDATA[<p>具体保存信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;Installation of this product failed because it is not supported on this operating system. For information on supported configurations,&#10;&#10;see the product documentation.</span><br></pre></td></tr></table></figure>
<p><img src="http://7xripg.com1.z0.glb.clouddn.com/2014/12/03/sqlserver_error.png" alt=""></p>
<p>解决方法：</p>
<p>这个要安装一个叫做sqlncli_x64.msi的东西，手动安装，它在你的Navicat的安装目录下面，比如我的在：</p>
<p><code>D:\Program Files\PremiumSoft\Navicat Premium</code></p>
<p>如果你的电脑是64位的，就运行安装那个64位的，如果是32 的就运行那个sqlncli.msi。</p>
<p>然后再进行Sqlserver的链接就不再提示安装出错了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostGreSQL ERROR]]></title>
      <url>http://febsky.me/2014/12/18/2014-12-11-PostGreSQL%20ERROR/</url>
      <content type="html"><![CDATA[<p>今天在用PostGreSQL的命令行操作数据的时候出了下面的一个错误</p>
<p><a href="http://www.febsky.me/" target="_blank" rel="external">我的网站总被一个流氓网站爬取</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;mytestdb=# select * from FACTS_SALES;&#10;&#10;ERROR:  relation &#38;quot;facts_sales&#38;quot; does not exist&#10;&#10;LINE 1: select * from FACTS_SALES;&#10;&#10;                      ^</span><br></pre></td></tr></table></figure>
<p>我就郁闷了，这怎么会没有呢，命名用  \d 命令查看数据库的所有表的时候都能看到啊。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mytestdb=<span class="comment"># \d</span></span><br><span class="line"></span><br><span class="line">                         List of relations</span><br><span class="line"></span><br><span class="line"> Schema |              Name               | Type  | Owner | Storage </span><br><span class="line"></span><br><span class="line">--------+---------------------------------+-------+-------+---------</span><br><span class="line"></span><br><span class="line"> public | FACTS_CATEGORY_SALES_TARGET     | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_INVENTORY_WAREHOUSE       | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_PROCUREMENT               | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_SALES                     | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_SALES_PAYMENT             | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_SALES_PROMOTION           | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_STORE_INVENTORY           | table | admin | heap</span><br><span class="line"></span><br><span class="line"> public | FACTS_STORE_SALES_TARGET        | table | admin | heap</span><br><span class="line"></span><br><span class="line">(<span class="number">8</span> rows)</span><br></pre></td></tr></table></figure>
<p>原来还有这么一说，如下是网友的解答，很有道理</p>
<p>建表的时候你在表名上加了双引号，表示表名的强制的和双引号里面的内容一致，也就是说现在表名是大写的。</p>
<p>你查询的时候如果使用select <em> from ASSIGN_INFO_W; 表名会自动变小写，也就是select </em> from assign_info_w; 这样就查询不到表，</p>
<p>如果你想要查询到表，可以用这种方式：select * from “ASSIGN_INFO_W”;这样就可以查到了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test=&gt; select * from ASSIGN_INFO_W;</span><br><span class="line">ERROR:  relation "assign_info_w" does not exist</span><br><span class="line">test=&gt; select * from "ASSIGN_INFO_W";</span><br><span class="line"> DDC_PROJ_NO | RES_ID | ASSIGN_START_DATE | ASSIGN_END_DATE | ASSIGN_PERSENT | ASSIGN_PRE_FLG | INS_USER_ID | INS_TIMESTAMP | INS_PROG_ID | UPD_USER_ID | UPD_TIMESTAMP | UPD_PROG_ID</span><br><span class="line">-------------+--------+-------------------+-----------------+----------------+----------------+-------------+---------------+-------------+-------------+---------------+-------------</span><br><span class="line">(0 rows)</span><br></pre></td></tr></table></figure>
<p>提示：这种处理方式通常不被建议，最好还是在建表和查询时都不要使用双引号。</p>
<p>经过网友提示，我发现的确是这么回事，因为我的SQL语句是用数据库建模工具导出的，</p>
<p>而建模工具自动给加上了双引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;CREATE TABLE &#38;quot;FACTS_SALES&#38;quot; (&#10;&#10;    ......&#10;&#10;&#65289;&#65307;</span><br></pre></td></tr></table></figure>
<p>暂时还不知道如何取消掉建模工具中的双引号。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive添加数据和查看索引]]></title>
      <url>http://febsky.me/2014/12/11/2014-12-11-Hive%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%92%8C%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>#本机路径（跳板机）</p>
<p>LOAD DATA LOCAL INPATH <code>/tmp/date.txt</code> OVERWRITE INTO TABLE page_view PARTITION(pt=’2008-06-08’)</p>
<p>#Hadoop路径</p>
<p>LOAD DATA INPATH <code>/tmp/date.txt</code> OVERWRITE INTO TABLE page_view PARTITION(pt=’2008-06-08’)</p>
<p>#上面OVERWRITE关键会全表覆盖，如果只是想附加数据，将OVERWRITE去掉即可。 #添加一个分区到表</p>
<p>ALTER TABLE tmp_xx ADD PARTITION (pt=’100610’) location ‘/group/mywork/hive/xx/pt=100610’ ;</p>
<p>#当然你可以直接从从其它的表拖数据过来</p>
<p>INSERT OVERWRITE TABLE TMP_T1 SELECT * FROM TMP_T2;</p>
<h2 id="显示表的索引-formatted是可选"><a href="#显示表的索引-formatted是可选" class="headerlink" title="显示表的索引 #formatted是可选"></a>显示表的索引 #formatted是可选</h2><p>show formatted index on employees</p>
<p>show formatted indexed on employees</p>
<p>索引表的handler，会初始化，定义，验证索引表的schema</p>
<p>在索引建立时，会使用rebuilding process，读取表为索引表并且写到索引数据库中，所有的存储都会</p>
<p>索引删除时，会删除明显的索引数据库</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django应用uWSGI  admin的样式丢失了  解决方案]]></title>
      <url>http://febsky.me/2014/12/09/2015-02-25-Django%E5%BA%94%E7%94%A8uWSGI%20%20admin%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%B8%A2%E5%A4%B1%E4%BA%86%20%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>Django Admin管理界面样式丢失</p>
<p>上网搜索了不少文档，多是Apache环境下的解决方案，我配置的是Nginx服务器，所以根据Apache的解决提示</p>
<p>进而摸索办法，最终要解决这个问题我这里总结有3步（假设已经配置好admin登录系统）：</p>
<ol>
<li>修改settings.py中STATIC_ROOT为你的static静态文件的物理路径，比如说我静态文件存放在</li>
</ol>
<p>/home/user/www/static中，首先创建www目录下的static文件夹，最后修改settings.py中STATIC_ROOT</p>
<p>指向/home/user/www/static。</p>
<ol>
<li>运行python manage.py collectstatic命令，这将从Django资源包中复制必须的静态文件到STATIC_ROOT</li>
</ol>
<p>指示的static文件夹中，这其中包括admin界面所必须的样式表（style）、图片（image）及脚本（js）等。</p>
<p>这里提示一下，假如不做第1步的话，直接运行这个命令会导致如下的错误提示（最后几行）：</p>
<p>  `File “/usr/lib/python2.7/dist-packages/django/contrib/staticfiles/management/commands/collectstatic.py”, line 41, in <strong>init</strong></p>
<pre><code>self.storage = get_storage_class(settings.STATICFILES_STORAGE)()
</code></pre><p>  File “/usr/lib/python2.7/dist-packages/django/contrib/staticfiles/storage.py”, line 23, in <strong>init</strong></p>
<pre><code>raise ImproperlyConfigured(&quot;You&apos;re using the staticfiles app &quot;
</code></pre><p>django.core.exceptions.ImproperlyConfigured: You’re using the staticfiles app without having set the STATIC_ROOT setting.`</p>
<p>其实已经提示需要配置STATIC_ROOT文件了（You’re using the staticfiles app without having set the </p>
<p>STATIC_ROOT setting）。</p>
<ol>
<li>修改Nginx配置，Debian系统下/etc/nginx/nginx.conf或者/etc/nginx/sites-enabled/里面的配置文件，</li>
</ol>
<p>在server节中添加如下内容（请根据实际情况修改）：</p>
<p>`server {</p>
<h1 id="…-其余内容略"><a href="#…-其余内容略" class="headerlink" title="… 其余内容略"></a>… 其余内容略</h1><p>  location /static {</p>
<pre><code>root /home/user/www;
</code></pre><p>  }</p>
<p>}`</p>
<p>此处不修改的话，我测试下来结果貌似默认处理会交由Django，但是依旧会由Django提示Page not found (404)。</p>
<p>完成上面三步后，重新加载相应设置：</p>
<p>`invoke-rc.d uwsgi reload</p>
<p>nginx -s reload</p>
<p>blog地址</p>
<p><a href="http://wangye.org/blog/archives/572/`" target="_blank" rel="external">http://wangye.org/blog/archives/572/`</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[改变html中鼠标形状]]></title>
      <url>http://febsky.me/2014/12/08/2014-12-08-%E6%94%B9%E5%8F%98html%E4%B8%AD%E9%BC%A0%E6%A0%87%E5%BD%A2%E7%8A%B6/</url>
      <content type="html"><![CDATA[<p>要修改的属性是：</p>
<p><code>style=&quot;cursor:default&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;pointer:&#26159;&#25163;&#22411;&#12290;&#10;&#10;&#12288;&#12288; crosshair:&#26159;&#21313;&#23383;&#22411;&#65292;&#23601;&#26159;&#23567;&#20044;&#40863;&#39318;&#39029;&#25152;&#29992;&#30340;&#26679;&#24335;&#12290;&#10;&#10;&#12288;&#12288; text:&#26159;&#24179;&#26102;&#40736;&#26631;&#31227;&#21160;&#21040;&#25991;&#26412;&#19978;&#30340;&#26679;&#24335;&#12290;&#10;&#10;&#12288;&#12288; wait:&#26159;&#31561;&#24453;&#30340;&#25928;&#26524;&#12290;&#10;&#10;&#12288;&#12288; default:&#26159;&#40664;&#35748;&#30340;&#37027;&#31181;&#25928;&#26524;&#12290;&#10;&#10;&#12288;&#12288; help:&#26159;&#24102;&#38382;&#21495;&#30340;&#40736;&#26631;&#26679;&#24335;&#12290;&#10;&#10;&#12288;&#12288; e-resize:&#26159;&#21521;&#21491;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; ne-resize:&#26159;&#21521;&#21491;&#19978;&#26041;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; n-resize:&#26159;&#21521;&#19978;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; nw-resize:&#26159;&#21521;&#24038;&#19978;&#26041;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; w-resize:&#26159;&#21521;&#24038;&#30340;&#31661;&#20851;&#12290;&#10;&#10;&#12288;&#12288; sw-resize:&#26159;&#21521;&#24038;&#19979;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; s-resize:&#26159;&#21521;&#19979;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; se-resize:&#26159;&#21521;&#21491;&#19979;&#26041;&#30340;&#31661;&#22836;&#12290;&#10;&#10;&#12288;&#12288; auto:&#26159;&#31995;&#32479;&#33258;&#21160;&#30340;&#25928;&#26524;&#12290;</span><br></pre></td></tr></table></figure>
<p>当然一般的修改我是通过js或者jQuery的事件来改变鼠标样式属性的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos6 配置Django服务器运行环境(一)-------Python安装]]></title>
      <url>http://febsky.me/2014/12/04/2015-02-25-centos6%20%E9%85%8D%E7%BD%AEDjango%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83(%E4%B8%80)-------Python%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="1-安装wget"><a href="#1-安装wget" class="headerlink" title="1.安装wget"></a>1.安装wget</h2><p>yum install wget</p>
<h2 id="2-下载Python安装包"><a href="#2-下载Python安装包" class="headerlink" title="2.下载Python安装包"></a>2.下载Python安装包</h2><p>wget <a href="http://www.python.org/ftp/python/2.7.5/Python-2.7.5.tar.bz2" target="_blank" rel="external">http://www.python.org/ftp/python/2.7.5/Python-2.7.5.tar.bz2</a></p>
<p>如果报错</p>
<p>ERROR: certificate common name <code>*.python.org&#39; doesn&#39;t match requested host name</code>python.org’.</p>
<p>To connect to python.org insecurely, use `–no-check-certificate’.</p>
<p>Unable to establish SSL connection.</p>
<p>在上述命令上添加 –no-check-certificate</p>
<h2 id="3-复制本机文件到远程服务器"><a href="#3-复制本机文件到远程服务器" class="headerlink" title="3.复制本机文件到远程服务器"></a>3.复制本机文件到远程服务器</h2><p><code>scp /filepath/filename.rar root@192.168.138.151:/home/user/download</code></p>
<h2 id="4-解压Python安装包，并安装"><a href="#4-解压Python安装包，并安装" class="headerlink" title="4.解压Python安装包，并安装"></a>4.解压Python安装包，并安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;tar jxvf Python-2.7.5.tar.bz2&#10;&#10;cd Python-2.7.5&#10;&#10;./configure --prefix=/usr/local&#10;&#10;make &#38;&#38; make altinstall&#10;&#10;&#21019;&#24314;&#36719;&#38142;&#25509;&#10;&#10;mv /usr/bin/python /usr/bin/python2.6&#10;&#10;ln -s /usr/local/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hadoop 2.4.1单击模式启动报错JAVA_HOME is not set.]]></title>
      <url>http://febsky.me/2014/12/02/2014-12-11-hadoop%202.4.1%E5%8D%95%E5%87%BB%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99JAVA_HOME%20is%20not%20set./</url>
      <content type="html"><![CDATA[<p>Hadoop  启动服务的时候报如下错误：</p>
<p>[code lang=”java”]</p>
<p>[root@localhost hadoop-2.4.1]# start-all.sh    </p>
<p>This script is Deprecated. Instead use start-dfs.sh and start-mapred.sh   </p>
<p>starting namenode, logging to /home/hadoop/hadoop-2.4.1/bin/../logs/hadoop-root-namenode-ubuntu.out   </p>
<p>localhost: Error: JAVA_HOME is not set.   </p>
<p>localhost: Error: JAVA_HOME is not set.   </p>
<p>starting jobtracker, logging to /home/hadoop/hadoop-2.4.1/bin/../logs/hadoop-root-jobtracker-ubuntu.out   </p>
<p>localhost: Error: JAVA_HOME is not set.  </p>
<p>[/code]</p>
<p>我明明已经在 /etc/profile 中配置了JAVA_HOME 了，不知打为什么这里还报错。</p>
<p>但是通过下面的方法可以解决：</p>
<p>解决方法：</p>
<p>编辑 etc/hadoop/hadoop-env.sh</p>
<p>把 JAVA_HOME 设置为 java 安装的根路径</p>
<p>JAVA_HOME=/home/jdk/jdk1.6.0_16  # 这里需要根据自己的安装路径来写</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django  在数据库设计的时候的关系操作]]></title>
      <url>http://febsky.me/2014/11/30/2015-02-25-Django%20%20%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%97%B6%E5%80%99%E7%9A%84%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>这里假设你已经建好了Django项目了。这些操作实在ubuntu命令行下面操作的，所以以下用可能会用到命令行基本操作，当然你也可以在IDE 中操作。</p>
<p>首先我们先来看下要用到的model类，也就是对应数据库中的表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;from django.db import models&#10;&#10;# Create your models here.&#10;&#10;class Author(models.Model):&#10;&#10;    name = models.CharField(max_length=30)&#10;&#10;    def __unicode__(self):&#10;&#10;        return self.name&#10;&#10;class Comment(models.Model):&#10;&#10;    comment_name = models.CharField(max_length=30)&#10;&#10;    ##&#35780;&#35770;&#30340;&#22238;&#22797;&#65292;&#36882;&#24402;&#21644;&#33258;&#24049;&#20135;&#29983;&#22810;&#23545;&#22810;&#30340;&#20851;&#31995;&#10;&#10;    child_comments = models.ManyToManyField(&#38;quot;self&#38;quot;,blank=True,null=True)    &#10;&#10;    def __unicode__(self):&#10;&#10;        return self.comment_name&#9;&#10;&#10;class Book(models.Model):&#10;&#10;    ##&#20070;&#30340;&#21517;&#23383;&#10;&#10;    name = models.CharField(max_length=30)&#10;&#10;    ###&#36825;&#37324;&#19981;&#32771;&#34385;&#23454;&#38469;&#65292;&#21482;&#26159;&#20551;&#35774;&#19968;&#26412;&#20070;&#21482;&#26377;&#19968;&#20010;&#20316;&#32773;&#10;&#10;    author = models.ForeignKey(Author)&#10;&#10;    ###&#36825;&#37324;&#36825;&#20040;&#24212;&#29992;&#26377;&#28857;&#29301;&#24378;&#65292;&#22240;&#20026;&#35780;&#35770;&#26159;&#19968;&#23545;&#22810;&#30340;&#20851;&#31995;&#65292;&#21487;&#20197;&#25918;&#21040;&#27599;&#20010;Comment&#23545;&#35937;&#20013;&#20570;&#22806;&#38190;&#10;&#10;    ###&#22312;&#36825;&#37324;&#23601;&#36825;&#20040;&#29992;&#20102;&#65292;    &#10;&#10;    comments = models.ManyToManyField(Comment)&#10;&#10;    def __unicode__(self):&#10;&#10;        return self.name</span><br></pre></td></tr></table></figure>
<p>好models.py文件修改好了，现在开始操作数据库</p>
<p>cd到带有manage.py 文件的目录下</p>
<p>命令行运行：python manage.py syncdb</p>
<p>命令行运行：python manage.py shell</p>
<p>将上面用的到三个类import进来</p>
<p>首先创建三个作者：</p>
<p>xiaoming = Author(name=”xiaoming”)</p>
<p>xiaohong = Author(name=”xiaohong”)</p>
<p>xiaogang = Author(name=”xiaogang”)</p>
<p>以上命令只是在内存中创建了对象，现在我们把他们保存到数据库中</p>
<p>xiaoming.save()</p>
<p>xiaohong.save()</p>
<p>xiaogang.save()</p>
<p>现在三个作者都保存到数据库了，可以查看下：</p>
<p>Author.objects.all()</p>
<p>OK ，接下来创建两条回复（评论），和两条子评论（评论的评论）给第一条回复添加两条回复</p>
<p>comment1 = Comment(comment_name=”First Comment!”)</p>
<p>comment2 = Comment(comment_name=”Second Comment!”)</p>
<p>child_comment1 = Comment(comment_name=”First Child Comment!”)</p>
<p>child_comment2 = Comment(comment_name=”Second Child Comment!”)</p>
<p>#####注意要想给一个Model对象添加一个多对多的关系，必须先把这个对象保存到数据库####</p>
<p>例如：comment1.child_comments.add(child_comment1)</p>
<p>是会报错的，因为还没有保存到数据库中</p>
<p>必须先执行comment1.save()</p>
<p>所以为了避免出错，我们添加关系的时候最好都是已经在数据库中存在的哦</p>
<p>comment1.save()</p>
<p>comment2.save()</p>
<p>child_comment1.save()</p>
<p>child_comment2.save()</p>
<p>然后执行：</p>
<p>comment1.child_comments.add(child_comment1)</p>
<p>comment1.child_comments.add(child_comment2)</p>
<p>或者用下面这种方式：</p>
<p>comment1.child_comments.add(child_comment1,child_comment2)</p>
<p>OK 评论关系添加好了，查看一下呗</p>
<p>Comment.objects.all()</p>
<p>comment1.child_comments.all()</p>
<p>下面就简单了，总之和上面一样：</p>
<p>创建Book对象</p>
<p>book = Book(name=”The Book “,author=xiaoming)    ##xiaoming 是一个Author对象</p>
<p>book.save()   #这里必须先save 否则下面的添加会出错</p>
<p>book.comments.add(comment1)</p>
<p>book.comments.add(comment2)</p>
<p>来看看官网的文档中的例子（很详细的）：</p>
<p><a href="https://docs.djangoproject.com/en/1.6/topics/db/examples/many_to_many/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.6/topics/db/examples/many_to_many/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[github操作遇到的几个问题]]></title>
      <url>http://febsky.me/2014/11/28/2014-11-28-github%E6%93%8D%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天操作github在更新数据的时候报以下错误</p>
<p>[code lang=”java”]</p>
<p>error: failed to push some refs to ‘git@github.com:itroadmap/itroadmap.github.com.git’</p>
<p>To prevent you from losing history, non-fast-forward updates were rejected</p>
<p>Merge the remote changes (e.g. ‘git pull’) before pushing again. See the</p>
<p>‘Note about fast-forwards’ section of ‘git push –help’ for details.</p>
<p>[/code]</p>
<p>有两种方式解决：</p>
<p>第一种 用强覆盖方式用你本地的代码替代git仓库内的内容,命令行执行如下代码：</p>
<p>[code lang=”java”]</p>
<p>$ git push -f</p>
<p>[/code]</p>
<p>第二种 先把git的东西fetch到你本地然后merge后再push</p>
<p>[code lang=”java”]</p>
<p>$ git fetch</p>
<p>$ git merge</p>
<p>[/code]</p>
<p>其实第二种方式的这两行代码等价于：</p>
<p>[code lang=”java”]</p>
<p>$ git pull</p>
<p>[/code]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jekyll 本地运行环境搭建以及遇到的错误解决]]></title>
      <url>http://febsky.me/2014/11/28/2014-11-28-Jekyll%20%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="首先安装Ruby环境"><a href="#首先安装Ruby环境" class="headerlink" title="首先安装Ruby环境"></a>首先安装Ruby环境</h2><p>至于下载方式不同的操作系统安装方式不同，这里不再详细给出</p>
<p>`</p>
<p>Ubuntu系统下，可用：sudo apt-get install ruby</p>
<p>centos系统下，可用：sudo yum install ruby</p>
<p>`</p>
<h2 id="安装Jekyll"><a href="#安装Jekyll" class="headerlink" title="安装Jekyll"></a>安装Jekyll</h2><p>当Ruby环境配置完成后（不提示任何错误），就可以安装Jekyll了。执行 gem jekyll install</p>
<p>【错误】安装Jekyll 时候出错。</p>
<p>`</p>
<p>ERROR: Could not find a valid gem ‘jekyll’ (&gt;= 0) in any repository</p>
<p>ERROR: Possible alternatives: jekyll`</p>
<p>`</p>
<p>【解决方案】如下有解决方案</p>
<p>`</p>
<p>$ gem sources –remove <a href="http://rubygems.org/" target="_blank" rel="external">http://rubygems.org/</a></p>
<p>$ gem sources -a <a href="http://ruby.taobao.org/" target="_blank" rel="external">http://ruby.taobao.org/</a></p>
<p>$ gem sources -l</p>
<p><strong><em> CURRENT SOURCES </em></strong></p>
<p><a href="http://ruby.taobao.org" target="_blank" rel="external">http://ruby.taobao.org</a></p>
<p>$ gem install rack</p>
<p>`</p>
<p>然后继续执行 gem install jekyll 即可。等待片刻，会提示 gems installed jekyll 安装完毕。</p>
<p>【错误】启动jekyll服务的时候报错</p>
<p>/var/lib/gems/1.9.1/gems/execjs-2.2.2/lib/execjs/runtimes.rb:51:in `autodetect’: Could not find a JavaScript runtime. See <a href="https://github.com/sstephenson/execjs" target="_blank" rel="external">https://github.com/sstephenson/execjs</a> for a list of available runtimes. (ExecJS::RuntimeUnavailable)</p>
<p>【解决方案】如下有解决方案</p>
<p>`</p>
<p>gem install execjs</p>
<p>gem install therubyracer ###这个我也没安装成，不过貌似没问题了</p>
<p>sudo apt-get install nodejs</p>
<p>`</p>
<h2 id="以下是在用git和jekll写blog过程中常用密令"><a href="#以下是在用git和jekll写blog过程中常用密令" class="headerlink" title="以下是在用git和jekll写blog过程中常用密令"></a>以下是在用git和jekll写blog过程中常用密令</h2><p>`</p>
<p>git clone git@github.com:heiniuhaha/heiniuhaha.github.com.git//本地如果无远程代码，先做这步，不然就忽略</p>
<p>cd .ssh/heiniuhaha.github.com//定位到你blog的目录下</p>
<p>git pull origin master //先同步远程文件，后面的参数会自动连接你远程的文件</p>
<p>git status //查看本地自己修改了多少文件</p>
<p>git add .//添加远程不存在的git文件</p>
<p>git commit * -m “what I want told to someone”</p>
<p>git push origin master //更新到远程服务器上</p>
<p>`</p>
]]></content>
    </entry>
    
  
  
</search>
